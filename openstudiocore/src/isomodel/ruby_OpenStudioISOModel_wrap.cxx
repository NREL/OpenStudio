/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ConstPtr swig_types[0]
#define SWIGTYPE_p_ConstVec swig_types[1]
#define SWIGTYPE_p_ConstWeakPtr swig_types[2]
#define SWIGTYPE_p_ImplPtr swig_types[3]
#define SWIGTYPE_p_ImplType swig_types[4]
#define SWIGTYPE_p_Ptr swig_types[5]
#define SWIGTYPE_p_Vec swig_types[6]
#define SWIGTYPE_p_WeakPtr swig_types[7]
#define SWIGTYPE_p_allocator_type swig_types[8]
#define SWIGTYPE_p_boost__log__sinks__synchronous_sinkT_boost__log__sinks__text_ostream_backend_t swig_types[9]
#define SWIGTYPE_p_boost__log__sources__severity_channel_logger_mtT_LogLevel_t swig_types[10]
#define SWIGTYPE_p_boost__optionalT_QUrl_t swig_types[11]
#define SWIGTYPE_p_boost__optionalT_double_t swig_types[12]
#define SWIGTYPE_p_boost__optionalT_int_t swig_types[13]
#define SWIGTYPE_p_boost__optionalT_openstudio__AttributeDescription_t swig_types[14]
#define SWIGTYPE_p_boost__optionalT_openstudio__Attribute_t swig_types[15]
#define SWIGTYPE_p_boost__optionalT_openstudio__BCLMeasure_t swig_types[16]
#define SWIGTYPE_p_boost__optionalT_openstudio__BTUUnit_t swig_types[17]
#define SWIGTYPE_p_boost__optionalT_openstudio__BoundingBox_t swig_types[18]
#define SWIGTYPE_p_boost__optionalT_openstudio__CFMUnit_t swig_types[19]
#define SWIGTYPE_p_boost__optionalT_openstudio__Calendar_t swig_types[20]
#define SWIGTYPE_p_boost__optionalT_openstudio__CelciusUnit_t swig_types[21]
#define SWIGTYPE_p_boost__optionalT_openstudio__DataError_t swig_types[22]
#define SWIGTYPE_p_boost__optionalT_openstudio__DateTime_t swig_types[23]
#define SWIGTYPE_p_boost__optionalT_openstudio__Date_t swig_types[24]
#define SWIGTYPE_p_boost__optionalT_openstudio__DocumentElement_t swig_types[25]
#define SWIGTYPE_p_boost__optionalT_openstudio__Document_t swig_types[26]
#define SWIGTYPE_p_boost__optionalT_openstudio__EnvironmentIdentifier_t swig_types[27]
#define SWIGTYPE_p_boost__optionalT_openstudio__EnvironmentType_t swig_types[28]
#define SWIGTYPE_p_boost__optionalT_openstudio__EulerAngles_t swig_types[29]
#define SWIGTYPE_p_boost__optionalT_openstudio__FahrenheitUnit_t swig_types[30]
#define SWIGTYPE_p_boost__optionalT_openstudio__FileReference_t swig_types[31]
#define SWIGTYPE_p_boost__optionalT_openstudio__FuelType_t swig_types[32]
#define SWIGTYPE_p_boost__optionalT_openstudio__GPDUnit_t swig_types[33]
#define SWIGTYPE_p_boost__optionalT_openstudio__IPUnit_t swig_types[34]
#define SWIGTYPE_p_boost__optionalT_openstudio__IddField_t swig_types[35]
#define SWIGTYPE_p_boost__optionalT_openstudio__IddFile_t swig_types[36]
#define SWIGTYPE_p_boost__optionalT_openstudio__IddKey_t swig_types[37]
#define SWIGTYPE_p_boost__optionalT_openstudio__IddObject_t swig_types[38]
#define SWIGTYPE_p_boost__optionalT_openstudio__IdfFile_t swig_types[39]
#define SWIGTYPE_p_boost__optionalT_openstudio__IdfObject_t swig_types[40]
#define SWIGTYPE_p_boost__optionalT_openstudio__ImfFile_t swig_types[41]
#define SWIGTYPE_p_boost__optionalT_openstudio__KeyValueIdentifier_t swig_types[42]
#define SWIGTYPE_p_boost__optionalT_openstudio__MPHUnit_t swig_types[43]
#define SWIGTYPE_p_boost__optionalT_openstudio__Misc1Unit_t swig_types[44]
#define SWIGTYPE_p_boost__optionalT_openstudio__Plane_t swig_types[45]
#define SWIGTYPE_p_boost__optionalT_openstudio__Point3d_t swig_types[46]
#define SWIGTYPE_p_boost__optionalT_openstudio__Quantity_t swig_types[47]
#define SWIGTYPE_p_boost__optionalT_openstudio__ReportingFrequency_t swig_types[48]
#define SWIGTYPE_p_boost__optionalT_openstudio__SIUnit_t swig_types[49]
#define SWIGTYPE_p_boost__optionalT_openstudio__SectionElement_t swig_types[50]
#define SWIGTYPE_p_boost__optionalT_openstudio__SectionHeading_t swig_types[51]
#define SWIGTYPE_p_boost__optionalT_openstudio__Section_t swig_types[52]
#define SWIGTYPE_p_boost__optionalT_openstudio__SqlFile_t swig_types[53]
#define SWIGTYPE_p_boost__optionalT_openstudio__Table_t swig_types[54]
#define SWIGTYPE_p_boost__optionalT_openstudio__Tag_t swig_types[55]
#define SWIGTYPE_p_boost__optionalT_openstudio__TemperatureUnit_t swig_types[56]
#define SWIGTYPE_p_boost__optionalT_openstudio__Text_t swig_types[57]
#define SWIGTYPE_p_boost__optionalT_openstudio__ThermUnit_t swig_types[58]
#define SWIGTYPE_p_boost__optionalT_openstudio__TimeDependentValuationFile_t swig_types[59]
#define SWIGTYPE_p_boost__optionalT_openstudio__TimeSeriesIdentifier_t swig_types[60]
#define SWIGTYPE_p_boost__optionalT_openstudio__TimeSeries_t swig_types[61]
#define SWIGTYPE_p_boost__optionalT_openstudio__Time_t swig_types[62]
#define SWIGTYPE_p_boost__optionalT_openstudio__Transformation_t swig_types[63]
#define SWIGTYPE_p_boost__optionalT_openstudio__UUID_t swig_types[64]
#define SWIGTYPE_p_boost__optionalT_openstudio__Unit_t swig_types[65]
#define SWIGTYPE_p_boost__optionalT_openstudio__Vector3d_t swig_types[66]
#define SWIGTYPE_p_boost__optionalT_openstudio__WhUnit_t swig_types[67]
#define SWIGTYPE_p_boost__optionalT_openstudio__WorkspaceObject_t swig_types[68]
#define SWIGTYPE_p_boost__optionalT_openstudio__Workspace_t swig_types[69]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirGap_t swig_types[70]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirLoopHVACOutdoorAirSystem_t swig_types[71]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t swig_types[72]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirLoopHVACZoneMixer_t swig_types[73]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirLoopHVACZoneSplitter_t swig_types[74]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirLoopHVAC_t swig_types[75]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t swig_types[76]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirTerminalSingleDuctUncontrolled_t swig_types[77]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirTerminalSingleDuctVAVReheat_t swig_types[78]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AirWallMaterial_t swig_types[79]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__AvailabilityManagerScheduled_t swig_types[80]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Blind_t swig_types[81]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__BoilerHotWater_t swig_types[82]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__BuildingStandardsInformation_t swig_types[83]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__BuildingStory_t swig_types[84]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Building_t swig_types[85]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CFactorUndergroundWallConstruction_t swig_types[86]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ChillerElectricEIR_t swig_types[87]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ClimateZones_t swig_types[88]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CoilCoolingDXSingleSpeed_t swig_types[89]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CoilCoolingDXTwoSpeed_t swig_types[90]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CoilCoolingWater_t swig_types[91]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CoilHeatingDXSingleSpeed_t swig_types[92]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CoilHeatingElectric_t swig_types[93]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CoilHeatingGas_t swig_types[94]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CoilHeatingWater_t swig_types[95]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ComponentCost_LineItem_t swig_types[96]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ComponentData_t swig_types[97]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Component_t swig_types[98]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ConnectorMixer_t swig_types[99]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ConnectorSplitter_t swig_types[100]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ConstructionBaseStandardsInformation_t swig_types[101]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ConstructionBase_t swig_types[102]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ConstructionWithInternalSource_t swig_types[103]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Construction_t swig_types[104]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ControllerMechanicalVentilation_t swig_types[105]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ControllerOutdoorAir_t swig_types[106]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ControllerWaterCoil_t swig_types[107]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ConvergenceLimits_t swig_types[108]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CoolingTowerSingleSpeed_t swig_types[109]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveBicubic_t swig_types[110]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveBiquadratic_t swig_types[111]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveCubic_t swig_types[112]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveDoubleExponentialDecay_t swig_types[113]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveExponent_t swig_types[114]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveExponentialDecay_t swig_types[115]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveExponentialSkewNormal_t swig_types[116]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveFanPressureRise_t swig_types[117]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveFunctionalPressureDrop_t swig_types[118]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveLinear_t swig_types[119]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveQuadraticLinear_t swig_types[120]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveQuadratic_t swig_types[121]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveQuartic_t swig_types[122]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveRectangularHyperbola1_t swig_types[123]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveRectangularHyperbola2_t swig_types[124]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveSigmoid_t swig_types[125]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__CurveTriquadratic_t swig_types[126]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Curve_t swig_types[127]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DaylightingControl_t swig_types[128]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DaylightingDeviceShelf_t swig_types[129]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DefaultConstructionSet_t swig_types[130]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DefaultScheduleSet_t swig_types[131]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DefaultSubSurfaceConstructions_t swig_types[132]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DefaultSurfaceConstructions_t swig_types[133]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DesignDay_t swig_types[134]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DesignSpecificationOutdoorAir_t swig_types[135]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DistrictCooling_t swig_types[136]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__DistrictHeating_t swig_types[137]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ElectricEquipmentDefinition_t swig_types[138]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ElectricEquipment_t swig_types[139]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t swig_types[140]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ExteriorLightsDefinition_t swig_types[141]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ExteriorLights_t swig_types[142]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__FFactorGroundFloorConstruction_t swig_types[143]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Facility_t swig_types[144]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__FanConstantVolume_t swig_types[145]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__FanVariableVolume_t swig_types[146]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__FenestrationMaterial_t swig_types[147]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__GasEquipmentDefinition_t swig_types[148]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__GasEquipment_t swig_types[149]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__GasLayer_t swig_types[150]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__GasMixture_t swig_types[151]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Gas_t swig_types[152]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__GenericModelObject_t swig_types[153]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__GlareSensor_t swig_types[154]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Glazing_t swig_types[155]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__HVACComponent_t swig_types[156]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__HeatBalanceAlgorithm_t swig_types[157]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__HotWaterEquipmentDefinition_t swig_types[158]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__HotWaterEquipment_t swig_types[159]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__IlluminanceMap_t swig_types[160]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__InfraredTransparentMaterial_t swig_types[161]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__InsideSurfaceConvectionAlgorithm_t swig_types[162]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__InteriorPartitionSurfaceGroup_t swig_types[163]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__InteriorPartitionSurface_t swig_types[164]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__InternalMassDefinition_t swig_types[165]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__InternalMass_t swig_types[166]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__LayeredConstruction_t swig_types[167]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__LifeCycleCost_Parameters_t swig_types[168]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__LightingDesignDay_t swig_types[169]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__LightingSimulationControl_t swig_types[170]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__LightingSimulationZone_t swig_types[171]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__LightsDefinition_t swig_types[172]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Lights_t swig_types[173]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Loop_t swig_types[174]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__LuminaireDefinition_t swig_types[175]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Luminaire_t swig_types[176]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__MasslessOpaqueMaterial_t swig_types[177]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Material_t swig_types[178]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Meter_t swig_types[179]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Mixer_t swig_types[180]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ModelObject_t swig_types[181]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ModelPartitionMaterial_t swig_types[182]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Model_t swig_types[183]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Node_t swig_types[184]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__OpaqueMaterial_t swig_types[185]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__OtherEquipmentDefinition_t swig_types[186]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__OtherEquipment_t swig_types[187]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__OutputVariable_t swig_types[188]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__OutsideSurfaceConvectionAlgorithm_t swig_types[189]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ParentObject_t swig_types[190]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__PeopleDefinition_t swig_types[191]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__People_t swig_types[192]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__PipeAdiabatic_t swig_types[193]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__PlanarSurfaceGroup_t swig_types[194]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__PlanarSurface_t swig_types[195]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__PlantLoop_t swig_types[196]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__PortList_t swig_types[197]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__PumpVariableSpeed_t swig_types[198]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__RadianceParameters_t swig_types[199]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__RefractionExtinctionGlazing_t swig_types[200]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Relationship_t swig_types[201]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__RenderingColor_t swig_types[202]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ResourceObject_t swig_types[203]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__RoofVegetation_t swig_types[204]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__RunPeriodControlDaylightSavingTime_t swig_types[205]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__RunPeriodControlSpecialDays_t swig_types[206]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__RunPeriod_t swig_types[207]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleBase_t swig_types[208]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleCompact_t swig_types[209]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleConstant_t swig_types[210]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleDay_t swig_types[211]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleFixedInterval_t swig_types[212]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleInterval_t swig_types[213]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleRule_t swig_types[214]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleRuleset_t swig_types[215]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleTypeLimits_t swig_types[216]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleVariableInterval_t swig_types[217]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleWeek_t swig_types[218]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ScheduleYear_t swig_types[219]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Schedule_t swig_types[220]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Screen_t swig_types[221]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SetpointManagerMixedAir_t swig_types[222]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SetpointManagerSingleZoneReheat_t swig_types[223]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Shade_t swig_types[224]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ShadingMaterial_t swig_types[225]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ShadingSurfaceGroup_t swig_types[226]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ShadingSurface_t swig_types[227]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ShadowCalculation_t swig_types[228]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SimpleGlazing_t swig_types[229]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SimulationControl_t swig_types[230]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SiteGroundReflectance_t swig_types[231]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SiteGroundTemperatureBuildingSurface_t swig_types[232]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SiteWaterMainsTemperature_t swig_types[233]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Site_t swig_types[234]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SizingParameters_t swig_types[235]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SizingPeriod_t swig_types[236]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SizingPlant_t swig_types[237]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SizingSystem_t swig_types[238]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SizingZone_t swig_types[239]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SkyTemperature_t swig_types[240]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SpaceInfiltrationDesignFlowRate_t swig_types[241]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t swig_types[242]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SpaceItem_t swig_types[243]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SpaceLoadDefinition_t swig_types[244]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SpaceLoadInstance_t swig_types[245]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SpaceLoad_t swig_types[246]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SpaceType_t swig_types[247]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Space_t swig_types[248]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Splitter_t swig_types[249]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__StandardGlazing_t swig_types[250]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__StandardOpaqueMaterial_t swig_types[251]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SteamEquipmentDefinition_t swig_types[252]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SteamEquipment_t swig_types[253]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__StraightComponent_t swig_types[254]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__SubSurface_t swig_types[255]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Surface_t swig_types[256]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ThermalZone_t swig_types[257]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ThermochromicGlazing_t swig_types[258]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ThermostatSetpointDualSetpoint_t swig_types[259]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__TimeDependentValuation_t swig_types[260]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Timestep_t swig_types[261]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__Version_t swig_types[262]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WaterHeaterMixed_t swig_types[263]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WaterToAirComponent_t swig_types[264]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WaterToWaterComponent_t swig_types[265]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WaterUseConnections_t swig_types[266]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WaterUseEquipmentDefinition_t swig_types[267]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WaterUseEquipment_t swig_types[268]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WeatherFileConditionType_t swig_types[269]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WeatherFileDays_t swig_types[270]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WeatherFile_t swig_types[271]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__WindowDataFile_t swig_types[272]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__YearDescription_t swig_types[273]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneAirContaminantBalance_t swig_types[274]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t swig_types[275]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t swig_types[276]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneHVACComponent_t swig_types[277]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneHVACEquipmentList_t swig_types[278]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneHVACFourPipeFanCoil_t swig_types[279]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t swig_types[280]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t swig_types[281]
#define SWIGTYPE_p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t swig_types[282]
#define SWIGTYPE_p_boost__optionalT_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t_t swig_types[283]
#define SWIGTYPE_p_boost__optionalT_std__string_t swig_types[284]
#define SWIGTYPE_p_boost__optionalT_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t_t swig_types[285]
#define SWIGTYPE_p_boost__optionalT_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t_t swig_types[286]
#define SWIGTYPE_p_boost__optionalT_unsigned_int_t swig_types[287]
#define SWIGTYPE_p_char swig_types[288]
#define SWIGTYPE_p_const_reference swig_types[289]
#define SWIGTYPE_p_difference_type swig_types[290]
#define SWIGTYPE_p_first_type swig_types[291]
#define SWIGTYPE_p_key_type swig_types[292]
#define SWIGTYPE_p_mapped_type swig_types[293]
#define SWIGTYPE_p_openstudio__EndUses swig_types[294]
#define SWIGTYPE_p_openstudio__SingletonT_openstudio__ApplicationSingleton_t swig_types[295]
#define SWIGTYPE_p_openstudio__SingletonT_openstudio__LoggerSingleton_t swig_types[296]
#define SWIGTYPE_p_openstudio__SingletonT_openstudio__model__ScheduleTypeRegistrySingleton_t swig_types[297]
#define SWIGTYPE_p_openstudio__UUID swig_types[298]
#define SWIGTYPE_p_openstudio__isomodel__ForwardTranslator swig_types[299]
#define SWIGTYPE_p_openstudio__isomodel__SimModel swig_types[300]
#define SWIGTYPE_p_openstudio__isomodel__UserModel swig_types[301]
#define SWIGTYPE_p_openstudio__model__Component swig_types[302]
#define SWIGTYPE_p_openstudio__model__Model swig_types[303]
#define SWIGTYPE_p_reference swig_types[304]
#define SWIGTYPE_p_second_type swig_types[305]
#define SWIGTYPE_p_size_type swig_types[306]
#define SWIGTYPE_p_std__mapT_openstudio__UUID_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_std__pairT_openstudio__UUID_const_openstudio__UUID_t_t_t swig_types[307]
#define SWIGTYPE_p_std__pairT_openstudio__IdfObject_openstudio__IdfObject_t swig_types[308]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[309]
#define SWIGTYPE_p_std__setT_double_std__lessT_double_t_std__allocatorT_double_t_t swig_types[310]
#define SWIGTYPE_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t swig_types[311]
#define SWIGTYPE_p_std__setT_openstudio__DataError_openstudio__DataErrorLess_std__allocatorT_openstudio__DataError_t_t swig_types[312]
#define SWIGTYPE_p_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t swig_types[313]
#define SWIGTYPE_p_std__setT_openstudio__ReportingFrequency_std__lessT_openstudio__ReportingFrequency_t_std__allocatorT_openstudio__ReportingFrequency_t_t swig_types[314]
#define SWIGTYPE_p_std__setT_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_openstudio__UUID_t_t swig_types[315]
#define SWIGTYPE_p_std__setT_std__string_IstringCompare_std__allocatorT_std__string_t_t swig_types[316]
#define SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t swig_types[317]
#define SWIGTYPE_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t swig_types[318]
#define SWIGTYPE_p_std__string swig_types[319]
#define SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t swig_types[320]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[321]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[322]
#define SWIGTYPE_p_std__vectorT_openstudio__AttributeDescription_std__allocatorT_openstudio__AttributeDescription_t_t swig_types[323]
#define SWIGTYPE_p_std__vectorT_openstudio__Attribute_std__allocatorT_openstudio__Attribute_t_t swig_types[324]
#define SWIGTYPE_p_std__vectorT_openstudio__BCLMeasure_std__allocatorT_openstudio__BCLMeasure_t_t swig_types[325]
#define SWIGTYPE_p_std__vectorT_openstudio__BTUUnit_std__allocatorT_openstudio__BTUUnit_t_t swig_types[326]
#define SWIGTYPE_p_std__vectorT_openstudio__BoundingBox_std__allocatorT_openstudio__BoundingBox_t_t swig_types[327]
#define SWIGTYPE_p_std__vectorT_openstudio__CFMUnit_std__allocatorT_openstudio__CFMUnit_t_t swig_types[328]
#define SWIGTYPE_p_std__vectorT_openstudio__Calendar_std__allocatorT_openstudio__Calendar_t_t swig_types[329]
#define SWIGTYPE_p_std__vectorT_openstudio__CelciusUnit_std__allocatorT_openstudio__CelciusUnit_t_t swig_types[330]
#define SWIGTYPE_p_std__vectorT_openstudio__DataError_std__allocatorT_openstudio__DataError_t_t swig_types[331]
#define SWIGTYPE_p_std__vectorT_openstudio__DateTime_std__allocatorT_openstudio__DateTime_t_t swig_types[332]
#define SWIGTYPE_p_std__vectorT_openstudio__Date_std__allocatorT_openstudio__Date_t_t swig_types[333]
#define SWIGTYPE_p_std__vectorT_openstudio__DocumentElement_std__allocatorT_openstudio__DocumentElement_t_t swig_types[334]
#define SWIGTYPE_p_std__vectorT_openstudio__EulerAngles_std__allocatorT_openstudio__EulerAngles_t_t swig_types[335]
#define SWIGTYPE_p_std__vectorT_openstudio__FahrenheitUnit_std__allocatorT_openstudio__FahrenheitUnit_t_t swig_types[336]
#define SWIGTYPE_p_std__vectorT_openstudio__FileReference_std__allocatorT_openstudio__FileReference_t_t swig_types[337]
#define SWIGTYPE_p_std__vectorT_openstudio__FuelType_std__allocatorT_openstudio__FuelType_t_t swig_types[338]
#define SWIGTYPE_p_std__vectorT_openstudio__GPDUnit_std__allocatorT_openstudio__GPDUnit_t_t swig_types[339]
#define SWIGTYPE_p_std__vectorT_openstudio__IPUnit_std__allocatorT_openstudio__IPUnit_t_t swig_types[340]
#define SWIGTYPE_p_std__vectorT_openstudio__IddField_std__allocatorT_openstudio__IddField_t_t swig_types[341]
#define SWIGTYPE_p_std__vectorT_openstudio__IddFile_std__allocatorT_openstudio__IddFile_t_t swig_types[342]
#define SWIGTYPE_p_std__vectorT_openstudio__IddKey_std__allocatorT_openstudio__IddKey_t_t swig_types[343]
#define SWIGTYPE_p_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t swig_types[344]
#define SWIGTYPE_p_std__vectorT_openstudio__IddObject_std__allocatorT_openstudio__IddObject_t_t swig_types[345]
#define SWIGTYPE_p_std__vectorT_openstudio__IdfExtensibleGroup_std__allocatorT_openstudio__IdfExtensibleGroup_t_t swig_types[346]
#define SWIGTYPE_p_std__vectorT_openstudio__IdfFile_std__allocatorT_openstudio__IdfFile_t_t swig_types[347]
#define SWIGTYPE_p_std__vectorT_openstudio__IdfObject_std__allocatorT_openstudio__IdfObject_t_t swig_types[348]
#define SWIGTYPE_p_std__vectorT_openstudio__ImfFile_std__allocatorT_openstudio__ImfFile_t_t swig_types[349]
#define SWIGTYPE_p_std__vectorT_openstudio__MPHUnit_std__allocatorT_openstudio__MPHUnit_t_t swig_types[350]
#define SWIGTYPE_p_std__vectorT_openstudio__Misc1Unit_std__allocatorT_openstudio__Misc1Unit_t_t swig_types[351]
#define SWIGTYPE_p_std__vectorT_openstudio__Plane_std__allocatorT_openstudio__Plane_t_t swig_types[352]
#define SWIGTYPE_p_std__vectorT_openstudio__Point3d_std__allocatorT_openstudio__Point3d_t_t swig_types[353]
#define SWIGTYPE_p_std__vectorT_openstudio__Quantity_std__allocatorT_openstudio__Quantity_t_t swig_types[354]
#define SWIGTYPE_p_std__vectorT_openstudio__ReportingFrequency_std__allocatorT_openstudio__ReportingFrequency_t_t swig_types[355]
#define SWIGTYPE_p_std__vectorT_openstudio__SIUnit_std__allocatorT_openstudio__SIUnit_t_t swig_types[356]
#define SWIGTYPE_p_std__vectorT_openstudio__SectionElement_std__allocatorT_openstudio__SectionElement_t_t swig_types[357]
#define SWIGTYPE_p_std__vectorT_openstudio__Section_std__allocatorT_openstudio__Section_t_t swig_types[358]
#define SWIGTYPE_p_std__vectorT_openstudio__SqlFileTimeSeriesQuery_std__allocatorT_openstudio__SqlFileTimeSeriesQuery_t_t swig_types[359]
#define SWIGTYPE_p_std__vectorT_openstudio__TableElement_std__allocatorT_openstudio__TableElement_t_t swig_types[360]
#define SWIGTYPE_p_std__vectorT_openstudio__Table_std__allocatorT_openstudio__Table_t_t swig_types[361]
#define SWIGTYPE_p_std__vectorT_openstudio__Tag_std__allocatorT_openstudio__Tag_t_t swig_types[362]
#define SWIGTYPE_p_std__vectorT_openstudio__TemperatureUnit_std__allocatorT_openstudio__TemperatureUnit_t_t swig_types[363]
#define SWIGTYPE_p_std__vectorT_openstudio__Text_std__allocatorT_openstudio__Text_t_t swig_types[364]
#define SWIGTYPE_p_std__vectorT_openstudio__ThermUnit_std__allocatorT_openstudio__ThermUnit_t_t swig_types[365]
#define SWIGTYPE_p_std__vectorT_openstudio__TimeSeries_std__allocatorT_openstudio__TimeSeries_t_t swig_types[366]
#define SWIGTYPE_p_std__vectorT_openstudio__Time_std__allocatorT_openstudio__Time_t_t swig_types[367]
#define SWIGTYPE_p_std__vectorT_openstudio__Transformation_std__allocatorT_openstudio__Transformation_t_t swig_types[368]
#define SWIGTYPE_p_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t swig_types[369]
#define SWIGTYPE_p_std__vectorT_openstudio__Unit_std__allocatorT_openstudio__Unit_t_t swig_types[370]
#define SWIGTYPE_p_std__vectorT_openstudio__Vector3d_std__allocatorT_openstudio__Vector3d_t_t swig_types[371]
#define SWIGTYPE_p_std__vectorT_openstudio__WhUnit_std__allocatorT_openstudio__WhUnit_t_t swig_types[372]
#define SWIGTYPE_p_std__vectorT_openstudio__WorkspaceObject_std__allocatorT_openstudio__WorkspaceObject_t_t swig_types[373]
#define SWIGTYPE_p_std__vectorT_openstudio__Workspace_std__allocatorT_openstudio__Workspace_t_t swig_types[374]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirGap_std__allocatorT_openstudio__model__AirGap_t_t swig_types[375]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirLoopHVACOutdoorAirSystem_std__allocatorT_openstudio__model__AirLoopHVACOutdoorAirSystem_t_t swig_types[376]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_std__allocatorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t_t swig_types[377]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirLoopHVACZoneMixer_std__allocatorT_openstudio__model__AirLoopHVACZoneMixer_t_t swig_types[378]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirLoopHVACZoneSplitter_std__allocatorT_openstudio__model__AirLoopHVACZoneSplitter_t_t swig_types[379]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirLoopHVAC_std__allocatorT_openstudio__model__AirLoopHVAC_t_t swig_types[380]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_std__allocatorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t_t swig_types[381]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirTerminalSingleDuctUncontrolled_std__allocatorT_openstudio__model__AirTerminalSingleDuctUncontrolled_t_t swig_types[382]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AirWallMaterial_std__allocatorT_openstudio__model__AirWallMaterial_t_t swig_types[383]
#define SWIGTYPE_p_std__vectorT_openstudio__model__AvailabilityManagerScheduled_std__allocatorT_openstudio__model__AvailabilityManagerScheduled_t_t swig_types[384]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Blind_std__allocatorT_openstudio__model__Blind_t_t swig_types[385]
#define SWIGTYPE_p_std__vectorT_openstudio__model__BoilerHotWater_std__allocatorT_openstudio__model__BoilerHotWater_t_t swig_types[386]
#define SWIGTYPE_p_std__vectorT_openstudio__model__BuildingStory_std__allocatorT_openstudio__model__BuildingStory_t_t swig_types[387]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Building_std__allocatorT_openstudio__model__Building_t_t swig_types[388]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CFactorUndergroundWallConstruction_std__allocatorT_openstudio__model__CFactorUndergroundWallConstruction_t_t swig_types[389]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ChillerElectricEIR_std__allocatorT_openstudio__model__ChillerElectricEIR_t_t swig_types[390]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ClimateZone_std__allocatorT_openstudio__model__ClimateZone_t_t swig_types[391]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CoilCoolingDXSingleSpeed_std__allocatorT_openstudio__model__CoilCoolingDXSingleSpeed_t_t swig_types[392]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CoilCoolingDXTwoSpeed_std__allocatorT_openstudio__model__CoilCoolingDXTwoSpeed_t_t swig_types[393]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CoilHeatingDXSingleSpeed_std__allocatorT_openstudio__model__CoilHeatingDXSingleSpeed_t_t swig_types[394]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CoilHeatingElectric_std__allocatorT_openstudio__model__CoilHeatingElectric_t_t swig_types[395]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CoilHeatingGas_std__allocatorT_openstudio__model__CoilHeatingGas_t_t swig_types[396]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ComponentCost_LineItem_std__allocatorT_openstudio__model__ComponentCost_LineItem_t_t swig_types[397]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ComponentData_std__allocatorT_openstudio__model__ComponentData_t_t swig_types[398]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Component_std__allocatorT_openstudio__model__Component_t_t swig_types[399]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ConstructionBaseStandardsInformation_std__allocatorT_openstudio__model__ConstructionBaseStandardsInformation_t_t swig_types[400]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ConstructionBase_std__allocatorT_openstudio__model__ConstructionBase_t_t swig_types[401]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ConstructionWithInternalSource_std__allocatorT_openstudio__model__ConstructionWithInternalSource_t_t swig_types[402]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Construction_std__allocatorT_openstudio__model__Construction_t_t swig_types[403]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ControllerMechanicalVentilation_std__allocatorT_openstudio__model__ControllerMechanicalVentilation_t_t swig_types[404]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ControllerOutdoorAir_std__allocatorT_openstudio__model__ControllerOutdoorAir_t_t swig_types[405]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ControllerWaterCoil_std__allocatorT_openstudio__model__ControllerWaterCoil_t_t swig_types[406]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ConvergenceLimits_std__allocatorT_openstudio__model__ConvergenceLimits_t_t swig_types[407]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CoolingTowerSingleSpeed_std__allocatorT_openstudio__model__CoolingTowerSingleSpeed_t_t swig_types[408]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveBicubic_std__allocatorT_openstudio__model__CurveBicubic_t_t swig_types[409]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveBiquadratic_std__allocatorT_openstudio__model__CurveBiquadratic_t_t swig_types[410]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveCubic_std__allocatorT_openstudio__model__CurveCubic_t_t swig_types[411]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveDoubleExponentialDecay_std__allocatorT_openstudio__model__CurveDoubleExponentialDecay_t_t swig_types[412]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveExponent_std__allocatorT_openstudio__model__CurveExponent_t_t swig_types[413]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveExponentialDecay_std__allocatorT_openstudio__model__CurveExponentialDecay_t_t swig_types[414]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveExponentialSkewNormal_std__allocatorT_openstudio__model__CurveExponentialSkewNormal_t_t swig_types[415]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveFanPressureRise_std__allocatorT_openstudio__model__CurveFanPressureRise_t_t swig_types[416]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveFunctionalPressureDrop_std__allocatorT_openstudio__model__CurveFunctionalPressureDrop_t_t swig_types[417]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveLinear_std__allocatorT_openstudio__model__CurveLinear_t_t swig_types[418]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveQuadraticLinear_std__allocatorT_openstudio__model__CurveQuadraticLinear_t_t swig_types[419]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveQuadratic_std__allocatorT_openstudio__model__CurveQuadratic_t_t swig_types[420]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveQuartic_std__allocatorT_openstudio__model__CurveQuartic_t_t swig_types[421]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveRectangularHyperbola1_std__allocatorT_openstudio__model__CurveRectangularHyperbola1_t_t swig_types[422]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveRectangularHyperbola2_std__allocatorT_openstudio__model__CurveRectangularHyperbola2_t_t swig_types[423]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveSigmoid_std__allocatorT_openstudio__model__CurveSigmoid_t_t swig_types[424]
#define SWIGTYPE_p_std__vectorT_openstudio__model__CurveTriquadratic_std__allocatorT_openstudio__model__CurveTriquadratic_t_t swig_types[425]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Curve_std__allocatorT_openstudio__model__Curve_t_t swig_types[426]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DaylightingControl_std__allocatorT_openstudio__model__DaylightingControl_t_t swig_types[427]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DaylightingDeviceShelf_std__allocatorT_openstudio__model__DaylightingDeviceShelf_t_t swig_types[428]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DefaultConstructionSet_std__allocatorT_openstudio__model__DefaultConstructionSet_t_t swig_types[429]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DefaultScheduleSet_std__allocatorT_openstudio__model__DefaultScheduleSet_t_t swig_types[430]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DefaultSubSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSubSurfaceConstructions_t_t swig_types[431]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DefaultSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSurfaceConstructions_t_t swig_types[432]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DesignDay_std__allocatorT_openstudio__model__DesignDay_t_t swig_types[433]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DesignSpecificationOutdoorAir_std__allocatorT_openstudio__model__DesignSpecificationOutdoorAir_t_t swig_types[434]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DistrictCooling_std__allocatorT_openstudio__model__DistrictCooling_t_t swig_types[435]
#define SWIGTYPE_p_std__vectorT_openstudio__model__DistrictHeating_std__allocatorT_openstudio__model__DistrictHeating_t_t swig_types[436]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ElectricEquipmentDefinition_std__allocatorT_openstudio__model__ElectricEquipmentDefinition_t_t swig_types[437]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ElectricEquipment_std__allocatorT_openstudio__model__ElectricEquipment_t_t swig_types[438]
#define SWIGTYPE_p_std__vectorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_std__allocatorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t_t swig_types[439]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ExteriorLightsDefinition_std__allocatorT_openstudio__model__ExteriorLightsDefinition_t_t swig_types[440]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ExteriorLights_std__allocatorT_openstudio__model__ExteriorLights_t_t swig_types[441]
#define SWIGTYPE_p_std__vectorT_openstudio__model__FFactorGroundFloorConstruction_std__allocatorT_openstudio__model__FFactorGroundFloorConstruction_t_t swig_types[442]
#define SWIGTYPE_p_std__vectorT_openstudio__model__FanConstantVolume_std__allocatorT_openstudio__model__FanConstantVolume_t_t swig_types[443]
#define SWIGTYPE_p_std__vectorT_openstudio__model__FanVariableVolume_std__allocatorT_openstudio__model__FanVariableVolume_t_t swig_types[444]
#define SWIGTYPE_p_std__vectorT_openstudio__model__FenestrationMaterial_std__allocatorT_openstudio__model__FenestrationMaterial_t_t swig_types[445]
#define SWIGTYPE_p_std__vectorT_openstudio__model__FieldViewer_std__allocatorT_openstudio__model__FieldViewer_t_t swig_types[446]
#define SWIGTYPE_p_std__vectorT_openstudio__model__GasEquipmentDefinition_std__allocatorT_openstudio__model__GasEquipmentDefinition_t_t swig_types[447]
#define SWIGTYPE_p_std__vectorT_openstudio__model__GasEquipment_std__allocatorT_openstudio__model__GasEquipment_t_t swig_types[448]
#define SWIGTYPE_p_std__vectorT_openstudio__model__GasLayer_std__allocatorT_openstudio__model__GasLayer_t_t swig_types[449]
#define SWIGTYPE_p_std__vectorT_openstudio__model__GasMixture_std__allocatorT_openstudio__model__GasMixture_t_t swig_types[450]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Gas_std__allocatorT_openstudio__model__Gas_t_t swig_types[451]
#define SWIGTYPE_p_std__vectorT_openstudio__model__GenericModelObject_std__allocatorT_openstudio__model__GenericModelObject_t_t swig_types[452]
#define SWIGTYPE_p_std__vectorT_openstudio__model__GlareSensor_std__allocatorT_openstudio__model__GlareSensor_t_t swig_types[453]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Glazing_std__allocatorT_openstudio__model__Glazing_t_t swig_types[454]
#define SWIGTYPE_p_std__vectorT_openstudio__model__HeatBalanceAlgorithm_std__allocatorT_openstudio__model__HeatBalanceAlgorithm_t_t swig_types[455]
#define SWIGTYPE_p_std__vectorT_openstudio__model__HotWaterEquipmentDefinition_std__allocatorT_openstudio__model__HotWaterEquipmentDefinition_t_t swig_types[456]
#define SWIGTYPE_p_std__vectorT_openstudio__model__HotWaterEquipment_std__allocatorT_openstudio__model__HotWaterEquipment_t_t swig_types[457]
#define SWIGTYPE_p_std__vectorT_openstudio__model__IlluminanceMap_std__allocatorT_openstudio__model__IlluminanceMap_t_t swig_types[458]
#define SWIGTYPE_p_std__vectorT_openstudio__model__InfraredTransparentMaterial_std__allocatorT_openstudio__model__InfraredTransparentMaterial_t_t swig_types[459]
#define SWIGTYPE_p_std__vectorT_openstudio__model__InteriorPartitionSurfaceGroup_std__allocatorT_openstudio__model__InteriorPartitionSurfaceGroup_t_t swig_types[460]
#define SWIGTYPE_p_std__vectorT_openstudio__model__InteriorPartitionSurface_std__allocatorT_openstudio__model__InteriorPartitionSurface_t_t swig_types[461]
#define SWIGTYPE_p_std__vectorT_openstudio__model__InternalMassDefinition_std__allocatorT_openstudio__model__InternalMassDefinition_t_t swig_types[462]
#define SWIGTYPE_p_std__vectorT_openstudio__model__InternalMass_std__allocatorT_openstudio__model__InternalMass_t_t swig_types[463]
#define SWIGTYPE_p_std__vectorT_openstudio__model__LayeredConstruction_std__allocatorT_openstudio__model__LayeredConstruction_t_t swig_types[464]
#define SWIGTYPE_p_std__vectorT_openstudio__model__LifeCycleCost_Parameters_std__allocatorT_openstudio__model__LifeCycleCost_Parameters_t_t swig_types[465]
#define SWIGTYPE_p_std__vectorT_openstudio__model__LightingDesignDay_std__allocatorT_openstudio__model__LightingDesignDay_t_t swig_types[466]
#define SWIGTYPE_p_std__vectorT_openstudio__model__LightingSimulationControl_std__allocatorT_openstudio__model__LightingSimulationControl_t_t swig_types[467]
#define SWIGTYPE_p_std__vectorT_openstudio__model__LightingSimulationZone_std__allocatorT_openstudio__model__LightingSimulationZone_t_t swig_types[468]
#define SWIGTYPE_p_std__vectorT_openstudio__model__LightsDefinition_std__allocatorT_openstudio__model__LightsDefinition_t_t swig_types[469]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Lights_std__allocatorT_openstudio__model__Lights_t_t swig_types[470]
#define SWIGTYPE_p_std__vectorT_openstudio__model__LuminaireDefinition_std__allocatorT_openstudio__model__LuminaireDefinition_t_t swig_types[471]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Luminaire_std__allocatorT_openstudio__model__Luminaire_t_t swig_types[472]
#define SWIGTYPE_p_std__vectorT_openstudio__model__MasslessOpaqueMaterial_std__allocatorT_openstudio__model__MasslessOpaqueMaterial_t_t swig_types[473]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Material_std__allocatorT_openstudio__model__Material_t_t swig_types[474]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Meter_std__allocatorT_openstudio__model__Meter_t_t swig_types[475]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ModelObject_std__allocatorT_openstudio__model__ModelObject_t_t swig_types[476]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ModelPartitionMaterial_std__allocatorT_openstudio__model__ModelPartitionMaterial_t_t swig_types[477]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Model_std__allocatorT_openstudio__model__Model_t_t swig_types[478]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Node_std__allocatorT_openstudio__model__Node_t_t swig_types[479]
#define SWIGTYPE_p_std__vectorT_openstudio__model__OpaqueMaterial_std__allocatorT_openstudio__model__OpaqueMaterial_t_t swig_types[480]
#define SWIGTYPE_p_std__vectorT_openstudio__model__OtherEquipmentDefinition_std__allocatorT_openstudio__model__OtherEquipmentDefinition_t_t swig_types[481]
#define SWIGTYPE_p_std__vectorT_openstudio__model__OtherEquipment_std__allocatorT_openstudio__model__OtherEquipment_t_t swig_types[482]
#define SWIGTYPE_p_std__vectorT_openstudio__model__OutputVariable_std__allocatorT_openstudio__model__OutputVariable_t_t swig_types[483]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ParentObject_std__allocatorT_openstudio__model__ParentObject_t_t swig_types[484]
#define SWIGTYPE_p_std__vectorT_openstudio__model__PeopleDefinition_std__allocatorT_openstudio__model__PeopleDefinition_t_t swig_types[485]
#define SWIGTYPE_p_std__vectorT_openstudio__model__People_std__allocatorT_openstudio__model__People_t_t swig_types[486]
#define SWIGTYPE_p_std__vectorT_openstudio__model__PipeAdiabatic_std__allocatorT_openstudio__model__PipeAdiabatic_t_t swig_types[487]
#define SWIGTYPE_p_std__vectorT_openstudio__model__PlanarSurfaceGroup_std__allocatorT_openstudio__model__PlanarSurfaceGroup_t_t swig_types[488]
#define SWIGTYPE_p_std__vectorT_openstudio__model__PlanarSurface_std__allocatorT_openstudio__model__PlanarSurface_t_t swig_types[489]
#define SWIGTYPE_p_std__vectorT_openstudio__model__PortList_std__allocatorT_openstudio__model__PortList_t_t swig_types[490]
#define SWIGTYPE_p_std__vectorT_openstudio__model__PumpVariableSpeed_std__allocatorT_openstudio__model__PumpVariableSpeed_t_t swig_types[491]
#define SWIGTYPE_p_std__vectorT_openstudio__model__RadianceParameters_std__allocatorT_openstudio__model__RadianceParameters_t_t swig_types[492]
#define SWIGTYPE_p_std__vectorT_openstudio__model__RefractionExtinctionGlazing_std__allocatorT_openstudio__model__RefractionExtinctionGlazing_t_t swig_types[493]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Relationship_std__allocatorT_openstudio__model__Relationship_t_t swig_types[494]
#define SWIGTYPE_p_std__vectorT_openstudio__model__RenderingColor_std__allocatorT_openstudio__model__RenderingColor_t_t swig_types[495]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ResourceObject_std__allocatorT_openstudio__model__ResourceObject_t_t swig_types[496]
#define SWIGTYPE_p_std__vectorT_openstudio__model__RoofVegetation_std__allocatorT_openstudio__model__RoofVegetation_t_t swig_types[497]
#define SWIGTYPE_p_std__vectorT_openstudio__model__RunPeriodControlDaylightSavingTime_std__allocatorT_openstudio__model__RunPeriodControlDaylightSavingTime_t_t swig_types[498]
#define SWIGTYPE_p_std__vectorT_openstudio__model__RunPeriodControlSpecialDays_std__allocatorT_openstudio__model__RunPeriodControlSpecialDays_t_t swig_types[499]
#define SWIGTYPE_p_std__vectorT_openstudio__model__RunPeriod_std__allocatorT_openstudio__model__RunPeriod_t_t swig_types[500]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleBase_std__allocatorT_openstudio__model__ScheduleBase_t_t swig_types[501]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleCompact_std__allocatorT_openstudio__model__ScheduleCompact_t_t swig_types[502]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleConstant_std__allocatorT_openstudio__model__ScheduleConstant_t_t swig_types[503]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleDay_std__allocatorT_openstudio__model__ScheduleDay_t_t swig_types[504]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleFixedInterval_std__allocatorT_openstudio__model__ScheduleFixedInterval_t_t swig_types[505]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleInterval_std__allocatorT_openstudio__model__ScheduleInterval_t_t swig_types[506]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleRule_std__allocatorT_openstudio__model__ScheduleRule_t_t swig_types[507]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleRuleset_std__allocatorT_openstudio__model__ScheduleRuleset_t_t swig_types[508]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleTypeLimits_std__allocatorT_openstudio__model__ScheduleTypeLimits_t_t swig_types[509]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleType_std__allocatorT_openstudio__model__ScheduleType_t_t swig_types[510]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleVariableInterval_std__allocatorT_openstudio__model__ScheduleVariableInterval_t_t swig_types[511]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleWeek_std__allocatorT_openstudio__model__ScheduleWeek_t_t swig_types[512]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ScheduleYear_std__allocatorT_openstudio__model__ScheduleYear_t_t swig_types[513]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Schedule_std__allocatorT_openstudio__model__Schedule_t_t swig_types[514]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Screen_std__allocatorT_openstudio__model__Screen_t_t swig_types[515]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SetpointManagerMixedAir_std__allocatorT_openstudio__model__SetpointManagerMixedAir_t_t swig_types[516]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SetpointManagerSingleZoneReheat_std__allocatorT_openstudio__model__SetpointManagerSingleZoneReheat_t_t swig_types[517]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Shade_std__allocatorT_openstudio__model__Shade_t_t swig_types[518]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ShadingMaterial_std__allocatorT_openstudio__model__ShadingMaterial_t_t swig_types[519]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ShadingSurfaceGroup_std__allocatorT_openstudio__model__ShadingSurfaceGroup_t_t swig_types[520]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ShadingSurface_std__allocatorT_openstudio__model__ShadingSurface_t_t swig_types[521]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SimpleGlazing_std__allocatorT_openstudio__model__SimpleGlazing_t_t swig_types[522]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SiteGroundReflectance_std__allocatorT_openstudio__model__SiteGroundReflectance_t_t swig_types[523]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SiteGroundTemperatureBuildingSurface_std__allocatorT_openstudio__model__SiteGroundTemperatureBuildingSurface_t_t swig_types[524]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SiteWaterMainsTemperature_std__allocatorT_openstudio__model__SiteWaterMainsTemperature_t_t swig_types[525]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Site_std__allocatorT_openstudio__model__Site_t_t swig_types[526]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SizingParameters_std__allocatorT_openstudio__model__SizingParameters_t_t swig_types[527]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SizingPeriod_std__allocatorT_openstudio__model__SizingPeriod_t_t swig_types[528]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SizingPlant_std__allocatorT_openstudio__model__SizingPlant_t_t swig_types[529]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SizingSystem_std__allocatorT_openstudio__model__SizingSystem_t_t swig_types[530]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SizingZone_std__allocatorT_openstudio__model__SizingZone_t_t swig_types[531]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SkyTemperature_std__allocatorT_openstudio__model__SkyTemperature_t_t swig_types[532]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SpaceInfiltrationDesignFlowRate_std__allocatorT_openstudio__model__SpaceInfiltrationDesignFlowRate_t_t swig_types[533]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_std__allocatorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t_t swig_types[534]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SpaceItem_std__allocatorT_openstudio__model__SpaceItem_t_t swig_types[535]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SpaceLoadDefinition_std__allocatorT_openstudio__model__SpaceLoadDefinition_t_t swig_types[536]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SpaceLoadInstance_std__allocatorT_openstudio__model__SpaceLoadInstance_t_t swig_types[537]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SpaceLoad_std__allocatorT_openstudio__model__SpaceLoad_t_t swig_types[538]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SpaceType_std__allocatorT_openstudio__model__SpaceType_t_t swig_types[539]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Space_std__allocatorT_openstudio__model__Space_t_t swig_types[540]
#define SWIGTYPE_p_std__vectorT_openstudio__model__StandardGlazing_std__allocatorT_openstudio__model__StandardGlazing_t_t swig_types[541]
#define SWIGTYPE_p_std__vectorT_openstudio__model__StandardOpaqueMaterial_std__allocatorT_openstudio__model__StandardOpaqueMaterial_t_t swig_types[542]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SteamEquipmentDefinition_std__allocatorT_openstudio__model__SteamEquipmentDefinition_t_t swig_types[543]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SteamEquipment_std__allocatorT_openstudio__model__SteamEquipment_t_t swig_types[544]
#define SWIGTYPE_p_std__vectorT_openstudio__model__StraightComponent_std__allocatorT_openstudio__model__StraightComponent_t_t swig_types[545]
#define SWIGTYPE_p_std__vectorT_openstudio__model__SubSurface_std__allocatorT_openstudio__model__SubSurface_t_t swig_types[546]
#define SWIGTYPE_p_std__vectorT_openstudio__model__Surface_std__allocatorT_openstudio__model__Surface_t_t swig_types[547]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ThermalZone_std__allocatorT_openstudio__model__ThermalZone_t_t swig_types[548]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ThermochromicGlazing_std__allocatorT_openstudio__model__ThermochromicGlazing_t_t swig_types[549]
#define SWIGTYPE_p_std__vectorT_openstudio__model__WaterHeaterMixed_std__allocatorT_openstudio__model__WaterHeaterMixed_t_t swig_types[550]
#define SWIGTYPE_p_std__vectorT_openstudio__model__WaterUseConnections_std__allocatorT_openstudio__model__WaterUseConnections_t_t swig_types[551]
#define SWIGTYPE_p_std__vectorT_openstudio__model__WaterUseEquipmentDefinition_std__allocatorT_openstudio__model__WaterUseEquipmentDefinition_t_t swig_types[552]
#define SWIGTYPE_p_std__vectorT_openstudio__model__WaterUseEquipment_std__allocatorT_openstudio__model__WaterUseEquipment_t_t swig_types[553]
#define SWIGTYPE_p_std__vectorT_openstudio__model__WeatherFileConditionType_std__allocatorT_openstudio__model__WeatherFileConditionType_t_t swig_types[554]
#define SWIGTYPE_p_std__vectorT_openstudio__model__WeatherFileDays_std__allocatorT_openstudio__model__WeatherFileDays_t_t swig_types[555]
#define SWIGTYPE_p_std__vectorT_openstudio__model__WeatherFile_std__allocatorT_openstudio__model__WeatherFile_t_t swig_types[556]
#define SWIGTYPE_p_std__vectorT_openstudio__model__WindowDataFile_std__allocatorT_openstudio__model__WindowDataFile_t_t swig_types[557]
#define SWIGTYPE_p_std__vectorT_openstudio__model__YearDescription_std__allocatorT_openstudio__model__YearDescription_t_t swig_types[558]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ZoneAirContaminantBalance_std__allocatorT_openstudio__model__ZoneAirContaminantBalance_t_t swig_types[559]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_std__allocatorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t_t swig_types[560]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_std__allocatorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t_t swig_types[561]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ZoneHVACEquipmentList_std__allocatorT_openstudio__model__ZoneHVACEquipmentList_t_t swig_types[562]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ZoneHVACFourPipeFanCoil_std__allocatorT_openstudio__model__ZoneHVACFourPipeFanCoil_t_t swig_types[563]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_std__allocatorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t_t swig_types[564]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t_t swig_types[565]
#define SWIGTYPE_p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t_t swig_types[566]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[567]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[568]
#define SWIGTYPE_p_std__wstring swig_types[569]
#define SWIGTYPE_p_swig__ConstIterator swig_types[570]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[571]
#define SWIGTYPE_p_swig__Iterator swig_types[572]
#define SWIGTYPE_p_value_type swig_types[573]
#define SWIGTYPE_p_void swig_types[574]
#define SWIGTYPE_p_wchar_t swig_types[575]
static swig_type_info *swig_types[577];
static swig_module_info swig_module = {swig_types, 576, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_openstudioisomodel
#define SWIG_name    "OpenStudio::ISOModel"

static VALUE mISOModel;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020007 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <stdexcept>


namespace swig {
  class GC_VALUE {
  protected:
    // Hash of all GC_VALUE's currently in use
    static VALUE _hash;

    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    static void initialize()
    {
      if ( _hash == Qnil ) 
	{ 
	  _hash = rb_hash_new();
	  rb_gc_register_address( &_hash );
	}
    }

    // this function is never called.  Provided for symmetry only.
    static void cleanup()
    {
      rb_gc_unregister_address( &_hash );
    }

    GC_VALUE() : _obj( Qnil )
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      GC_register();
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      GC_register();
    }
    
    ~GC_VALUE() 
    {
      GC_unregister();
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      GC_unregister();
      _obj = item._obj;
      GC_register();
      return *this;
    }

    void GC_register()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
      ++n;
      rb_hash_aset( _hash, _obj, INT2NUM(n) );
    }

    void GC_unregister()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if ( BUILTIN_TYPE(_obj) == T_NONE ) return;

      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
      --n;
      if ( n )
	rb_hash_aset( _hash, _obj, INT2NUM(n) );
      else
	rb_hash_delete( _hash, _obj );
    }
    
    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_protect_funcall( VALUE p )
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall( args->src, args->id, args->nargs, args->target );
    }


#define GC_VALUE_CMP( op_id, op, cmp, cmpval ) \
    bool op( const GC_VALUE& other ) const \
    { \
      if ( FIXNUM_P(_obj) && FIXNUM_P(other._obj) ) \
      { \
	return _obj cmp other._obj; \
      } \
      bool  res = false; \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      if ( rb_respond_to( _obj, op_id ) == Qtrue ) \
	{ \
	  int status; \
	  OpArgs  args; \
          args.src    = _obj; \
	  args.id     = op_id; \
	  args.nargs  = 1; \
	  args.target = VALUE(other); \
	  ret = rb_protect( PROTECTFUNC(swig_protect_funcall), \
                            VALUE(&args), &status ); \
	} \
      if ( ret == Qnil ) { \
	VALUE a = rb_funcall(         _obj, hash_id, 0 ); \
	VALUE b = rb_funcall( VALUE(other), hash_id, 0 ); \
	res = a cmp b; \
      } \
      else \
	{ \
	  res = RTEST( ret ); \
	} \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return res; \
    }


    GC_VALUE_CMP( eq_id, operator==, ==, == 0 )
    GC_VALUE_CMP( lt_id, operator<,  < , <  0 )
    GC_VALUE_CMP( le_id, operator<=, <=, <= 0 )
    GC_VALUE_CMP( gt_id, operator>,  > , >  0 )
    GC_VALUE_CMP( ge_id, operator>=, >=, >= 0 )
#undef GC_VALUE_CMP

    bool operator!=( const GC_VALUE& other )
    {
      return !(this->operator==(other));
    }

#define GC_VALUE_UNARY( proc_id, op ) \
    GC_VALUE op() const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 0; \
      args.target = Qnil; \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return ret; \
    }

    GC_VALUE_UNARY( pos_id, operator+ )
    GC_VALUE_UNARY( neg_id, operator- )
    GC_VALUE_UNARY( inv_id, operator~ )
#undef GC_VALUE_BINARY

#define GC_VALUE_BINARY( proc_id, op ) \
    GC_VALUE op( const GC_VALUE& other ) const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 1; \
      args.target = VALUE(other); \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return GC_VALUE(ret); \
    }

    GC_VALUE_BINARY( add_id, operator+ );
    GC_VALUE_BINARY( sub_id, operator- );
    GC_VALUE_BINARY( mul_id, operator* );
    GC_VALUE_BINARY( div_id, operator/ );
    GC_VALUE_BINARY( mod_id, operator% );
    
    GC_VALUE_BINARY( and_id, operator& );
    GC_VALUE_BINARY( xor_id, operator^ );
    GC_VALUE_BINARY(  or_id, operator| );

    GC_VALUE_BINARY( lshift_id, operator<< );
    GC_VALUE_BINARY( rshift_id, operator>> );
#undef GC_VALUE_BINARY

  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  VALUE GC_VALUE::_hash = Qnil;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


#include <string>


#include <iostream>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:C:\Workspaces\OpenStudio\OpenStudio\build\SWIG-prefix\src\SWIG\Lib\ruby\rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:C:\Workspaces\OpenStudio\OpenStudio\build\SWIG-prefix\src\SWIG\Lib\ruby\rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <set>



// The ruby SWIG wrappers have lots of unused variables which makes GCC rather chatty.
// This cleans it up.
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wunused-variable"
#endif



  #ifdef accept
  #undef accept
  #endif
  #ifdef close
  #undef close
  #endif
  #ifdef times
  #undef times
  #endif
  #ifdef Sleep
  #undef Sleep
  #endif
  #ifdef sleep
  #undef sleep
  #endif
  #ifdef bind
  #undef bind
  #endif
  #ifdef rename
  #undef rename
  #endif
  #ifdef connect
  #undef connect
  #endif
  #ifdef shutdown
  #undef shutdown
  #endif
  #ifdef mkdir
  #undef mkdir
  #endif
  #ifdef select
  #undef select
  #endif
  #ifdef ALLOC
  #undef ALLOC
  #endif
  #ifdef _
  #undef _
  #endif
  #ifdef StringValue
  #undef StringValue
  #endif


  #include <boost/smart_ptr.hpp>


  #include <boost/optional.hpp>
  #include <utilities/core/Enum.hpp>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	static Type *v_def = (Type*) malloc(sizeof(Type));
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	return 0;
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj, bool te = false) {
    return traits_as< Type, typename traits< Type >::category >::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>


namespace swig {
  template < class T >
  struct yield : public std::unary_function< T, bool >
  {
    bool
    operator()( const T& v ) const
    { 
      return RTEST( rb_yield( swig::from< T >(v) ) );
    }
  };


  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {

  /** 
   * Templated base classes for all custom const_iterators.
   *
   */
  template<typename OutConstIterator>
  class ConstIterator_T :  public ConstIterator
  {
  public:
    typedef OutConstIterator const_iter;
    typedef typename std::iterator_traits<const_iter>::value_type value_type;    
    typedef ConstIterator_T<const_iter> self_type;

  protected:

    
    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:
    ConstIterator_T() : ConstIterator(Qnil)
    {
    }

    ConstIterator_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator(seq), current(curr)
    {
    }

    const const_iter& get_current() const
    {
      return current;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    const_iter current;
  };


  /** 
   * Templated base classes for all custom non-const iterators.
   *
   */
  template<typename InOutIterator>
  class Iterator_T :  public Iterator
  {
  public:
    typedef InOutIterator nonconst_iter;

    // Make this class iterator STL compatible, by using iterator_traits
    typedef typename std::iterator_traits<nonconst_iter >::iterator_category iterator_category;
    typedef typename std::iterator_traits<nonconst_iter >::value_type        value_type;
    typedef typename std::iterator_traits<nonconst_iter >::difference_type   difference_type;
    typedef typename std::iterator_traits<nonconst_iter >::pointer           pointer;
    typedef typename std::iterator_traits<nonconst_iter >::reference         reference;

    typedef Iterator                         base;
    typedef Iterator_T< nonconst_iter > self_type;

  protected:

    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:

    Iterator_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator(seq), current(curr)
    {
    }

    const nonconst_iter& get_current() const
    {
      return current;
    }

    self_type& operator=( const self_type& b )
    {
      base::operator=( b );
      return *this;
    }
    
    self_type& operator=( const value_type& b )
    {
      *current = b;
      return *this;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    value_type& operator*()
    {
      return *current;
    }
    
    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    nonconst_iter current;
  };


  /**
   * Auxiliary functor to store the value of a ruby object inside
   * a reference of a compatible C++ type.  ie: Ruby -> C++
   * 
   */
  template <class ValueType>
  struct asval_oper 
  {
    typedef ValueType    value_type;
    typedef bool        result_type;
    bool operator()(VALUE obj, value_type& v) const
    {
      return ( swig::asval< value_type >(obj, &v) == SWIG_OK );
    }
  };

  /**
   * Auxiliary functor to return a ruby object from a C++ type. 
   * ie: C++ -> Ruby
   * 
   */
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef VALUE result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };


  /** 
   * ConstIterator class for a const_iterator with no end() boundaries.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorOpen_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;
    typedef ConstIteratorOpen_T<OutConstIterator, ValueType, FromOper> self_type;
    
    ConstIteratorOpen_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * Iterator class for an iterator with no end() boundaries.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorOpen_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper  from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;

  public:
    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }

    virtual VALUE setValue( const VALUE& v )
    {
      value_type& dst = *base::current;
      if ( asval(v, dst) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * ConstIterator class for a const_iterator where begin() and end() boundaries are known.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorClosed_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;    
    typedef ConstIteratorClosed_T<OutConstIterator, ValueType, FromOper> self_type;
    
  protected:
    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    ConstIteratorClosed_T(const_iter curr, const_iter first, 
			  const_iter last, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }


  private:
    const_iter begin;
    const_iter end;
  };

  /** 
   * Iterator class for a iterator where begin() and end() boundaries are known.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorClosed_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    // Iterator setter method, required by Ruby
    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      value_type& dst = *base::current;
      if ( asval( v, dst ) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorOpen_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, bool, FromOper, AsvalOper> self_type;

    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }

    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    virtual VALUE setValue( const VALUE& v )
    {
      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }    
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
    
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorClosed_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, bool, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }

    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }

    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };


  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, const InOutIter& begin,
			 const InOutIter& end, VALUE seq = Qnil)
  {
    return new IteratorClosed_T<InOutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, VALUE seq = Qnil)
  {
    return new IteratorOpen_T<InOutIter>(current, seq);
  }

  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, const OutIter& begin,
                       const OutIter& end, VALUE seq = Qnil)
  {
    return new ConstIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, VALUE seq = Qnil)
  {
    return new ConstIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{

  /**
   * This class is a proxy class for references, used to return and set values
   * of an element of a Ruby Array of stuff.
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_Ref
  {
    RubySequence_Ref(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      VALUE item = rb_ary_entry(_seq, _index );
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	VALUE lastErr = rb_gv_get("$!");
	if ( lastErr == Qnil ) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	VALUE str = rb_str_new2(msg);
	str = rb_str_cat2( str, e.what() );
	SWIG_Ruby_ExceptionType( NULL, str );
	throw;
      }
    }

    RubySequence_Ref& operator=(const T& v)
    {
      rb_ary_set(_seq, _index, swig::from< T >(v));
      return *this;
    }

  private:
    VALUE  _seq;
    int _index;
  };


  /**
   * This class is a proxy to return a pointer to a class, usually
   * RubySequence_Ref. 
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_ArrowProxy
  {
    RubySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };


  /**
   * Input Iterator.  This adapator class is a random access iterator that 
   * allows you to use STL algorithms with a Ruby class (a Ruby Array by default).
   * 
   */
  template <class T, class Reference = RubySequence_Ref< T > >
  struct RubySequence_InputIterator
  {
    typedef RubySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef ptrdiff_t difference_type;

    RubySequence_InputIterator()
    {
    }

    RubySequence_InputIterator(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    RubySequence_ArrowProxy<T>
    operator->() const {
      return RubySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    VALUE  _seq;
    difference_type _index;
  };


  /**
   * This adaptor class allows you to use a Ruby Array as if it was an STL
   * container, giving it begin(), end(), and iterators.
   * 
   */
  template <class T>
  struct RubySequence_Cont
  {
    typedef RubySequence_Ref<T> reference;
    typedef const RubySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef RubySequence_InputIterator<T, reference> iterator;
    typedef RubySequence_InputIterator<T, const_reference> const_iterator;

    RubySequence_Cont(VALUE  seq) : _seq(0)
    {
      if (!rb_obj_is_kind_of(seq, rb_cArray)) {
	throw std::invalid_argument("an Array is expected");
      }
      _seq = seq;
    }

    ~RubySequence_Cont()
    {
    }

    size_type size() const
    {
      return RARRAY_LEN(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = false) const
    {
      int s = (int) size();
      for (int i = 0; i < s; ++i) {
	VALUE item = rb_ary_entry(_seq, i );
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    VALUE  _seq;
  };

}


  #include <isomodel/ForwardTranslator.hpp>
  #include <isomodel/UserModel.hpp>
  #include <isomodel/SimModel.hpp>
  
  using namespace openstudio::isomodel;
  using namespace openstudio;
  
  #include <model/Model.hpp>
  #include <utilities/data/EndUses.hpp>


  #define SWIG_From_double   rb_float_new 


/*@SWIG:C:\Workspaces\OpenStudio\OpenStudio\build\SWIG-prefix\src\SWIG\Lib\ruby\rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  namespace swig {
    template <>  struct traits<openstudio::LogMessage > {
      typedef pointer_category category;
      static const char* type_name() { return"openstudio::LogMessage"; }
    };
  }


namespace swig {
  template <class RubySeq, class Seq>
  inline void
  assign(const RubySeq& rubyseq, Seq* seq) {
    // seq->assign(rubyseq.begin(), rubyseq.end()); // not used as not always implemented
    typedef typename RubySeq::value_type value_type;
    typename RubySeq::const_iterator it = rubyseq.begin();
    for (;it != rubyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  RubySequence_Cont<value_type> rubyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return rubyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  // Partial specialization for GC_VALUE's.  No need to typecheck each
  // element.
  template< class Seq >
  struct traits_asptr_stdseq< Seq, swig::GC_VALUE > {
    typedef Seq sequence;
    typedef swig::GC_VALUE value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  if (seq) {
	    RubySequence_Cont<value_type> rubyseq(obj);
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return true;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static VALUE from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	VALUE obj = rb_ary_new2((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  rb_ary_push(obj, swig::from< value_type >(*it));
	}
	rb_obj_freeze(obj);  // treat as immutable result
	return obj;
      } else {
	rb_raise(rb_eRangeError,"sequence size not valid in ruby");
	return Qnil;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(VALUE obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static VALUE from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<openstudio::LogMessage, std::allocator< openstudio::LogMessage > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "openstudio::LogMessage" "," "std::allocator< openstudio::LogMessage >" " >";
	  }
	};
      }
    

/*
  Document-class: OpenStudio::ISOModel::GC_VALUE

  Proxy of C++ OpenStudio::ISOModel::GC_VALUE class


*/
static swig_class SwigClassGC_VALUE;


/*
  Document-method: OpenStudio::ISOModel::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: OpenStudio::ISOModel::ConstIterator

  Proxy of C++ OpenStudio::ISOModel::ConstIterator class


*/
static swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}


/*
  Document-method: OpenStudio::ISOModel::ConstIterator.value

  call-seq:
    value -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ConstIterator.next

  call-seq:
    next(size_t n=1) -> ConstIterator
    next -> ConstIterator

An instance method.

*/
SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ConstIterator.previous

  call-seq:
    previous(size_t n=1) -> ConstIterator
    previous -> ConstIterator

An instance method.

*/
SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}



/*
  Document-class: OpenStudio::ISOModel::Iterator < OpenStudio::ISOModel::swig::ConstIterator

  Proxy of C++ OpenStudio::ISOModel::Iterator class


*/
static swig_class SwigClassIterator;


/*
  Document-method: OpenStudio::ISOModel::Iterator.value=

  call-seq:
    value=(VALUE const & v) -> VALUE

An instance method.

*/
SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::Iterator.next

  call-seq:
    next(size_t n=1) -> Iterator
    next -> Iterator

An instance method.

*/
SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::Iterator.previous

  call-seq:
    previous(size_t n=1) -> Iterator
    previous -> Iterator

An instance method.

*/
SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}


/*
  Document-class: OpenStudio::ISOModel::SimModel

  Proxy of C++ OpenStudio::ISOModel::SimModel class


*/
static swig_class SwigClassSimModel;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_SimModel_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_SimModel_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_openstudio__isomodel__SimModel);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: OpenStudio::ISOModel::SimModel.new

  call-seq:
    SimModel.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_SimModel(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::SimModel *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (openstudio::isomodel::SimModel *)new openstudio::isomodel::SimModel();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_openstudio_isomodel_SimModel(openstudio::isomodel::SimModel *arg1) {
    delete arg1;
}


/*
  Document-method: OpenStudio::ISOModel::SimModel.simulate

  call-seq:
    simulate -> EndUses

An instance method.

*/
SWIGINTERN VALUE
_wrap_SimModel_simulate(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::SimModel *arg1 = (openstudio::isomodel::SimModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  openstudio::EndUses result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__SimModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::SimModel const *","simulate", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::SimModel * >(argp1);
  {
    try {
      result = ((openstudio::isomodel::SimModel const *)arg1)->simulate();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new openstudio::EndUses(static_cast< const openstudio::EndUses& >(result))), SWIGTYPE_p_openstudio__EndUses, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: OpenStudio::ISOModel::UserModel

  Proxy of C++ OpenStudio::ISOModel::UserModel class


*/
static swig_class SwigClassUserModel;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_UserModel_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_UserModel_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_openstudio__isomodel__UserModel);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: OpenStudio::ISOModel::UserModel.new

  call-seq:
    UserModel.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_UserModel(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (openstudio::isomodel::UserModel *)new openstudio::isomodel::UserModel();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_openstudio_isomodel_UserModel(openstudio::isomodel::UserModel *arg1) {
    delete arg1;
}


/*
  Document-method: OpenStudio::ISOModel::UserModel.toSimModel

  call-seq:
    toSimModel -> SimModel

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_toSimModel(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  openstudio::isomodel::SimModel result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel const *","toSimModel", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = ((openstudio::isomodel::UserModel const *)arg1)->toSimModel();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new openstudio::isomodel::SimModel(static_cast< const openstudio::isomodel::SimModel& >(result))), SWIGTYPE_p_openstudio__isomodel__SimModel, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.terrainClass

  call-seq:
    terrainClass -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_terrainClass(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","terrainClass", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->terrainClass();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.stories

  call-seq:
    stories -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_stories(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","stories", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->stories();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.floorArea

  call-seq:
    floorArea -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_floorArea(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","floorArea", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->floorArea();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.floorToFloorHeight

  call-seq:
    floorToFloorHeight -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_floorToFloorHeight(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","floorToFloorHeight", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->floorToFloorHeight();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.buildingOccupancyFrom

  call-seq:
    buildingOccupancyFrom -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_buildingOccupancyFrom(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","buildingOccupancyFrom", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->buildingOccupancyFrom();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.buildingOccupancyTo

  call-seq:
    buildingOccupancyTo -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_buildingOccupancyTo(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","buildingOccupancyTo", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->buildingOccupancyTo();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.equivFullLoadOccupancyFrom

  call-seq:
    equivFullLoadOccupancyFrom -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_equivFullLoadOccupancyFrom(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","equivFullLoadOccupancyFrom", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->equivFullLoadOccupancyFrom();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.qeuivFullLoadOccupancyTo

  call-seq:
    qeuivFullLoadOccupancyTo -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_qeuivFullLoadOccupancyTo(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","qeuivFullLoadOccupancyTo", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->qeuivFullLoadOccupancyTo();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.peopleDensityOccupied

  call-seq:
    peopleDensityOccupied -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_peopleDensityOccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","peopleDensityOccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->peopleDensityOccupied();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.peopleDensityUnoccupied

  call-seq:
    peopleDensityUnoccupied -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_peopleDensityUnoccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","peopleDensityUnoccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->peopleDensityUnoccupied();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.heatingOccupiedSetpoint

  call-seq:
    heatingOccupiedSetpoint -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_heatingOccupiedSetpoint(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","heatingOccupiedSetpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->heatingOccupiedSetpoint();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.heatingUnoccupiedSetpoint

  call-seq:
    heatingUnoccupiedSetpoint -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_heatingUnoccupiedSetpoint(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","heatingUnoccupiedSetpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->heatingUnoccupiedSetpoint();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.coolingOccupiedSetpoint

  call-seq:
    coolingOccupiedSetpoint -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_coolingOccupiedSetpoint(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","coolingOccupiedSetpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->coolingOccupiedSetpoint();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.coolingUnoccupiedSetpoint

  call-seq:
    coolingUnoccupiedSetpoint -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_coolingUnoccupiedSetpoint(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","coolingUnoccupiedSetpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->coolingUnoccupiedSetpoint();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.elecPowerAppliancesOccupied

  call-seq:
    elecPowerAppliancesOccupied -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_elecPowerAppliancesOccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","elecPowerAppliancesOccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->elecPowerAppliancesOccupied();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.elecPowerAppliancesUnoccupied

  call-seq:
    elecPowerAppliancesUnoccupied -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_elecPowerAppliancesUnoccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","elecPowerAppliancesUnoccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->elecPowerAppliancesUnoccupied();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.gasPowerAppliancedOccupied

  call-seq:
    gasPowerAppliancedOccupied -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_gasPowerAppliancedOccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","gasPowerAppliancedOccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->gasPowerAppliancedOccupied();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.gasPowerAppliancedUnoccupied

  call-seq:
    gasPowerAppliancedUnoccupied -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_gasPowerAppliancedUnoccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","gasPowerAppliancedUnoccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->gasPowerAppliancedUnoccupied();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.lightingpowerIntensityOccupied

  call-seq:
    lightingpowerIntensityOccupied -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_lightingpowerIntensityOccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","lightingpowerIntensityOccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->lightingpowerIntensityOccupied();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.lightingpowerIntensityUnoccupied

  call-seq:
    lightingpowerIntensityUnoccupied -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_lightingpowerIntensityUnoccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","lightingpowerIntensityUnoccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->lightingpowerIntensityUnoccupied();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.exteriorLightingPower

  call-seq:
    exteriorLightingPower -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_exteriorLightingPower(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","exteriorLightingPower", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->exteriorLightingPower();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.daylightSensorSystem

  call-seq:
    daylightSensorSystem -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_daylightSensorSystem(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","daylightSensorSystem", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->daylightSensorSystem();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.lightingOccupancySensorSystem

  call-seq:
    lightingOccupancySensorSystem -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_lightingOccupancySensorSystem(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","lightingOccupancySensorSystem", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->lightingOccupancySensorSystem();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.constantIlluminationControl

  call-seq:
    constantIlluminationControl -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_constantIlluminationControl(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","constantIlluminationControl", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->constantIlluminationControl();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.coolingSystemCOP

  call-seq:
    coolingSystemCOP -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_coolingSystemCOP(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","coolingSystemCOP", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->coolingSystemCOP();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.coolingSystemIPLV

  call-seq:
    coolingSystemIPLV -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_coolingSystemIPLV(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","coolingSystemIPLV", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->coolingSystemIPLV();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.heatingEnergyCarrier

  call-seq:
    heatingEnergyCarrier -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_heatingEnergyCarrier(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","heatingEnergyCarrier", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->heatingEnergyCarrier();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.heatingSystemEfficiency

  call-seq:
    heatingSystemEfficiency -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_heatingSystemEfficiency(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","heatingSystemEfficiency", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->heatingSystemEfficiency();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.ventilationType

  call-seq:
    ventilationType -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_ventilationType(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","ventilationType", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->ventilationType();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.freshAirFlowRate

  call-seq:
    freshAirFlowRate -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_freshAirFlowRate(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","freshAirFlowRate", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->freshAirFlowRate();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.supplyExhaustRate

  call-seq:
    supplyExhaustRate -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_supplyExhaustRate(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","supplyExhaustRate", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->supplyExhaustRate();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.heatRecovery

  call-seq:
    heatRecovery -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_heatRecovery(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","heatRecovery", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->heatRecovery();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.exhaustAirRecirculation

  call-seq:
    exhaustAirRecirculation -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_exhaustAirRecirculation(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","exhaustAirRecirculation", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->exhaustAirRecirculation();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.buildingAirLeakage

  call-seq:
    buildingAirLeakage -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_buildingAirLeakage(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","buildingAirLeakage", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->buildingAirLeakage();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.dhwDemand

  call-seq:
    dhwDemand -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_dhwDemand(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","dhwDemand", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->dhwDemand();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.dhwEfficiency

  call-seq:
    dhwEfficiency -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_dhwEfficiency(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","dhwEfficiency", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->dhwEfficiency();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.dhwDistributionSystem

  call-seq:
    dhwDistributionSystem -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_dhwDistributionSystem(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","dhwDistributionSystem", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->dhwDistributionSystem();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.dhwEnergyCarrier

  call-seq:
    dhwEnergyCarrier -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_dhwEnergyCarrier(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","dhwEnergyCarrier", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->dhwEnergyCarrier();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.bemType

  call-seq:
    bemType -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_bemType(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","bemType", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->bemType();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.interiorHeatCapacity

  call-seq:
    interiorHeatCapacity -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_interiorHeatCapacity(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","interiorHeatCapacity", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->interiorHeatCapacity();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.specificFanPower

  call-seq:
    specificFanPower -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_specificFanPower(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","specificFanPower", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->specificFanPower();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.fanFlowControlFactor

  call-seq:
    fanFlowControlFactor -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_fanFlowControlFactor(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","fanFlowControlFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->fanFlowControlFactor();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowUValue

  call-seq:
    windowUValue -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowUValue(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowUValue", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowUValue();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowSolarAbsorbtion

  call-seq:
    windowSolarAbsorbtion -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowSolarAbsorbtion(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowSolarAbsorbtion", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowSolarAbsorbtion();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowThermalEmissivity

  call-seq:
    windowThermalEmissivity -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowThermalEmissivity(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowThermalEmissivity", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowThermalEmissivity();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowSHGC

  call-seq:
    windowSHGC -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowSHGC(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowSHGC", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowSHGC();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowSCF

  call-seq:
    windowSCF -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowSCF(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowSCF", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowSCF();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowSD

  call-seq:
    windowSD -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowSD(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowSD", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowSD();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallUValue

  call-seq:
    wallUValue -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallUValue(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallUValue", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallUValue();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallSolarAbsorbtion

  call-seq:
    wallSolarAbsorbtion -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallSolarAbsorbtion(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallSolarAbsorbtion", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallSolarAbsorbtion();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallThermalEmissivity

  call-seq:
    wallThermalEmissivity -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallThermalEmissivity(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallThermalEmissivity", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallThermalEmissivity();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.roofUValue

  call-seq:
    roofUValue -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_roofUValue(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","roofUValue", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->roofUValue();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.roofSHGC

  call-seq:
    roofSHGC -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_roofSHGC(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","roofSHGC", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->roofSHGC();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallAreaS

  call-seq:
    wallAreaS -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallAreaS(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallAreaS", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallAreaS();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallAreaSE

  call-seq:
    wallAreaSE -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallAreaSE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallAreaSE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallAreaSE();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallAreaE

  call-seq:
    wallAreaE -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallAreaE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallAreaE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallAreaE();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallAreaNE

  call-seq:
    wallAreaNE -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallAreaNE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallAreaNE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallAreaNE();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallAreaN

  call-seq:
    wallAreaN -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallAreaN(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallAreaN", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallAreaN();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallAreaNW

  call-seq:
    wallAreaNW -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallAreaNW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallAreaNW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallAreaNW();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallAreaW

  call-seq:
    wallAreaW -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallAreaW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallAreaW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallAreaW();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.wallAreaSW

  call-seq:
    wallAreaSW -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_wallAreaSW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","wallAreaSW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->wallAreaSW();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.roofArea

  call-seq:
    roofArea -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_roofArea(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","roofArea", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->roofArea();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowAreaS

  call-seq:
    windowAreaS -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowAreaS(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowAreaS", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowAreaS();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowAreaSE

  call-seq:
    windowAreaSE -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowAreaSE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowAreaSE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowAreaSE();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowAreaE

  call-seq:
    windowAreaE -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowAreaE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowAreaE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowAreaE();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowAreaNE

  call-seq:
    windowAreaNE -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowAreaNE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowAreaNE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowAreaNE();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowAreaN

  call-seq:
    windowAreaN -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowAreaN(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowAreaN", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowAreaN();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowAreaNW

  call-seq:
    windowAreaNW -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowAreaNW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowAreaNW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowAreaNW();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowAreaW

  call-seq:
    windowAreaW -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowAreaW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowAreaW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowAreaW();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.windowAreaSW

  call-seq:
    windowAreaSW -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_windowAreaSW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","windowAreaSW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->windowAreaSW();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.skylightArea

  call-seq:
    skylightArea -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_skylightArea(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","skylightArea", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->skylightArea();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.exteriorHeatCapacity

  call-seq:
    exteriorHeatCapacity -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_exteriorHeatCapacity(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","exteriorHeatCapacity", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->exteriorHeatCapacity();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.infiltration

  call-seq:
    infiltration -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_infiltration(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","infiltration", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->infiltration();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.hvacWasteFactor

  call-seq:
    hvacWasteFactor -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_hvacWasteFactor(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","hvacWasteFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->hvacWasteFactor();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.hvacHeatingLossFactor

  call-seq:
    hvacHeatingLossFactor -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_hvacHeatingLossFactor(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","hvacHeatingLossFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->hvacHeatingLossFactor();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.hvacCoolingLossFactor

  call-seq:
    hvacCoolingLossFactor -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_hvacCoolingLossFactor(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","hvacCoolingLossFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->hvacCoolingLossFactor();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.dhwDistributionEfficiency

  call-seq:
    dhwDistributionEfficiency -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_dhwDistributionEfficiency(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","dhwDistributionEfficiency", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->dhwDistributionEfficiency();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.heatingPumpControl

  call-seq:
    heatingPumpControl -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_heatingPumpControl(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","heatingPumpControl", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->heatingPumpControl();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.coolingPumpControl

  call-seq:
    coolingPumpControl -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_coolingPumpControl(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","coolingPumpControl", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->coolingPumpControl();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.heatGainPerPerson

  call-seq:
    heatGainPerPerson -> double

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_heatGainPerPerson(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","heatGainPerPerson", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  {
    try {
      result = (double)(arg1)->heatGainPerPerson();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setTerrainClass

  call-seq:
    setTerrainClass(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setTerrainClass(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setTerrainClass", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setTerrainClass", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setTerrainClass(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setStories

  call-seq:
    setStories(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setStories(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setStories", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setStories", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setStories(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setFloorArea

  call-seq:
    setFloorArea(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setFloorArea(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setFloorArea", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setFloorArea", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFloorArea(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setFloorToFloorHeight

  call-seq:
    setFloorToFloorHeight(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setFloorToFloorHeight(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setFloorToFloorHeight", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setFloorToFloorHeight", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFloorToFloorHeight(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setBuildingOccupancyFrom

  call-seq:
    setBuildingOccupancyFrom(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setBuildingOccupancyFrom(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setBuildingOccupancyFrom", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setBuildingOccupancyFrom", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setBuildingOccupancyFrom(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setBuildingOccupancyTo

  call-seq:
    setBuildingOccupancyTo(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setBuildingOccupancyTo(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setBuildingOccupancyTo", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setBuildingOccupancyTo", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setBuildingOccupancyTo(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setEquivFullLoadOccupancyFrom

  call-seq:
    setEquivFullLoadOccupancyFrom(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setEquivFullLoadOccupancyFrom(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setEquivFullLoadOccupancyFrom", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setEquivFullLoadOccupancyFrom", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setEquivFullLoadOccupancyFrom(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setQeuivFullLoadOccupancyTo

  call-seq:
    setQeuivFullLoadOccupancyTo(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setQeuivFullLoadOccupancyTo(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setQeuivFullLoadOccupancyTo", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setQeuivFullLoadOccupancyTo", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setQeuivFullLoadOccupancyTo(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setPeopleDensityOccupied

  call-seq:
    setPeopleDensityOccupied(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setPeopleDensityOccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setPeopleDensityOccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setPeopleDensityOccupied", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setPeopleDensityOccupied(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setPeopleDensityUnoccupied

  call-seq:
    setPeopleDensityUnoccupied(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setPeopleDensityUnoccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setPeopleDensityUnoccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setPeopleDensityUnoccupied", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setPeopleDensityUnoccupied(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHeatingOccupiedSetpoint

  call-seq:
    setHeatingOccupiedSetpoint(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHeatingOccupiedSetpoint(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHeatingOccupiedSetpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHeatingOccupiedSetpoint", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHeatingOccupiedSetpoint(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHeatingUnoccupiedSetpoint

  call-seq:
    setHeatingUnoccupiedSetpoint(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHeatingUnoccupiedSetpoint(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHeatingUnoccupiedSetpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHeatingUnoccupiedSetpoint", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHeatingUnoccupiedSetpoint(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setCoolingOccupiedSetpoint

  call-seq:
    setCoolingOccupiedSetpoint(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setCoolingOccupiedSetpoint(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setCoolingOccupiedSetpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setCoolingOccupiedSetpoint", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCoolingOccupiedSetpoint(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setCoolingUnoccupiedSetpoint

  call-seq:
    setCoolingUnoccupiedSetpoint(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setCoolingUnoccupiedSetpoint(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setCoolingUnoccupiedSetpoint", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setCoolingUnoccupiedSetpoint", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCoolingUnoccupiedSetpoint(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setElecPowerAppliancesOccupied

  call-seq:
    setElecPowerAppliancesOccupied(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setElecPowerAppliancesOccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setElecPowerAppliancesOccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setElecPowerAppliancesOccupied", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setElecPowerAppliancesOccupied(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setElecPowerAppliancesUnoccupied

  call-seq:
    setElecPowerAppliancesUnoccupied(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setElecPowerAppliancesUnoccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setElecPowerAppliancesUnoccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setElecPowerAppliancesUnoccupied", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setElecPowerAppliancesUnoccupied(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setGasPowerAppliancedOccupied

  call-seq:
    setGasPowerAppliancedOccupied(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setGasPowerAppliancedOccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setGasPowerAppliancedOccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setGasPowerAppliancedOccupied", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setGasPowerAppliancedOccupied(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setGasPowerAppliancedUnoccupied

  call-seq:
    setGasPowerAppliancedUnoccupied(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setGasPowerAppliancedUnoccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setGasPowerAppliancedUnoccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setGasPowerAppliancedUnoccupied", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setGasPowerAppliancedUnoccupied(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setLightingpowerIntensityOccupied

  call-seq:
    setLightingpowerIntensityOccupied(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setLightingpowerIntensityOccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setLightingpowerIntensityOccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setLightingpowerIntensityOccupied", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setLightingpowerIntensityOccupied(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setLightingpowerIntensityUnoccupied

  call-seq:
    setLightingpowerIntensityUnoccupied(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setLightingpowerIntensityUnoccupied(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setLightingpowerIntensityUnoccupied", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setLightingpowerIntensityUnoccupied", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setLightingpowerIntensityUnoccupied(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setExteriorLightingPower

  call-seq:
    setExteriorLightingPower(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setExteriorLightingPower(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setExteriorLightingPower", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setExteriorLightingPower", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setExteriorLightingPower(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setDaylightSensorSystem

  call-seq:
    setDaylightSensorSystem(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setDaylightSensorSystem(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setDaylightSensorSystem", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setDaylightSensorSystem", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDaylightSensorSystem(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setLightingOccupancySensorSystem

  call-seq:
    setLightingOccupancySensorSystem(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setLightingOccupancySensorSystem(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setLightingOccupancySensorSystem", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setLightingOccupancySensorSystem", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setLightingOccupancySensorSystem(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setConstantIlluminationControl

  call-seq:
    setConstantIlluminationControl(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setConstantIlluminationControl(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setConstantIlluminationControl", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setConstantIlluminationControl", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setConstantIlluminationControl(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setCoolingSystemCOP

  call-seq:
    setCoolingSystemCOP(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setCoolingSystemCOP(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setCoolingSystemCOP", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setCoolingSystemCOP", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCoolingSystemCOP(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setCoolingSystemIPLV

  call-seq:
    setCoolingSystemIPLV(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setCoolingSystemIPLV(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setCoolingSystemIPLV", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setCoolingSystemIPLV", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCoolingSystemIPLV(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHeatingEnergyCarrier

  call-seq:
    setHeatingEnergyCarrier(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHeatingEnergyCarrier(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHeatingEnergyCarrier", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHeatingEnergyCarrier", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHeatingEnergyCarrier(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHeatingSystemEfficiency

  call-seq:
    setHeatingSystemEfficiency(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHeatingSystemEfficiency(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHeatingSystemEfficiency", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHeatingSystemEfficiency", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHeatingSystemEfficiency(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setVentilationType

  call-seq:
    setVentilationType(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setVentilationType(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setVentilationType", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setVentilationType", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setVentilationType(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setFreshAirFlowRate

  call-seq:
    setFreshAirFlowRate(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setFreshAirFlowRate(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setFreshAirFlowRate", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setFreshAirFlowRate", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFreshAirFlowRate(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setSupplyExhaustRate

  call-seq:
    setSupplyExhaustRate(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setSupplyExhaustRate(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setSupplyExhaustRate", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setSupplyExhaustRate", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSupplyExhaustRate(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHeatRecovery

  call-seq:
    setHeatRecovery(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHeatRecovery(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHeatRecovery", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHeatRecovery", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHeatRecovery(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setExhaustAirRecirculation

  call-seq:
    setExhaustAirRecirculation(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setExhaustAirRecirculation(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setExhaustAirRecirculation", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setExhaustAirRecirculation", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setExhaustAirRecirculation(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setBuildingAirLeakage

  call-seq:
    setBuildingAirLeakage(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setBuildingAirLeakage(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setBuildingAirLeakage", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setBuildingAirLeakage", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setBuildingAirLeakage(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setDhwDemand

  call-seq:
    setDhwDemand(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setDhwDemand(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setDhwDemand", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setDhwDemand", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDhwDemand(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setDhwEfficiency

  call-seq:
    setDhwEfficiency(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setDhwEfficiency(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setDhwEfficiency", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setDhwEfficiency", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDhwEfficiency(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setDhwDistributionSystem

  call-seq:
    setDhwDistributionSystem(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setDhwDistributionSystem(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setDhwDistributionSystem", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setDhwDistributionSystem", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDhwDistributionSystem(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setDhwEnergyCarrier

  call-seq:
    setDhwEnergyCarrier(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setDhwEnergyCarrier(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setDhwEnergyCarrier", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setDhwEnergyCarrier", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDhwEnergyCarrier(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setBemType

  call-seq:
    setBemType(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setBemType(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setBemType", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setBemType", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setBemType(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setInteriorHeatCapacity

  call-seq:
    setInteriorHeatCapacity(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setInteriorHeatCapacity(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setInteriorHeatCapacity", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setInteriorHeatCapacity", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setInteriorHeatCapacity(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setSpecificFanPower

  call-seq:
    setSpecificFanPower(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setSpecificFanPower(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setSpecificFanPower", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setSpecificFanPower", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSpecificFanPower(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setFanFlowControlFactor

  call-seq:
    setFanFlowControlFactor(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setFanFlowControlFactor(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setFanFlowControlFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setFanFlowControlFactor", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFanFlowControlFactor(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowUValue

  call-seq:
    setWindowUValue(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowUValue(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowUValue", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowUValue", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowUValue(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowSolarAbsorbtion

  call-seq:
    setWindowSolarAbsorbtion(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowSolarAbsorbtion(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowSolarAbsorbtion", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowSolarAbsorbtion", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowSolarAbsorbtion(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowThermalEmissivity

  call-seq:
    setWindowThermalEmissivity(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowThermalEmissivity(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowThermalEmissivity", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowThermalEmissivity", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowThermalEmissivity(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowSHGC

  call-seq:
    setWindowSHGC(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowSHGC(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowSHGC", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowSHGC", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowSHGC(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowSCF

  call-seq:
    setWindowSCF(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowSCF(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowSCF", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowSCF", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowSCF(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowSD

  call-seq:
    setWindowSD(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowSD(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowSD", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowSD", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowSD(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallUValue

  call-seq:
    setWallUValue(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallUValue(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallUValue", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallUValue", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallUValue(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallSolarAbsorbtion

  call-seq:
    setWallSolarAbsorbtion(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallSolarAbsorbtion(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallSolarAbsorbtion", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallSolarAbsorbtion", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallSolarAbsorbtion(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallThermalEmissivity

  call-seq:
    setWallThermalEmissivity(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallThermalEmissivity(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallThermalEmissivity", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallThermalEmissivity", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallThermalEmissivity(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setRoofUValue

  call-seq:
    setRoofUValue(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setRoofUValue(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setRoofUValue", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setRoofUValue", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRoofUValue(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setRoofSHGC

  call-seq:
    setRoofSHGC(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setRoofSHGC(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setRoofSHGC", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setRoofSHGC", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRoofSHGC(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallAreaS

  call-seq:
    setWallAreaS(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallAreaS(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallAreaS", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallAreaS", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallAreaS(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallAreaSE

  call-seq:
    setWallAreaSE(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallAreaSE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallAreaSE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallAreaSE", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallAreaSE(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallAreaE

  call-seq:
    setWallAreaE(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallAreaE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallAreaE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallAreaE", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallAreaE(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallAreaNE

  call-seq:
    setWallAreaNE(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallAreaNE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallAreaNE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallAreaNE", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallAreaNE(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallAreaN

  call-seq:
    setWallAreaN(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallAreaN(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallAreaN", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallAreaN", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallAreaN(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallAreaNW

  call-seq:
    setWallAreaNW(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallAreaNW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallAreaNW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallAreaNW", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallAreaNW(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallAreaW

  call-seq:
    setWallAreaW(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallAreaW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallAreaW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallAreaW", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallAreaW(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWallAreaSW

  call-seq:
    setWallAreaSW(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWallAreaSW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWallAreaSW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWallAreaSW", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWallAreaSW(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setRoofArea

  call-seq:
    setRoofArea(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setRoofArea(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setRoofArea", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setRoofArea", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setRoofArea(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowAreaS

  call-seq:
    setWindowAreaS(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowAreaS(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowAreaS", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowAreaS", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowAreaS(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowAreaSE

  call-seq:
    setWindowAreaSE(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowAreaSE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowAreaSE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowAreaSE", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowAreaSE(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowAreaE

  call-seq:
    setWindowAreaE(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowAreaE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowAreaE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowAreaE", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowAreaE(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowAreaNE

  call-seq:
    setWindowAreaNE(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowAreaNE(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowAreaNE", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowAreaNE", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowAreaNE(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowAreaN

  call-seq:
    setWindowAreaN(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowAreaN(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowAreaN", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowAreaN", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowAreaN(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowAreaNW

  call-seq:
    setWindowAreaNW(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowAreaNW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowAreaNW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowAreaNW", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowAreaNW(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowAreaW

  call-seq:
    setWindowAreaW(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowAreaW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowAreaW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowAreaW", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowAreaW(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setWindowAreaSW

  call-seq:
    setWindowAreaSW(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setWindowAreaSW(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setWindowAreaSW", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setWindowAreaSW", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWindowAreaSW(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setSkylightArea

  call-seq:
    setSkylightArea(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setSkylightArea(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setSkylightArea", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setSkylightArea", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setSkylightArea(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setExteriorHeatCapacity

  call-seq:
    setExteriorHeatCapacity(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setExteriorHeatCapacity(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setExteriorHeatCapacity", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setExteriorHeatCapacity", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setExteriorHeatCapacity(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setInfiltration

  call-seq:
    setInfiltration(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setInfiltration(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setInfiltration", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setInfiltration", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setInfiltration(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHvacWasteFactor

  call-seq:
    setHvacWasteFactor(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHvacWasteFactor(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHvacWasteFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHvacWasteFactor", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHvacWasteFactor(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHvacHeatingLossFactor

  call-seq:
    setHvacHeatingLossFactor(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHvacHeatingLossFactor(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHvacHeatingLossFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHvacHeatingLossFactor", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHvacHeatingLossFactor(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHvacCoolingLossFactor

  call-seq:
    setHvacCoolingLossFactor(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHvacCoolingLossFactor(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHvacCoolingLossFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHvacCoolingLossFactor", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHvacCoolingLossFactor(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setDhwDistributionEfficiency

  call-seq:
    setDhwDistributionEfficiency(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setDhwDistributionEfficiency(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setDhwDistributionEfficiency", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setDhwDistributionEfficiency", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDhwDistributionEfficiency(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHeatingPumpControl

  call-seq:
    setHeatingPumpControl(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHeatingPumpControl(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHeatingPumpControl", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHeatingPumpControl", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHeatingPumpControl(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setCoolingPumpControl

  call-seq:
    setCoolingPumpControl(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setCoolingPumpControl(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setCoolingPumpControl", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setCoolingPumpControl", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setCoolingPumpControl(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::UserModel.setHeatGainPerPerson

  call-seq:
    setHeatGainPerPerson(double val)

An instance method.

*/
SWIGINTERN VALUE
_wrap_UserModel_setHeatGainPerPerson(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::UserModel *arg1 = (openstudio::isomodel::UserModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__UserModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::UserModel *","setHeatGainPerPerson", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::UserModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","setHeatGainPerPerson", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHeatGainPerPerson(arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-class: OpenStudio::ISOModel::ISOModelForwardTranslator

  Proxy of C++ OpenStudio::ISOModel::ISOModelForwardTranslator class


*/
static swig_class SwigClassISOModelForwardTranslator;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ISOModelForwardTranslator_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ISOModelForwardTranslator_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_openstudio__isomodel__ForwardTranslator);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: OpenStudio::ISOModel::ISOModelForwardTranslator.new

  call-seq:
    ISOModelForwardTranslator.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_ISOModelForwardTranslator(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::ForwardTranslator *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (openstudio::isomodel::ForwardTranslator *)new openstudio::isomodel::ForwardTranslator();
      DATA_PTR(self) = result;
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_openstudio_isomodel_ForwardTranslator(openstudio::isomodel::ForwardTranslator *arg1) {
    delete arg1;
}


/*
  Document-method: OpenStudio::ISOModel::ISOModelForwardTranslator.translateModel

  call-seq:
    translateModel(Model model) -> UserModel

An instance method.

*/
SWIGINTERN VALUE
_wrap_ISOModelForwardTranslator_translateModel(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::ForwardTranslator *arg1 = (openstudio::isomodel::ForwardTranslator *) 0 ;
  openstudio::model::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  openstudio::isomodel::UserModel result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__ForwardTranslator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::ForwardTranslator *","translateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::ForwardTranslator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_openstudio__model__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "openstudio::model::Model const &","translateModel", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "openstudio::model::Model const &","translateModel", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< openstudio::model::Model * >(argp2);
  {
    try {
      result = (arg1)->translateModel((openstudio::model::Model const &)*arg2);
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new openstudio::isomodel::UserModel(static_cast< const openstudio::isomodel::UserModel& >(result))), SWIGTYPE_p_openstudio__isomodel__UserModel, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ISOModelForwardTranslator.warnings

  call-seq:
    warnings -> LogMessageVector

An instance method.

*/
SWIGINTERN VALUE
_wrap_ISOModelForwardTranslator_warnings(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::ForwardTranslator *arg1 = (openstudio::isomodel::ForwardTranslator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__ForwardTranslator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::ForwardTranslator const *","warnings", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::ForwardTranslator * >(argp1);
  {
    try {
      result = ((openstudio::isomodel::ForwardTranslator const *)arg1)->warnings();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = swig::from(static_cast< std::vector<openstudio::LogMessage,std::allocator< openstudio::LogMessage > > >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: OpenStudio::ISOModel::ISOModelForwardTranslator.errors

  call-seq:
    errors -> LogMessageVector

An instance method.

*/
SWIGINTERN VALUE
_wrap_ISOModelForwardTranslator_errors(int argc, VALUE *argv, VALUE self) {
  openstudio::isomodel::ForwardTranslator *arg1 = (openstudio::isomodel::ForwardTranslator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< openstudio::LogMessage,std::allocator< openstudio::LogMessage > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_openstudio__isomodel__ForwardTranslator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "openstudio::isomodel::ForwardTranslator const *","errors", 1, self )); 
  }
  arg1 = reinterpret_cast< openstudio::isomodel::ForwardTranslator * >(argp1);
  {
    try {
      result = ((openstudio::isomodel::ForwardTranslator const *)arg1)->errors();
    } catch (const std::exception& e) {
      rb_raise(rb_eRuntimeError, e.what());
    }
  }
  vresult = swig::from(static_cast< std::vector<openstudio::LogMessage,std::allocator< openstudio::LogMessage > > >(result));
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static void *_p_openstudio__model__ComponentTo_p_openstudio__model__Model(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((openstudio::model::Model *)  ((openstudio::model::Component *) x));
}
static swig_type_info _swigt__p_ConstPtr = {"_p_ConstPtr", "ConstPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstVec = {"_p_ConstVec", "ConstVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstWeakPtr = {"_p_ConstWeakPtr", "ConstWeakPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImplPtr = {"_p_ImplPtr", "ImplPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImplType = {"_p_ImplType", "ImplType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ptr = {"_p_Ptr", "Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec = {"_p_Vec", "Vec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WeakPtr = {"_p_WeakPtr", "WeakPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__log__sinks__synchronous_sinkT_boost__log__sinks__text_ostream_backend_t = {"_p_boost__log__sinks__synchronous_sinkT_boost__log__sinks__text_ostream_backend_t", "openstudio::LogSinkBackend *|boost::log::sinks::synchronous_sink< boost::log::sinks::text_ostream_backend > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__log__sources__severity_channel_logger_mtT_LogLevel_t = {"_p_boost__log__sources__severity_channel_logger_mtT_LogLevel_t", "boost::log::sources::severity_channel_logger_mt< LogLevel > *|openstudio::LoggerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_QUrl_t = {"_p_boost__optionalT_QUrl_t", "boost::optional< QUrl > *|openstudio::OptionalURL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_double_t = {"_p_boost__optionalT_double_t", "openstudio::OptionalDouble *|boost::optional< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_int_t = {"_p_boost__optionalT_int_t", "openstudio::OptionalInt *|boost::optional< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__AttributeDescription_t = {"_p_boost__optionalT_openstudio__AttributeDescription_t", "boost::optional< openstudio::AttributeDescription > *|openstudio::OptionalAttributeDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Attribute_t = {"_p_boost__optionalT_openstudio__Attribute_t", "boost::optional< openstudio::Attribute > *|openstudio::OptionalAttribute *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__BCLMeasure_t = {"_p_boost__optionalT_openstudio__BCLMeasure_t", "boost::optional< openstudio::BCLMeasure > *|openstudio::OptionalBCLMeasure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__BTUUnit_t = {"_p_boost__optionalT_openstudio__BTUUnit_t", "openstudio::OptionalBTUUnit *|boost::optional< openstudio::BTUUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__BoundingBox_t = {"_p_boost__optionalT_openstudio__BoundingBox_t", "openstudio::OptionalBoundingBox *|boost::optional< openstudio::BoundingBox > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__CFMUnit_t = {"_p_boost__optionalT_openstudio__CFMUnit_t", "openstudio::OptionalCFMUnit *|boost::optional< openstudio::CFMUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Calendar_t = {"_p_boost__optionalT_openstudio__Calendar_t", "boost::optional< openstudio::Calendar > *|openstudio::OptionalCalendar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__CelciusUnit_t = {"_p_boost__optionalT_openstudio__CelciusUnit_t", "openstudio::OptionalCelciusUnit *|boost::optional< openstudio::CelciusUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__DataError_t = {"_p_boost__optionalT_openstudio__DataError_t", "openstudio::OptionalDataError *|boost::optional< openstudio::DataError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__DateTime_t = {"_p_boost__optionalT_openstudio__DateTime_t", "boost::optional< openstudio::DateTime > *|openstudio::OptionalDateTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Date_t = {"_p_boost__optionalT_openstudio__Date_t", "boost::optional< openstudio::Date > *|openstudio::OptionalDate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__DocumentElement_t = {"_p_boost__optionalT_openstudio__DocumentElement_t", "openstudio::OptionalDocumentElement *|boost::optional< openstudio::DocumentElement > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Document_t = {"_p_boost__optionalT_openstudio__Document_t", "openstudio::OptionalDocument *|boost::optional< openstudio::Document > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__EnvironmentIdentifier_t = {"_p_boost__optionalT_openstudio__EnvironmentIdentifier_t", "openstudio::OptionalEnvironmentIdentifier *|boost::optional< openstudio::EnvironmentIdentifier > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__EnvironmentType_t = {"_p_boost__optionalT_openstudio__EnvironmentType_t", "openstudio::OptionalEnvironmentType *|boost::optional< openstudio::EnvironmentType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__EulerAngles_t = {"_p_boost__optionalT_openstudio__EulerAngles_t", "openstudio::OptionalEulerAngles *|boost::optional< openstudio::EulerAngles > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__FahrenheitUnit_t = {"_p_boost__optionalT_openstudio__FahrenheitUnit_t", "openstudio::OptionalFahrenheitUnit *|boost::optional< openstudio::FahrenheitUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__FileReference_t = {"_p_boost__optionalT_openstudio__FileReference_t", "boost::optional< openstudio::FileReference > *|openstudio::OptionalFileReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__FuelType_t = {"_p_boost__optionalT_openstudio__FuelType_t", "openstudio::OptionalFuelType *|boost::optional< openstudio::FuelType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__GPDUnit_t = {"_p_boost__optionalT_openstudio__GPDUnit_t", "openstudio::OptionalGPDUnit *|boost::optional< openstudio::GPDUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__IPUnit_t = {"_p_boost__optionalT_openstudio__IPUnit_t", "openstudio::OptionalIPUnit *|boost::optional< openstudio::IPUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__IddField_t = {"_p_boost__optionalT_openstudio__IddField_t", "boost::optional< openstudio::IddField > *|openstudio::OptionalIddField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__IddFile_t = {"_p_boost__optionalT_openstudio__IddFile_t", "openstudio::OptionalIddFile *|boost::optional< openstudio::IddFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__IddKey_t = {"_p_boost__optionalT_openstudio__IddKey_t", "boost::optional< openstudio::IddKey > *|openstudio::OptionalIddKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__IddObject_t = {"_p_boost__optionalT_openstudio__IddObject_t", "openstudio::OptionalIddObject *|boost::optional< openstudio::IddObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__IdfFile_t = {"_p_boost__optionalT_openstudio__IdfFile_t", "openstudio::OptionalIdfFile *|boost::optional< openstudio::IdfFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__IdfObject_t = {"_p_boost__optionalT_openstudio__IdfObject_t", "openstudio::OptionalIdfObject *|boost::optional< openstudio::IdfObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__ImfFile_t = {"_p_boost__optionalT_openstudio__ImfFile_t", "openstudio::OptionalImfFile *|boost::optional< openstudio::ImfFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__KeyValueIdentifier_t = {"_p_boost__optionalT_openstudio__KeyValueIdentifier_t", "openstudio::OptionalKeyValueIdentifier *|boost::optional< openstudio::KeyValueIdentifier > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__MPHUnit_t = {"_p_boost__optionalT_openstudio__MPHUnit_t", "openstudio::OptionalMPHUnit *|boost::optional< openstudio::MPHUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Misc1Unit_t = {"_p_boost__optionalT_openstudio__Misc1Unit_t", "openstudio::OptionalMisc1Unit *|boost::optional< openstudio::Misc1Unit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Plane_t = {"_p_boost__optionalT_openstudio__Plane_t", "boost::optional< openstudio::Plane > *|openstudio::OptionalPlane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Point3d_t = {"_p_boost__optionalT_openstudio__Point3d_t", "boost::optional< openstudio::Point3d > *|openstudio::OptionalPoint3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Quantity_t = {"_p_boost__optionalT_openstudio__Quantity_t", "openstudio::OptionalQuantity *|boost::optional< openstudio::Quantity > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__ReportingFrequency_t = {"_p_boost__optionalT_openstudio__ReportingFrequency_t", "boost::optional< openstudio::ReportingFrequency > *|openstudio::OptionalReportingFrequency *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__SIUnit_t = {"_p_boost__optionalT_openstudio__SIUnit_t", "openstudio::OptionalSIUnit *|boost::optional< openstudio::SIUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__SectionElement_t = {"_p_boost__optionalT_openstudio__SectionElement_t", "openstudio::OptionalSectionElement *|boost::optional< openstudio::SectionElement > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__SectionHeading_t = {"_p_boost__optionalT_openstudio__SectionHeading_t", "boost::optional< openstudio::SectionHeading > *|openstudio::OptionalSectionHeading *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Section_t = {"_p_boost__optionalT_openstudio__Section_t", "openstudio::OptionalSection *|boost::optional< openstudio::Section > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__SqlFile_t = {"_p_boost__optionalT_openstudio__SqlFile_t", "openstudio::OptionalSqlFile *|boost::optional< openstudio::SqlFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Table_t = {"_p_boost__optionalT_openstudio__Table_t", "openstudio::OptionalTable *|boost::optional< openstudio::Table > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Tag_t = {"_p_boost__optionalT_openstudio__Tag_t", "openstudio::OptionalTag *|boost::optional< openstudio::Tag > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__TemperatureUnit_t = {"_p_boost__optionalT_openstudio__TemperatureUnit_t", "openstudio::OptionalTemperatureUnit *|boost::optional< openstudio::TemperatureUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Text_t = {"_p_boost__optionalT_openstudio__Text_t", "openstudio::OptionalText *|boost::optional< openstudio::Text > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__ThermUnit_t = {"_p_boost__optionalT_openstudio__ThermUnit_t", "openstudio::OptionalThermUnit *|boost::optional< openstudio::ThermUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__TimeDependentValuationFile_t = {"_p_boost__optionalT_openstudio__TimeDependentValuationFile_t", "boost::optional< openstudio::TimeDependentValuationFile > *|openstudio::OptionalTimeDependentValuationFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__TimeSeriesIdentifier_t = {"_p_boost__optionalT_openstudio__TimeSeriesIdentifier_t", "openstudio::OptionalTimeSeriesIdentifier *|boost::optional< openstudio::TimeSeriesIdentifier > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__TimeSeries_t = {"_p_boost__optionalT_openstudio__TimeSeries_t", "boost::optional< openstudio::TimeSeries > *|openstudio::OptionalTimeSeries *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Time_t = {"_p_boost__optionalT_openstudio__Time_t", "boost::optional< openstudio::Time > *|openstudio::OptionalTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Transformation_t = {"_p_boost__optionalT_openstudio__Transformation_t", "openstudio::OptionalTransformation *|boost::optional< openstudio::Transformation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__UUID_t = {"_p_boost__optionalT_openstudio__UUID_t", "boost::optional< openstudio::UUID > *|openstudio::OptionalHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Unit_t = {"_p_boost__optionalT_openstudio__Unit_t", "openstudio::OptionalUnit *|boost::optional< openstudio::Unit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Vector3d_t = {"_p_boost__optionalT_openstudio__Vector3d_t", "boost::optional< openstudio::Vector3d > *|openstudio::OptionalVector3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__WhUnit_t = {"_p_boost__optionalT_openstudio__WhUnit_t", "openstudio::OptionalWhUnit *|boost::optional< openstudio::WhUnit > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__WorkspaceObject_t = {"_p_boost__optionalT_openstudio__WorkspaceObject_t", "openstudio::OptionalWorkspaceObject *|boost::optional< openstudio::WorkspaceObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__Workspace_t = {"_p_boost__optionalT_openstudio__Workspace_t", "boost::optional< openstudio::Workspace > *|openstudio::OptionalWorkspace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirGap_t = {"_p_boost__optionalT_openstudio__model__AirGap_t", "boost::optional< openstudio::model::AirGap > *|openstudio::model::OptionalAirGap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirLoopHVACOutdoorAirSystem_t = {"_p_boost__optionalT_openstudio__model__AirLoopHVACOutdoorAirSystem_t", "boost::optional< openstudio::model::AirLoopHVACOutdoorAirSystem > *|openstudio::model::OptionalAirLoopHVACOutdoorAirSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t = {"_p_boost__optionalT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t", "boost::optional< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir > *|openstudio::model::OptionalAirLoopHVACUnitaryHeatPumpAirToAir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirLoopHVACZoneMixer_t = {"_p_boost__optionalT_openstudio__model__AirLoopHVACZoneMixer_t", "openstudio::model::OptionalAirLoopHVACZoneMixer *|boost::optional< openstudio::model::AirLoopHVACZoneMixer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirLoopHVACZoneSplitter_t = {"_p_boost__optionalT_openstudio__model__AirLoopHVACZoneSplitter_t", "openstudio::model::OptionalAirLoopHVACZoneSplitter *|boost::optional< openstudio::model::AirLoopHVACZoneSplitter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirLoopHVAC_t = {"_p_boost__optionalT_openstudio__model__AirLoopHVAC_t", "boost::optional< openstudio::model::AirLoopHVAC > *|openstudio::model::OptionalAirLoopHVAC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t = {"_p_boost__optionalT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t", "openstudio::model::OptionalAirTerminalSingleDuctParallelPIUReheat *|boost::optional< openstudio::model::AirTerminalSingleDuctParallelPIUReheat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctUncontrolled_t = {"_p_boost__optionalT_openstudio__model__AirTerminalSingleDuctUncontrolled_t", "boost::optional< openstudio::model::AirTerminalSingleDuctUncontrolled > *|openstudio::model::OptionalAirTerminalSingleDuctUncontrolled *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctVAVReheat_t = {"_p_boost__optionalT_openstudio__model__AirTerminalSingleDuctVAVReheat_t", "boost::optional< openstudio::model::AirTerminalSingleDuctVAVReheat > *|openstudio::model::OptionalAirTerminalSingleDuctVAVReheat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AirWallMaterial_t = {"_p_boost__optionalT_openstudio__model__AirWallMaterial_t", "openstudio::model::OptionalAirWallMaterial *|boost::optional< openstudio::model::AirWallMaterial > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__AvailabilityManagerScheduled_t = {"_p_boost__optionalT_openstudio__model__AvailabilityManagerScheduled_t", "boost::optional< openstudio::model::AvailabilityManagerScheduled > *|openstudio::model::OptionalAvailabilityManagerScheduled *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Blind_t = {"_p_boost__optionalT_openstudio__model__Blind_t", "openstudio::model::OptionalBlind *|boost::optional< openstudio::model::Blind > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__BoilerHotWater_t = {"_p_boost__optionalT_openstudio__model__BoilerHotWater_t", "boost::optional< openstudio::model::BoilerHotWater > *|openstudio::model::OptionalBoilerHotWater *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__BuildingStandardsInformation_t = {"_p_boost__optionalT_openstudio__model__BuildingStandardsInformation_t", "boost::optional< openstudio::model::BuildingStandardsInformation > *|openstudio::model::OptionalBuildingStandardsInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__BuildingStory_t = {"_p_boost__optionalT_openstudio__model__BuildingStory_t", "boost::optional< openstudio::model::BuildingStory > *|openstudio::model::OptionalBuildingStory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Building_t = {"_p_boost__optionalT_openstudio__model__Building_t", "boost::optional< openstudio::model::Building > *|openstudio::model::OptionalBuilding *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CFactorUndergroundWallConstruction_t = {"_p_boost__optionalT_openstudio__model__CFactorUndergroundWallConstruction_t", "openstudio::model::OptionalCFactorUndergroundWallConstruction *|boost::optional< openstudio::model::CFactorUndergroundWallConstruction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ChillerElectricEIR_t = {"_p_boost__optionalT_openstudio__model__ChillerElectricEIR_t", "openstudio::model::OptionalChillerElectricEIR *|boost::optional< openstudio::model::ChillerElectricEIR > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ClimateZones_t = {"_p_boost__optionalT_openstudio__model__ClimateZones_t", "boost::optional< openstudio::model::ClimateZones > *|openstudio::model::OptionalClimateZones *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CoilCoolingDXSingleSpeed_t = {"_p_boost__optionalT_openstudio__model__CoilCoolingDXSingleSpeed_t", "openstudio::model::OptionalCoilCoolingDXSingleSpeed *|boost::optional< openstudio::model::CoilCoolingDXSingleSpeed > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CoilCoolingDXTwoSpeed_t = {"_p_boost__optionalT_openstudio__model__CoilCoolingDXTwoSpeed_t", "boost::optional< openstudio::model::CoilCoolingDXTwoSpeed > *|openstudio::model::OptionalCoilCoolingDXTwoSpeed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CoilCoolingWater_t = {"_p_boost__optionalT_openstudio__model__CoilCoolingWater_t", "boost::optional< openstudio::model::CoilCoolingWater > *|openstudio::model::OptionalCoilCoolingWater *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CoilHeatingDXSingleSpeed_t = {"_p_boost__optionalT_openstudio__model__CoilHeatingDXSingleSpeed_t", "openstudio::model::OptionalCoilHeatingDXSingleSpeed *|boost::optional< openstudio::model::CoilHeatingDXSingleSpeed > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CoilHeatingElectric_t = {"_p_boost__optionalT_openstudio__model__CoilHeatingElectric_t", "boost::optional< openstudio::model::CoilHeatingElectric > *|openstudio::model::OptionalCoilHeatingElectric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CoilHeatingGas_t = {"_p_boost__optionalT_openstudio__model__CoilHeatingGas_t", "boost::optional< openstudio::model::CoilHeatingGas > *|openstudio::model::OptionalCoilHeatingGas *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CoilHeatingWater_t = {"_p_boost__optionalT_openstudio__model__CoilHeatingWater_t", "boost::optional< openstudio::model::CoilHeatingWater > *|openstudio::model::OptionalCoilHeatingWater *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ComponentCost_LineItem_t = {"_p_boost__optionalT_openstudio__model__ComponentCost_LineItem_t", "openstudio::model::OptionalComponentCost_LineItem *|boost::optional< openstudio::model::ComponentCost_LineItem > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ComponentData_t = {"_p_boost__optionalT_openstudio__model__ComponentData_t", "openstudio::model::OptionalComponentData *|boost::optional< openstudio::model::ComponentData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Component_t = {"_p_boost__optionalT_openstudio__model__Component_t", "boost::optional< openstudio::model::Component > *|openstudio::model::OptionalComponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ConnectorMixer_t = {"_p_boost__optionalT_openstudio__model__ConnectorMixer_t", "boost::optional< openstudio::model::ConnectorMixer > *|openstudio::model::OptionalConnectorMixer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ConnectorSplitter_t = {"_p_boost__optionalT_openstudio__model__ConnectorSplitter_t", "boost::optional< openstudio::model::ConnectorSplitter > *|openstudio::model::OptionalConnectorSplitter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ConstructionBaseStandardsInformation_t = {"_p_boost__optionalT_openstudio__model__ConstructionBaseStandardsInformation_t", "openstudio::model::OptionalConstructionBaseStandardsInformation *|boost::optional< openstudio::model::ConstructionBaseStandardsInformation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ConstructionBase_t = {"_p_boost__optionalT_openstudio__model__ConstructionBase_t", "boost::optional< openstudio::model::ConstructionBase > *|openstudio::model::OptionalConstructionBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ConstructionWithInternalSource_t = {"_p_boost__optionalT_openstudio__model__ConstructionWithInternalSource_t", "openstudio::model::OptionalConstructionWithInternalSource *|boost::optional< openstudio::model::ConstructionWithInternalSource > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Construction_t = {"_p_boost__optionalT_openstudio__model__Construction_t", "boost::optional< openstudio::model::Construction > *|openstudio::model::OptionalConstruction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ControllerMechanicalVentilation_t = {"_p_boost__optionalT_openstudio__model__ControllerMechanicalVentilation_t", "boost::optional< openstudio::model::ControllerMechanicalVentilation > *|openstudio::model::OptionalControllerMechanicalVentilation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ControllerOutdoorAir_t = {"_p_boost__optionalT_openstudio__model__ControllerOutdoorAir_t", "boost::optional< openstudio::model::ControllerOutdoorAir > *|openstudio::model::OptionalControllerOutdoorAir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ControllerWaterCoil_t = {"_p_boost__optionalT_openstudio__model__ControllerWaterCoil_t", "openstudio::model::OptionalControllerWaterCoil *|boost::optional< openstudio::model::ControllerWaterCoil > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ConvergenceLimits_t = {"_p_boost__optionalT_openstudio__model__ConvergenceLimits_t", "boost::optional< openstudio::model::ConvergenceLimits > *|openstudio::model::OptionalConvergenceLimits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CoolingTowerSingleSpeed_t = {"_p_boost__optionalT_openstudio__model__CoolingTowerSingleSpeed_t", "boost::optional< openstudio::model::CoolingTowerSingleSpeed > *|openstudio::model::OptionalCoolingTowerSingleSpeed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveBicubic_t = {"_p_boost__optionalT_openstudio__model__CurveBicubic_t", "boost::optional< openstudio::model::CurveBicubic > *|openstudio::model::OptionalCurveBicubic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveBiquadratic_t = {"_p_boost__optionalT_openstudio__model__CurveBiquadratic_t", "boost::optional< openstudio::model::CurveBiquadratic > *|openstudio::model::OptionalCurveBiquadratic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveCubic_t = {"_p_boost__optionalT_openstudio__model__CurveCubic_t", "openstudio::model::OptionalCurveCubic *|boost::optional< openstudio::model::CurveCubic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveDoubleExponentialDecay_t = {"_p_boost__optionalT_openstudio__model__CurveDoubleExponentialDecay_t", "boost::optional< openstudio::model::CurveDoubleExponentialDecay > *|openstudio::model::OptionalCurveDoubleExponentialDecay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveExponent_t = {"_p_boost__optionalT_openstudio__model__CurveExponent_t", "boost::optional< openstudio::model::CurveExponent > *|openstudio::model::OptionalCurveExponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveExponentialDecay_t = {"_p_boost__optionalT_openstudio__model__CurveExponentialDecay_t", "boost::optional< openstudio::model::CurveExponentialDecay > *|openstudio::model::OptionalCurveExponentialDecay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveExponentialSkewNormal_t = {"_p_boost__optionalT_openstudio__model__CurveExponentialSkewNormal_t", "boost::optional< openstudio::model::CurveExponentialSkewNormal > *|openstudio::model::OptionalCurveExponentialSkewNormal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveFanPressureRise_t = {"_p_boost__optionalT_openstudio__model__CurveFanPressureRise_t", "boost::optional< openstudio::model::CurveFanPressureRise > *|openstudio::model::OptionalCurveFanPressureRise *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveFunctionalPressureDrop_t = {"_p_boost__optionalT_openstudio__model__CurveFunctionalPressureDrop_t", "boost::optional< openstudio::model::CurveFunctionalPressureDrop > *|openstudio::model::OptionalCurveFunctionalPressureDrop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveLinear_t = {"_p_boost__optionalT_openstudio__model__CurveLinear_t", "boost::optional< openstudio::model::CurveLinear > *|openstudio::model::OptionalCurveLinear *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveQuadraticLinear_t = {"_p_boost__optionalT_openstudio__model__CurveQuadraticLinear_t", "boost::optional< openstudio::model::CurveQuadraticLinear > *|openstudio::model::OptionalCurveQuadraticLinear *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveQuadratic_t = {"_p_boost__optionalT_openstudio__model__CurveQuadratic_t", "openstudio::model::OptionalCurveQuadratic *|boost::optional< openstudio::model::CurveQuadratic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveQuartic_t = {"_p_boost__optionalT_openstudio__model__CurveQuartic_t", "openstudio::model::OptionalCurveQuartic *|boost::optional< openstudio::model::CurveQuartic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola1_t = {"_p_boost__optionalT_openstudio__model__CurveRectangularHyperbola1_t", "openstudio::model::OptionalCurveRectangularHyperbola1 *|boost::optional< openstudio::model::CurveRectangularHyperbola1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola2_t = {"_p_boost__optionalT_openstudio__model__CurveRectangularHyperbola2_t", "openstudio::model::OptionalCurveRectangularHyperbola2 *|boost::optional< openstudio::model::CurveRectangularHyperbola2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveSigmoid_t = {"_p_boost__optionalT_openstudio__model__CurveSigmoid_t", "openstudio::model::OptionalCurveSigmoid *|boost::optional< openstudio::model::CurveSigmoid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__CurveTriquadratic_t = {"_p_boost__optionalT_openstudio__model__CurveTriquadratic_t", "boost::optional< openstudio::model::CurveTriquadratic > *|openstudio::model::OptionalCurveTriquadratic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Curve_t = {"_p_boost__optionalT_openstudio__model__Curve_t", "openstudio::model::OptionalCurve *|boost::optional< openstudio::model::Curve > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DaylightingControl_t = {"_p_boost__optionalT_openstudio__model__DaylightingControl_t", "openstudio::model::OptionalDaylightingControl *|boost::optional< openstudio::model::DaylightingControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DaylightingDeviceShelf_t = {"_p_boost__optionalT_openstudio__model__DaylightingDeviceShelf_t", "openstudio::model::OptionalDaylightingDeviceShelf *|boost::optional< openstudio::model::DaylightingDeviceShelf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DefaultConstructionSet_t = {"_p_boost__optionalT_openstudio__model__DefaultConstructionSet_t", "boost::optional< openstudio::model::DefaultConstructionSet > *|openstudio::model::OptionalDefaultConstructionSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DefaultScheduleSet_t = {"_p_boost__optionalT_openstudio__model__DefaultScheduleSet_t", "boost::optional< openstudio::model::DefaultScheduleSet > *|openstudio::model::OptionalDefaultScheduleSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DefaultSubSurfaceConstructions_t = {"_p_boost__optionalT_openstudio__model__DefaultSubSurfaceConstructions_t", "boost::optional< openstudio::model::DefaultSubSurfaceConstructions > *|openstudio::model::OptionalDefaultSubSurfaceConstructions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DefaultSurfaceConstructions_t = {"_p_boost__optionalT_openstudio__model__DefaultSurfaceConstructions_t", "boost::optional< openstudio::model::DefaultSurfaceConstructions > *|openstudio::model::OptionalDefaultSurfaceConstructions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DesignDay_t = {"_p_boost__optionalT_openstudio__model__DesignDay_t", "boost::optional< openstudio::model::DesignDay > *|openstudio::model::OptionalDesignDay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DesignSpecificationOutdoorAir_t = {"_p_boost__optionalT_openstudio__model__DesignSpecificationOutdoorAir_t", "boost::optional< openstudio::model::DesignSpecificationOutdoorAir > *|openstudio::model::OptionalDesignSpecificationOutdoorAir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DistrictCooling_t = {"_p_boost__optionalT_openstudio__model__DistrictCooling_t", "boost::optional< openstudio::model::DistrictCooling > *|openstudio::model::OptionalDistrictCooling *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__DistrictHeating_t = {"_p_boost__optionalT_openstudio__model__DistrictHeating_t", "openstudio::model::OptionalDistrictHeating *|boost::optional< openstudio::model::DistrictHeating > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ElectricEquipmentDefinition_t = {"_p_boost__optionalT_openstudio__model__ElectricEquipmentDefinition_t", "openstudio::model::OptionalElectricEquipmentDefinition *|boost::optional< openstudio::model::ElectricEquipmentDefinition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ElectricEquipment_t = {"_p_boost__optionalT_openstudio__model__ElectricEquipment_t", "boost::optional< openstudio::model::ElectricEquipment > *|openstudio::model::OptionalElectricEquipment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t = {"_p_boost__optionalT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t", "boost::optional< openstudio::model::EvaporativeCoolerDirectResearchSpecial > *|openstudio::model::OptionalEvaporativeCoolerDirectResearchSpecial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ExteriorLightsDefinition_t = {"_p_boost__optionalT_openstudio__model__ExteriorLightsDefinition_t", "boost::optional< openstudio::model::ExteriorLightsDefinition > *|openstudio::model::OptionalExteriorLightsDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ExteriorLights_t = {"_p_boost__optionalT_openstudio__model__ExteriorLights_t", "openstudio::model::OptionalExteriorLights *|boost::optional< openstudio::model::ExteriorLights > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__FFactorGroundFloorConstruction_t = {"_p_boost__optionalT_openstudio__model__FFactorGroundFloorConstruction_t", "openstudio::model::OptionalFFactorGroundFloorConstruction *|boost::optional< openstudio::model::FFactorGroundFloorConstruction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Facility_t = {"_p_boost__optionalT_openstudio__model__Facility_t", "boost::optional< openstudio::model::Facility > *|openstudio::model::OptionalFacility *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__FanConstantVolume_t = {"_p_boost__optionalT_openstudio__model__FanConstantVolume_t", "openstudio::model::OptionalFanConstantVolume *|boost::optional< openstudio::model::FanConstantVolume > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__FanVariableVolume_t = {"_p_boost__optionalT_openstudio__model__FanVariableVolume_t", "openstudio::model::OptionalFanVariableVolume *|boost::optional< openstudio::model::FanVariableVolume > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__FenestrationMaterial_t = {"_p_boost__optionalT_openstudio__model__FenestrationMaterial_t", "openstudio::model::OptionalFenestrationMaterial *|boost::optional< openstudio::model::FenestrationMaterial > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__GasEquipmentDefinition_t = {"_p_boost__optionalT_openstudio__model__GasEquipmentDefinition_t", "openstudio::model::OptionalGasEquipmentDefinition *|boost::optional< openstudio::model::GasEquipmentDefinition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__GasEquipment_t = {"_p_boost__optionalT_openstudio__model__GasEquipment_t", "boost::optional< openstudio::model::GasEquipment > *|openstudio::model::OptionalGasEquipment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__GasLayer_t = {"_p_boost__optionalT_openstudio__model__GasLayer_t", "boost::optional< openstudio::model::GasLayer > *|openstudio::model::OptionalGasLayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__GasMixture_t = {"_p_boost__optionalT_openstudio__model__GasMixture_t", "openstudio::model::OptionalGasMixture *|boost::optional< openstudio::model::GasMixture > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Gas_t = {"_p_boost__optionalT_openstudio__model__Gas_t", "openstudio::model::OptionalGas *|boost::optional< openstudio::model::Gas > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__GenericModelObject_t = {"_p_boost__optionalT_openstudio__model__GenericModelObject_t", "openstudio::model::OptionalGenericModelObject *|boost::optional< openstudio::model::GenericModelObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__GlareSensor_t = {"_p_boost__optionalT_openstudio__model__GlareSensor_t", "boost::optional< openstudio::model::GlareSensor > *|openstudio::model::OptionalGlareSensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Glazing_t = {"_p_boost__optionalT_openstudio__model__Glazing_t", "boost::optional< openstudio::model::Glazing > *|openstudio::model::OptionalGlazing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__HVACComponent_t = {"_p_boost__optionalT_openstudio__model__HVACComponent_t", "boost::optional< openstudio::model::HVACComponent > *|openstudio::model::OptionalHVACComponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__HeatBalanceAlgorithm_t = {"_p_boost__optionalT_openstudio__model__HeatBalanceAlgorithm_t", "boost::optional< openstudio::model::HeatBalanceAlgorithm > *|openstudio::model::OptionalHeatBalanceAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__HotWaterEquipmentDefinition_t = {"_p_boost__optionalT_openstudio__model__HotWaterEquipmentDefinition_t", "boost::optional< openstudio::model::HotWaterEquipmentDefinition > *|openstudio::model::OptionalHotWaterEquipmentDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__HotWaterEquipment_t = {"_p_boost__optionalT_openstudio__model__HotWaterEquipment_t", "boost::optional< openstudio::model::HotWaterEquipment > *|openstudio::model::OptionalHotWaterEquipment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__IlluminanceMap_t = {"_p_boost__optionalT_openstudio__model__IlluminanceMap_t", "boost::optional< openstudio::model::IlluminanceMap > *|openstudio::model::OptionalIlluminanceMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__InfraredTransparentMaterial_t = {"_p_boost__optionalT_openstudio__model__InfraredTransparentMaterial_t", "openstudio::model::OptionalInfraredTransparentMaterial *|boost::optional< openstudio::model::InfraredTransparentMaterial > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__InsideSurfaceConvectionAlgorithm_t = {"_p_boost__optionalT_openstudio__model__InsideSurfaceConvectionAlgorithm_t", "boost::optional< openstudio::model::InsideSurfaceConvectionAlgorithm > *|openstudio::model::OptionalInsideSurfaceConvectionAlgorithm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__InteriorPartitionSurfaceGroup_t = {"_p_boost__optionalT_openstudio__model__InteriorPartitionSurfaceGroup_t", "boost::optional< openstudio::model::InteriorPartitionSurfaceGroup > *|openstudio::model::OptionalInteriorPartitionSurfaceGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__InteriorPartitionSurface_t = {"_p_boost__optionalT_openstudio__model__InteriorPartitionSurface_t", "boost::optional< openstudio::model::InteriorPartitionSurface > *|openstudio::model::OptionalInteriorPartitionSurface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__InternalMassDefinition_t = {"_p_boost__optionalT_openstudio__model__InternalMassDefinition_t", "openstudio::model::OptionalInternalMassDefinition *|boost::optional< openstudio::model::InternalMassDefinition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__InternalMass_t = {"_p_boost__optionalT_openstudio__model__InternalMass_t", "boost::optional< openstudio::model::InternalMass > *|openstudio::model::OptionalInternalMass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__LayeredConstruction_t = {"_p_boost__optionalT_openstudio__model__LayeredConstruction_t", "openstudio::model::OptionalLayeredConstruction *|boost::optional< openstudio::model::LayeredConstruction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__LifeCycleCost_Parameters_t = {"_p_boost__optionalT_openstudio__model__LifeCycleCost_Parameters_t", "openstudio::model::OptionalLifeCycleCost_Parameters *|boost::optional< openstudio::model::LifeCycleCost_Parameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__LightingDesignDay_t = {"_p_boost__optionalT_openstudio__model__LightingDesignDay_t", "boost::optional< openstudio::model::LightingDesignDay > *|openstudio::model::OptionalLightingDesignDay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__LightingSimulationControl_t = {"_p_boost__optionalT_openstudio__model__LightingSimulationControl_t", "boost::optional< openstudio::model::LightingSimulationControl > *|openstudio::model::OptionalLightingSimulationControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__LightingSimulationZone_t = {"_p_boost__optionalT_openstudio__model__LightingSimulationZone_t", "openstudio::model::OptionalLightingSimulationZone *|boost::optional< openstudio::model::LightingSimulationZone > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__LightsDefinition_t = {"_p_boost__optionalT_openstudio__model__LightsDefinition_t", "openstudio::model::OptionalLightsDefinition *|boost::optional< openstudio::model::LightsDefinition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Lights_t = {"_p_boost__optionalT_openstudio__model__Lights_t", "boost::optional< openstudio::model::Lights > *|openstudio::model::OptionalLights *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Loop_t = {"_p_boost__optionalT_openstudio__model__Loop_t", "openstudio::model::OptionalLoop *|boost::optional< openstudio::model::Loop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__LuminaireDefinition_t = {"_p_boost__optionalT_openstudio__model__LuminaireDefinition_t", "openstudio::model::OptionalLuminaireDefinition *|boost::optional< openstudio::model::LuminaireDefinition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Luminaire_t = {"_p_boost__optionalT_openstudio__model__Luminaire_t", "boost::optional< openstudio::model::Luminaire > *|openstudio::model::OptionalLuminaire *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__MasslessOpaqueMaterial_t = {"_p_boost__optionalT_openstudio__model__MasslessOpaqueMaterial_t", "openstudio::model::OptionalMasslessOpaqueMaterial *|boost::optional< openstudio::model::MasslessOpaqueMaterial > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Material_t = {"_p_boost__optionalT_openstudio__model__Material_t", "openstudio::model::OptionalMaterial *|boost::optional< openstudio::model::Material > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Meter_t = {"_p_boost__optionalT_openstudio__model__Meter_t", "openstudio::model::OptionalMeter *|boost::optional< openstudio::model::Meter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Mixer_t = {"_p_boost__optionalT_openstudio__model__Mixer_t", "boost::optional< openstudio::model::Mixer > *|openstudio::model::OptionalMixer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ModelObject_t = {"_p_boost__optionalT_openstudio__model__ModelObject_t", "openstudio::model::OptionalModelObject *|boost::optional< openstudio::model::ModelObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ModelPartitionMaterial_t = {"_p_boost__optionalT_openstudio__model__ModelPartitionMaterial_t", "boost::optional< openstudio::model::ModelPartitionMaterial > *|openstudio::model::OptionalModelPartitionMaterial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Model_t = {"_p_boost__optionalT_openstudio__model__Model_t", "openstudio::model::OptionalModel *|boost::optional< openstudio::model::Model > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Node_t = {"_p_boost__optionalT_openstudio__model__Node_t", "boost::optional< openstudio::model::Node > *|openstudio::model::OptionalNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__OpaqueMaterial_t = {"_p_boost__optionalT_openstudio__model__OpaqueMaterial_t", "openstudio::model::OptionalOpaqueMaterial *|boost::optional< openstudio::model::OpaqueMaterial > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__OtherEquipmentDefinition_t = {"_p_boost__optionalT_openstudio__model__OtherEquipmentDefinition_t", "boost::optional< openstudio::model::OtherEquipmentDefinition > *|openstudio::model::OptionalOtherEquipmentDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__OtherEquipment_t = {"_p_boost__optionalT_openstudio__model__OtherEquipment_t", "boost::optional< openstudio::model::OtherEquipment > *|openstudio::model::OptionalOtherEquipment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__OutputVariable_t = {"_p_boost__optionalT_openstudio__model__OutputVariable_t", "boost::optional< openstudio::model::OutputVariable > *|openstudio::model::OptionalOutputVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__OutsideSurfaceConvectionAlgorithm_t = {"_p_boost__optionalT_openstudio__model__OutsideSurfaceConvectionAlgorithm_t", "openstudio::model::OptionalOutsideSurfaceConvectionAlgorithm *|boost::optional< openstudio::model::OutsideSurfaceConvectionAlgorithm > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ParentObject_t = {"_p_boost__optionalT_openstudio__model__ParentObject_t", "boost::optional< openstudio::model::ParentObject > *|openstudio::model::OptionalParentObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__PeopleDefinition_t = {"_p_boost__optionalT_openstudio__model__PeopleDefinition_t", "openstudio::model::OptionalPeopleDefinition *|boost::optional< openstudio::model::PeopleDefinition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__People_t = {"_p_boost__optionalT_openstudio__model__People_t", "boost::optional< openstudio::model::People > *|openstudio::model::OptionalPeople *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__PipeAdiabatic_t = {"_p_boost__optionalT_openstudio__model__PipeAdiabatic_t", "openstudio::model::OptionalPipeAdiabatic *|boost::optional< openstudio::model::PipeAdiabatic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__PlanarSurfaceGroup_t = {"_p_boost__optionalT_openstudio__model__PlanarSurfaceGroup_t", "boost::optional< openstudio::model::PlanarSurfaceGroup > *|openstudio::model::OptionalPlanarSurfaceGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__PlanarSurface_t = {"_p_boost__optionalT_openstudio__model__PlanarSurface_t", "openstudio::model::OptionalPlanarSurface *|boost::optional< openstudio::model::PlanarSurface > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__PlantLoop_t = {"_p_boost__optionalT_openstudio__model__PlantLoop_t", "openstudio::model::OptionalPlantLoop *|boost::optional< openstudio::model::PlantLoop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__PortList_t = {"_p_boost__optionalT_openstudio__model__PortList_t", "boost::optional< openstudio::model::PortList > *|openstudio::model::OptionalPortList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__PumpVariableSpeed_t = {"_p_boost__optionalT_openstudio__model__PumpVariableSpeed_t", "boost::optional< openstudio::model::PumpVariableSpeed > *|openstudio::model::OptionalPumpVariableSpeed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__RadianceParameters_t = {"_p_boost__optionalT_openstudio__model__RadianceParameters_t", "boost::optional< openstudio::model::RadianceParameters > *|openstudio::model::OptionalRadianceParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__RefractionExtinctionGlazing_t = {"_p_boost__optionalT_openstudio__model__RefractionExtinctionGlazing_t", "boost::optional< openstudio::model::RefractionExtinctionGlazing > *|openstudio::model::OptionalRefractionExtinctionGlazing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Relationship_t = {"_p_boost__optionalT_openstudio__model__Relationship_t", "boost::optional< openstudio::model::Relationship > *|openstudio::model::OptionalRelationship *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__RenderingColor_t = {"_p_boost__optionalT_openstudio__model__RenderingColor_t", "openstudio::model::OptionalRenderingColor *|boost::optional< openstudio::model::RenderingColor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ResourceObject_t = {"_p_boost__optionalT_openstudio__model__ResourceObject_t", "openstudio::model::OptionalResourceObject *|boost::optional< openstudio::model::ResourceObject > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__RoofVegetation_t = {"_p_boost__optionalT_openstudio__model__RoofVegetation_t", "openstudio::model::OptionalRoofVegetation *|boost::optional< openstudio::model::RoofVegetation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__RunPeriodControlDaylightSavingTime_t = {"_p_boost__optionalT_openstudio__model__RunPeriodControlDaylightSavingTime_t", "boost::optional< openstudio::model::RunPeriodControlDaylightSavingTime > *|openstudio::model::OptionalRunPeriodControlDaylightSavingTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__RunPeriodControlSpecialDays_t = {"_p_boost__optionalT_openstudio__model__RunPeriodControlSpecialDays_t", "boost::optional< openstudio::model::RunPeriodControlSpecialDays > *|openstudio::model::OptionalRunPeriodControlSpecialDays *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__RunPeriod_t = {"_p_boost__optionalT_openstudio__model__RunPeriod_t", "boost::optional< openstudio::model::RunPeriod > *|openstudio::model::OptionalRunPeriod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleBase_t = {"_p_boost__optionalT_openstudio__model__ScheduleBase_t", "boost::optional< openstudio::model::ScheduleBase > *|openstudio::model::OptionalScheduleBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleCompact_t = {"_p_boost__optionalT_openstudio__model__ScheduleCompact_t", "boost::optional< openstudio::model::ScheduleCompact > *|openstudio::model::OptionalScheduleCompact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleConstant_t = {"_p_boost__optionalT_openstudio__model__ScheduleConstant_t", "boost::optional< openstudio::model::ScheduleConstant > *|openstudio::model::OptionalScheduleConstant *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleDay_t = {"_p_boost__optionalT_openstudio__model__ScheduleDay_t", "boost::optional< openstudio::model::ScheduleDay > *|openstudio::model::OptionalScheduleDay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleFixedInterval_t = {"_p_boost__optionalT_openstudio__model__ScheduleFixedInterval_t", "boost::optional< openstudio::model::ScheduleFixedInterval > *|openstudio::model::OptionalScheduleFixedInterval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleInterval_t = {"_p_boost__optionalT_openstudio__model__ScheduleInterval_t", "boost::optional< openstudio::model::ScheduleInterval > *|openstudio::model::OptionalScheduleInterval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleRule_t = {"_p_boost__optionalT_openstudio__model__ScheduleRule_t", "boost::optional< openstudio::model::ScheduleRule > *|openstudio::model::OptionalScheduleRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleRuleset_t = {"_p_boost__optionalT_openstudio__model__ScheduleRuleset_t", "openstudio::model::OptionalScheduleRuleset *|boost::optional< openstudio::model::ScheduleRuleset > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleTypeLimits_t = {"_p_boost__optionalT_openstudio__model__ScheduleTypeLimits_t", "boost::optional< openstudio::model::ScheduleTypeLimits > *|openstudio::model::OptionalScheduleTypeLimits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleVariableInterval_t = {"_p_boost__optionalT_openstudio__model__ScheduleVariableInterval_t", "boost::optional< openstudio::model::ScheduleVariableInterval > *|openstudio::model::OptionalScheduleVariableInterval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleWeek_t = {"_p_boost__optionalT_openstudio__model__ScheduleWeek_t", "boost::optional< openstudio::model::ScheduleWeek > *|openstudio::model::OptionalScheduleWeek *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ScheduleYear_t = {"_p_boost__optionalT_openstudio__model__ScheduleYear_t", "boost::optional< openstudio::model::ScheduleYear > *|openstudio::model::OptionalScheduleYear *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Schedule_t = {"_p_boost__optionalT_openstudio__model__Schedule_t", "openstudio::model::OptionalSchedule *|boost::optional< openstudio::model::Schedule > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Screen_t = {"_p_boost__optionalT_openstudio__model__Screen_t", "openstudio::model::OptionalScreen *|boost::optional< openstudio::model::Screen > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SetpointManagerMixedAir_t = {"_p_boost__optionalT_openstudio__model__SetpointManagerMixedAir_t", "openstudio::model::OptionalSetpointManagerMixedAir *|boost::optional< openstudio::model::SetpointManagerMixedAir > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SetpointManagerSingleZoneReheat_t = {"_p_boost__optionalT_openstudio__model__SetpointManagerSingleZoneReheat_t", "openstudio::model::OptionalSetpointManagerSingleZoneReheat *|boost::optional< openstudio::model::SetpointManagerSingleZoneReheat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Shade_t = {"_p_boost__optionalT_openstudio__model__Shade_t", "openstudio::model::OptionalShade *|boost::optional< openstudio::model::Shade > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ShadingMaterial_t = {"_p_boost__optionalT_openstudio__model__ShadingMaterial_t", "openstudio::model::OptionalShadingMaterial *|boost::optional< openstudio::model::ShadingMaterial > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ShadingSurfaceGroup_t = {"_p_boost__optionalT_openstudio__model__ShadingSurfaceGroup_t", "boost::optional< openstudio::model::ShadingSurfaceGroup > *|openstudio::model::OptionalShadingSurfaceGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ShadingSurface_t = {"_p_boost__optionalT_openstudio__model__ShadingSurface_t", "boost::optional< openstudio::model::ShadingSurface > *|openstudio::model::OptionalShadingSurface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ShadowCalculation_t = {"_p_boost__optionalT_openstudio__model__ShadowCalculation_t", "openstudio::model::OptionalShadowCalculation *|boost::optional< openstudio::model::ShadowCalculation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SimpleGlazing_t = {"_p_boost__optionalT_openstudio__model__SimpleGlazing_t", "boost::optional< openstudio::model::SimpleGlazing > *|openstudio::model::OptionalSimpleGlazing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SimulationControl_t = {"_p_boost__optionalT_openstudio__model__SimulationControl_t", "openstudio::model::OptionalSimulationControl *|boost::optional< openstudio::model::SimulationControl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SiteGroundReflectance_t = {"_p_boost__optionalT_openstudio__model__SiteGroundReflectance_t", "boost::optional< openstudio::model::SiteGroundReflectance > *|openstudio::model::OptionalSiteGroundReflectance *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SiteGroundTemperatureBuildingSurface_t = {"_p_boost__optionalT_openstudio__model__SiteGroundTemperatureBuildingSurface_t", "openstudio::model::OptionalSiteGroundTemperatureBuildingSurface *|boost::optional< openstudio::model::SiteGroundTemperatureBuildingSurface > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SiteWaterMainsTemperature_t = {"_p_boost__optionalT_openstudio__model__SiteWaterMainsTemperature_t", "boost::optional< openstudio::model::SiteWaterMainsTemperature > *|openstudio::model::OptionalSiteWaterMainsTemperature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Site_t = {"_p_boost__optionalT_openstudio__model__Site_t", "boost::optional< openstudio::model::Site > *|openstudio::model::OptionalSite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SizingParameters_t = {"_p_boost__optionalT_openstudio__model__SizingParameters_t", "boost::optional< openstudio::model::SizingParameters > *|openstudio::model::OptionalSizingParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SizingPeriod_t = {"_p_boost__optionalT_openstudio__model__SizingPeriod_t", "boost::optional< openstudio::model::SizingPeriod > *|openstudio::model::OptionalSizingPeriod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SizingPlant_t = {"_p_boost__optionalT_openstudio__model__SizingPlant_t", "boost::optional< openstudio::model::SizingPlant > *|openstudio::model::OptionalSizingPlant *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SizingSystem_t = {"_p_boost__optionalT_openstudio__model__SizingSystem_t", "boost::optional< openstudio::model::SizingSystem > *|openstudio::model::OptionalSizingSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SizingZone_t = {"_p_boost__optionalT_openstudio__model__SizingZone_t", "boost::optional< openstudio::model::SizingZone > *|openstudio::model::OptionalSizingZone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SkyTemperature_t = {"_p_boost__optionalT_openstudio__model__SkyTemperature_t", "openstudio::model::OptionalSkyTemperature *|boost::optional< openstudio::model::SkyTemperature > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SpaceInfiltrationDesignFlowRate_t = {"_p_boost__optionalT_openstudio__model__SpaceInfiltrationDesignFlowRate_t", "boost::optional< openstudio::model::SpaceInfiltrationDesignFlowRate > *|openstudio::model::OptionalSpaceInfiltrationDesignFlowRate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t = {"_p_boost__optionalT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t", "openstudio::model::OptionalSpaceInfiltrationEffectiveLeakageArea *|boost::optional< openstudio::model::SpaceInfiltrationEffectiveLeakageArea > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SpaceItem_t = {"_p_boost__optionalT_openstudio__model__SpaceItem_t", "boost::optional< openstudio::model::SpaceItem > *|openstudio::model::OptionalSpaceItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SpaceLoadDefinition_t = {"_p_boost__optionalT_openstudio__model__SpaceLoadDefinition_t", "boost::optional< openstudio::model::SpaceLoadDefinition > *|openstudio::model::OptionalSpaceLoadDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SpaceLoadInstance_t = {"_p_boost__optionalT_openstudio__model__SpaceLoadInstance_t", "boost::optional< openstudio::model::SpaceLoadInstance > *|openstudio::model::OptionalSpaceLoadInstance *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SpaceLoad_t = {"_p_boost__optionalT_openstudio__model__SpaceLoad_t", "boost::optional< openstudio::model::SpaceLoad > *|openstudio::model::OptionalSpaceLoad *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SpaceType_t = {"_p_boost__optionalT_openstudio__model__SpaceType_t", "openstudio::model::OptionalSpaceType *|boost::optional< openstudio::model::SpaceType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Space_t = {"_p_boost__optionalT_openstudio__model__Space_t", "boost::optional< openstudio::model::Space > *|openstudio::model::OptionalSpace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Splitter_t = {"_p_boost__optionalT_openstudio__model__Splitter_t", "boost::optional< openstudio::model::Splitter > *|openstudio::model::OptionalSplitter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__StandardGlazing_t = {"_p_boost__optionalT_openstudio__model__StandardGlazing_t", "boost::optional< openstudio::model::StandardGlazing > *|openstudio::model::OptionalStandardGlazing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__StandardOpaqueMaterial_t = {"_p_boost__optionalT_openstudio__model__StandardOpaqueMaterial_t", "boost::optional< openstudio::model::StandardOpaqueMaterial > *|openstudio::model::OptionalStandardOpaqueMaterial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SteamEquipmentDefinition_t = {"_p_boost__optionalT_openstudio__model__SteamEquipmentDefinition_t", "boost::optional< openstudio::model::SteamEquipmentDefinition > *|openstudio::model::OptionalSteamEquipmentDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SteamEquipment_t = {"_p_boost__optionalT_openstudio__model__SteamEquipment_t", "boost::optional< openstudio::model::SteamEquipment > *|openstudio::model::OptionalSteamEquipment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__StraightComponent_t = {"_p_boost__optionalT_openstudio__model__StraightComponent_t", "boost::optional< openstudio::model::StraightComponent > *|openstudio::model::OptionalStraightComponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__SubSurface_t = {"_p_boost__optionalT_openstudio__model__SubSurface_t", "boost::optional< openstudio::model::SubSurface > *|openstudio::model::OptionalSubSurface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Surface_t = {"_p_boost__optionalT_openstudio__model__Surface_t", "boost::optional< openstudio::model::Surface > *|openstudio::model::OptionalSurface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ThermalZone_t = {"_p_boost__optionalT_openstudio__model__ThermalZone_t", "openstudio::model::OptionalThermalZone *|boost::optional< openstudio::model::ThermalZone > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ThermochromicGlazing_t = {"_p_boost__optionalT_openstudio__model__ThermochromicGlazing_t", "boost::optional< openstudio::model::ThermochromicGlazing > *|openstudio::model::OptionalThermochromicGlazing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ThermostatSetpointDualSetpoint_t = {"_p_boost__optionalT_openstudio__model__ThermostatSetpointDualSetpoint_t", "boost::optional< openstudio::model::ThermostatSetpointDualSetpoint > *|openstudio::model::OptionalThermostatSetpointDualSetpoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__TimeDependentValuation_t = {"_p_boost__optionalT_openstudio__model__TimeDependentValuation_t", "boost::optional< openstudio::model::TimeDependentValuation > *|openstudio::model::OptionalTimeDependentValuation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Timestep_t = {"_p_boost__optionalT_openstudio__model__Timestep_t", "boost::optional< openstudio::model::Timestep > *|openstudio::model::OptionalTimestep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__Version_t = {"_p_boost__optionalT_openstudio__model__Version_t", "openstudio::model::OptionalVersion *|boost::optional< openstudio::model::Version > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WaterHeaterMixed_t = {"_p_boost__optionalT_openstudio__model__WaterHeaterMixed_t", "openstudio::model::OptionalWaterHeaterMixed *|boost::optional< openstudio::model::WaterHeaterMixed > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WaterToAirComponent_t = {"_p_boost__optionalT_openstudio__model__WaterToAirComponent_t", "boost::optional< openstudio::model::WaterToAirComponent > *|openstudio::model::OptionalWaterToAirComponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WaterToWaterComponent_t = {"_p_boost__optionalT_openstudio__model__WaterToWaterComponent_t", "boost::optional< openstudio::model::WaterToWaterComponent > *|openstudio::model::OptionalWaterToWaterComponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WaterUseConnections_t = {"_p_boost__optionalT_openstudio__model__WaterUseConnections_t", "openstudio::model::OptionalWaterUseConnections *|boost::optional< openstudio::model::WaterUseConnections > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WaterUseEquipmentDefinition_t = {"_p_boost__optionalT_openstudio__model__WaterUseEquipmentDefinition_t", "openstudio::model::OptionalWaterUseEquipmentDefinition *|boost::optional< openstudio::model::WaterUseEquipmentDefinition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WaterUseEquipment_t = {"_p_boost__optionalT_openstudio__model__WaterUseEquipment_t", "boost::optional< openstudio::model::WaterUseEquipment > *|openstudio::model::OptionalWaterUseEquipment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WeatherFileConditionType_t = {"_p_boost__optionalT_openstudio__model__WeatherFileConditionType_t", "openstudio::model::OptionalWeatherFileConditionType *|boost::optional< openstudio::model::WeatherFileConditionType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WeatherFileDays_t = {"_p_boost__optionalT_openstudio__model__WeatherFileDays_t", "boost::optional< openstudio::model::WeatherFileDays > *|openstudio::model::OptionalWeatherFileDays *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WeatherFile_t = {"_p_boost__optionalT_openstudio__model__WeatherFile_t", "boost::optional< openstudio::model::WeatherFile > *|openstudio::model::OptionalWeatherFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__WindowDataFile_t = {"_p_boost__optionalT_openstudio__model__WindowDataFile_t", "boost::optional< openstudio::model::WindowDataFile > *|openstudio::model::OptionalWindowDataFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__YearDescription_t = {"_p_boost__optionalT_openstudio__model__YearDescription_t", "boost::optional< openstudio::model::YearDescription > *|openstudio::model::OptionalYearDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneAirContaminantBalance_t = {"_p_boost__optionalT_openstudio__model__ZoneAirContaminantBalance_t", "openstudio::model::OptionalZoneAirContaminantBalance *|boost::optional< openstudio::model::ZoneAirContaminantBalance > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t = {"_p_boost__optionalT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t", "openstudio::model::OptionalZoneAirHeatBalanceAlgorithm *|boost::optional< openstudio::model::ZoneAirHeatBalanceAlgorithm > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t = {"_p_boost__optionalT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t", "boost::optional< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial > *|openstudio::model::OptionalZoneCapacitanceMultiplierResearchSpecial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneHVACComponent_t = {"_p_boost__optionalT_openstudio__model__ZoneHVACComponent_t", "boost::optional< openstudio::model::ZoneHVACComponent > *|openstudio::model::OptionalZoneHVACComponent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneHVACEquipmentList_t = {"_p_boost__optionalT_openstudio__model__ZoneHVACEquipmentList_t", "openstudio::model::OptionalZoneHVACEquipmentList *|boost::optional< openstudio::model::ZoneHVACEquipmentList > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneHVACFourPipeFanCoil_t = {"_p_boost__optionalT_openstudio__model__ZoneHVACFourPipeFanCoil_t", "openstudio::model::OptionalZoneHVACFourPipeFanCoil *|boost::optional< openstudio::model::ZoneHVACFourPipeFanCoil > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t = {"_p_boost__optionalT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t", "openstudio::model::OptionalZoneHVACIdealLoadsAirSystem *|boost::optional< openstudio::model::ZoneHVACIdealLoadsAirSystem > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t = {"_p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t", "boost::optional< openstudio::model::ZoneHVACPackagedTerminalAirConditioner > *|openstudio::model::OptionalZoneHVACPackagedTerminalAirConditioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t = {"_p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t", "boost::optional< openstudio::model::ZoneHVACPackagedTerminalHeatPump > *|openstudio::model::OptionalZoneHVACPackagedTerminalHeatPump *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t_t = {"_p_boost__optionalT_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t_t", "boost::optional< std::set< openstudio::IddObjectType,std::less< openstudio::IddObjectType >,std::allocator< openstudio::IddObjectType > > > *|openstudio::OptionalIddObjectTypeSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_std__string_t = {"_p_boost__optionalT_std__string_t", "boost::optional< std::string > *|openstudio::OptionalString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t_t = {"_p_boost__optionalT_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t_t", "boost::optional< std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > > > *|openstudio::OptionalIddObjectTypeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t_t = {"_p_boost__optionalT_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t_t", "boost::optional< std::vector< openstudio::UUID,std::allocator< openstudio::UUID > > > *|openstudio::OptionalHandleVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__optionalT_unsigned_int_t = {"_p_boost__optionalT_unsigned_int_t", "openstudio::OptionalUnsigned *|boost::optional< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__EndUses = {"_p_openstudio__EndUses", "openstudio::EndUses *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__SingletonT_openstudio__ApplicationSingleton_t = {"_p_openstudio__SingletonT_openstudio__ApplicationSingleton_t", "openstudio::Application *|openstudio::Singleton< openstudio::ApplicationSingleton > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__SingletonT_openstudio__LoggerSingleton_t = {"_p_openstudio__SingletonT_openstudio__LoggerSingleton_t", "openstudio::Logger *|openstudio::Singleton< openstudio::LoggerSingleton > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__SingletonT_openstudio__model__ScheduleTypeRegistrySingleton_t = {"_p_openstudio__SingletonT_openstudio__model__ScheduleTypeRegistrySingleton_t", "openstudio::Singleton< openstudio::model::ScheduleTypeRegistrySingleton > *|openstudio::model::ScheduleTypeRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__UUID = {"_p_openstudio__UUID", "openstudio::UUID *|openstudio::Handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__isomodel__ForwardTranslator = {"_p_openstudio__isomodel__ForwardTranslator", "openstudio::isomodel::ForwardTranslator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__isomodel__SimModel = {"_p_openstudio__isomodel__SimModel", "openstudio::isomodel::SimModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__isomodel__UserModel = {"_p_openstudio__isomodel__UserModel", "openstudio::isomodel::UserModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__model__Model = {"_p_openstudio__model__Model", "openstudio::model::Model *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openstudio__model__Component = {"_p_openstudio__model__Component", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_openstudio__UUID_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_std__pairT_openstudio__UUID_const_openstudio__UUID_t_t_t = {"_p_std__mapT_openstudio__UUID_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_std__pairT_openstudio__UUID_const_openstudio__UUID_t_t_t", "std::map< openstudio::UUID,openstudio::UUID,std::less< openstudio::UUID >,std::allocator< std::pair< openstudio::UUID const,openstudio::UUID > > > *|openstudio::HandleMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_openstudio__IdfObject_openstudio__IdfObject_t = {"_p_std__pairT_openstudio__IdfObject_openstudio__IdfObject_t", "std::pair< openstudio::IdfObject,openstudio::IdfObject > *|openstudio::IdfObjectPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "openstudio::StringPair *|std::pair< std::string,std::string > *|openstudio::model::ScheduleTypeKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_double_std__lessT_double_t_std__allocatorT_double_t_t = {"_p_std__setT_double_std__lessT_double_t_std__allocatorT_double_t_t", "std::set< double,std::less< double >,std::allocator< double > > *|openstudio::DoubleSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t = {"_p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t", "openstudio::IntSet *|std::set< int,std::less< int >,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_openstudio__DataError_openstudio__DataErrorLess_std__allocatorT_openstudio__DataError_t_t = {"_p_std__setT_openstudio__DataError_openstudio__DataErrorLess_std__allocatorT_openstudio__DataError_t_t", "openstudio::DataErrorSet *|std::set< openstudio::DataError,openstudio::DataErrorLess,std::allocator< openstudio::DataError > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t = {"_p_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t", "std::set< openstudio::IddObjectType,std::less< openstudio::IddObjectType >,std::allocator< openstudio::IddObjectType > > *|openstudio::IddObjectTypeSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_openstudio__ReportingFrequency_std__lessT_openstudio__ReportingFrequency_t_std__allocatorT_openstudio__ReportingFrequency_t_t = {"_p_std__setT_openstudio__ReportingFrequency_std__lessT_openstudio__ReportingFrequency_t_std__allocatorT_openstudio__ReportingFrequency_t_t", "std::set< openstudio::ReportingFrequency,std::less< openstudio::ReportingFrequency >,std::allocator< openstudio::ReportingFrequency > > *|openstudio::ReportingFrequencySet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_openstudio__UUID_t_t = {"_p_std__setT_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_openstudio__UUID_t_t", "std::set< openstudio::UUID,std::less< openstudio::UUID >,std::allocator< openstudio::UUID > > *|openstudio::HandleSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_IstringCompare_std__allocatorT_std__string_t_t = {"_p_std__setT_std__string_IstringCompare_std__allocatorT_std__string_t_t", "std::set< std::string,IstringCompare,std::allocator< std::string > > *|openstudio::IStringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t = {"_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t", "std::set< std::string,std::less< std::string >,std::allocator< std::string > > *|openstudio::StringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t = {"_p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t", "std::set< unsigned int,std::less< unsigned int >,std::allocator< unsigned int > > *|openstudio::UnsignedSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "openstudio::LogChannel *|std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t = {"_p_std__vectorT_bool_std__allocatorT_bool_t_t", "std::vector< bool,std::allocator< bool > > *|openstudio::BoolVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|openstudio::DoubleVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|openstudio::IntVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__AttributeDescription_std__allocatorT_openstudio__AttributeDescription_t_t = {"_p_std__vectorT_openstudio__AttributeDescription_std__allocatorT_openstudio__AttributeDescription_t_t", "std::vector< openstudio::AttributeDescription,std::allocator< openstudio::AttributeDescription > > *|openstudio::AttributeDescriptionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Attribute_std__allocatorT_openstudio__Attribute_t_t = {"_p_std__vectorT_openstudio__Attribute_std__allocatorT_openstudio__Attribute_t_t", "std::vector< openstudio::Attribute,std::allocator< openstudio::Attribute > > *|openstudio::AttributeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__BCLMeasure_std__allocatorT_openstudio__BCLMeasure_t_t = {"_p_std__vectorT_openstudio__BCLMeasure_std__allocatorT_openstudio__BCLMeasure_t_t", "std::vector< openstudio::BCLMeasure,std::allocator< openstudio::BCLMeasure > > *|openstudio::BCLMeasureVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__BTUUnit_std__allocatorT_openstudio__BTUUnit_t_t = {"_p_std__vectorT_openstudio__BTUUnit_std__allocatorT_openstudio__BTUUnit_t_t", "std::vector< openstudio::BTUUnit,std::allocator< openstudio::BTUUnit > > *|openstudio::BTUUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__BoundingBox_std__allocatorT_openstudio__BoundingBox_t_t = {"_p_std__vectorT_openstudio__BoundingBox_std__allocatorT_openstudio__BoundingBox_t_t", "std::vector< openstudio::BoundingBox,std::allocator< openstudio::BoundingBox > > *|openstudio::BoundingBoxVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__CFMUnit_std__allocatorT_openstudio__CFMUnit_t_t = {"_p_std__vectorT_openstudio__CFMUnit_std__allocatorT_openstudio__CFMUnit_t_t", "std::vector< openstudio::CFMUnit,std::allocator< openstudio::CFMUnit > > *|openstudio::CFMUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Calendar_std__allocatorT_openstudio__Calendar_t_t = {"_p_std__vectorT_openstudio__Calendar_std__allocatorT_openstudio__Calendar_t_t", "std::vector< openstudio::Calendar,std::allocator< openstudio::Calendar > > *|openstudio::CalendarVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__CelciusUnit_std__allocatorT_openstudio__CelciusUnit_t_t = {"_p_std__vectorT_openstudio__CelciusUnit_std__allocatorT_openstudio__CelciusUnit_t_t", "std::vector< openstudio::CelciusUnit,std::allocator< openstudio::CelciusUnit > > *|openstudio::CelciusUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__DataError_std__allocatorT_openstudio__DataError_t_t = {"_p_std__vectorT_openstudio__DataError_std__allocatorT_openstudio__DataError_t_t", "std::vector< openstudio::DataError,std::allocator< openstudio::DataError > > *|openstudio::DataErrorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__DateTime_std__allocatorT_openstudio__DateTime_t_t = {"_p_std__vectorT_openstudio__DateTime_std__allocatorT_openstudio__DateTime_t_t", "std::vector< openstudio::DateTime,std::allocator< openstudio::DateTime > > *|openstudio::DateTimeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Date_std__allocatorT_openstudio__Date_t_t = {"_p_std__vectorT_openstudio__Date_std__allocatorT_openstudio__Date_t_t", "std::vector< openstudio::Date,std::allocator< openstudio::Date > > *|openstudio::DateVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__DocumentElement_std__allocatorT_openstudio__DocumentElement_t_t = {"_p_std__vectorT_openstudio__DocumentElement_std__allocatorT_openstudio__DocumentElement_t_t", "std::vector< openstudio::DocumentElement,std::allocator< openstudio::DocumentElement > > *|openstudio::DocumentElementVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__EulerAngles_std__allocatorT_openstudio__EulerAngles_t_t = {"_p_std__vectorT_openstudio__EulerAngles_std__allocatorT_openstudio__EulerAngles_t_t", "std::vector< openstudio::EulerAngles,std::allocator< openstudio::EulerAngles > > *|openstudio::EulerAnglesVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__FahrenheitUnit_std__allocatorT_openstudio__FahrenheitUnit_t_t = {"_p_std__vectorT_openstudio__FahrenheitUnit_std__allocatorT_openstudio__FahrenheitUnit_t_t", "std::vector< openstudio::FahrenheitUnit,std::allocator< openstudio::FahrenheitUnit > > *|openstudio::FahrenheitUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__FileReference_std__allocatorT_openstudio__FileReference_t_t = {"_p_std__vectorT_openstudio__FileReference_std__allocatorT_openstudio__FileReference_t_t", "std::vector< openstudio::FileReference,std::allocator< openstudio::FileReference > > *|openstudio::FileReferenceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__FuelType_std__allocatorT_openstudio__FuelType_t_t = {"_p_std__vectorT_openstudio__FuelType_std__allocatorT_openstudio__FuelType_t_t", "std::vector< openstudio::FuelType,std::allocator< openstudio::FuelType > > *|openstudio::FuelTypeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__GPDUnit_std__allocatorT_openstudio__GPDUnit_t_t = {"_p_std__vectorT_openstudio__GPDUnit_std__allocatorT_openstudio__GPDUnit_t_t", "std::vector< openstudio::GPDUnit,std::allocator< openstudio::GPDUnit > > *|openstudio::GPDUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IPUnit_std__allocatorT_openstudio__IPUnit_t_t = {"_p_std__vectorT_openstudio__IPUnit_std__allocatorT_openstudio__IPUnit_t_t", "std::vector< openstudio::IPUnit,std::allocator< openstudio::IPUnit > > *|openstudio::IPUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IddField_std__allocatorT_openstudio__IddField_t_t = {"_p_std__vectorT_openstudio__IddField_std__allocatorT_openstudio__IddField_t_t", "std::vector< openstudio::IddField,std::allocator< openstudio::IddField > > *|openstudio::IddFieldVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IddFile_std__allocatorT_openstudio__IddFile_t_t = {"_p_std__vectorT_openstudio__IddFile_std__allocatorT_openstudio__IddFile_t_t", "std::vector< openstudio::IddFile,std::allocator< openstudio::IddFile > > *|openstudio::IddFileVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IddKey_std__allocatorT_openstudio__IddKey_t_t = {"_p_std__vectorT_openstudio__IddKey_std__allocatorT_openstudio__IddKey_t_t", "std::vector< openstudio::IddKey,std::allocator< openstudio::IddKey > > *|openstudio::IddKeyVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t = {"_p_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t", "std::vector< openstudio::IddObjectType,std::allocator< openstudio::IddObjectType > > *|openstudio::IddObjectTypeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IddObject_std__allocatorT_openstudio__IddObject_t_t = {"_p_std__vectorT_openstudio__IddObject_std__allocatorT_openstudio__IddObject_t_t", "std::vector< openstudio::IddObject,std::allocator< openstudio::IddObject > > *|openstudio::IddObjectVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IdfExtensibleGroup_std__allocatorT_openstudio__IdfExtensibleGroup_t_t = {"_p_std__vectorT_openstudio__IdfExtensibleGroup_std__allocatorT_openstudio__IdfExtensibleGroup_t_t", "std::vector< openstudio::IdfExtensibleGroup,std::allocator< openstudio::IdfExtensibleGroup > > *|openstudio::IdfExtensibleGroupVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IdfFile_std__allocatorT_openstudio__IdfFile_t_t = {"_p_std__vectorT_openstudio__IdfFile_std__allocatorT_openstudio__IdfFile_t_t", "std::vector< openstudio::IdfFile,std::allocator< openstudio::IdfFile > > *|openstudio::IdfFileVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__IdfObject_std__allocatorT_openstudio__IdfObject_t_t = {"_p_std__vectorT_openstudio__IdfObject_std__allocatorT_openstudio__IdfObject_t_t", "std::vector< openstudio::IdfObject,std::allocator< openstudio::IdfObject > > *|openstudio::IdfObjectVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__ImfFile_std__allocatorT_openstudio__ImfFile_t_t = {"_p_std__vectorT_openstudio__ImfFile_std__allocatorT_openstudio__ImfFile_t_t", "std::vector< openstudio::ImfFile,std::allocator< openstudio::ImfFile > > *|openstudio::ImfFileVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__MPHUnit_std__allocatorT_openstudio__MPHUnit_t_t = {"_p_std__vectorT_openstudio__MPHUnit_std__allocatorT_openstudio__MPHUnit_t_t", "std::vector< openstudio::MPHUnit,std::allocator< openstudio::MPHUnit > > *|openstudio::MPHUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Misc1Unit_std__allocatorT_openstudio__Misc1Unit_t_t = {"_p_std__vectorT_openstudio__Misc1Unit_std__allocatorT_openstudio__Misc1Unit_t_t", "std::vector< openstudio::Misc1Unit,std::allocator< openstudio::Misc1Unit > > *|openstudio::Misc1UnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Plane_std__allocatorT_openstudio__Plane_t_t = {"_p_std__vectorT_openstudio__Plane_std__allocatorT_openstudio__Plane_t_t", "std::vector< openstudio::Plane,std::allocator< openstudio::Plane > > *|openstudio::PlaneVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Point3d_std__allocatorT_openstudio__Point3d_t_t = {"_p_std__vectorT_openstudio__Point3d_std__allocatorT_openstudio__Point3d_t_t", "std::vector< openstudio::Point3d,std::allocator< openstudio::Point3d > > *|openstudio::Point3dVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Quantity_std__allocatorT_openstudio__Quantity_t_t = {"_p_std__vectorT_openstudio__Quantity_std__allocatorT_openstudio__Quantity_t_t", "std::vector< openstudio::Quantity,std::allocator< openstudio::Quantity > > *|openstudio::QuantityVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__ReportingFrequency_std__allocatorT_openstudio__ReportingFrequency_t_t = {"_p_std__vectorT_openstudio__ReportingFrequency_std__allocatorT_openstudio__ReportingFrequency_t_t", "std::vector< openstudio::ReportingFrequency,std::allocator< openstudio::ReportingFrequency > > *|openstudio::ReportingFrequencyVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__SIUnit_std__allocatorT_openstudio__SIUnit_t_t = {"_p_std__vectorT_openstudio__SIUnit_std__allocatorT_openstudio__SIUnit_t_t", "std::vector< openstudio::SIUnit,std::allocator< openstudio::SIUnit > > *|openstudio::SIUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__SectionElement_std__allocatorT_openstudio__SectionElement_t_t = {"_p_std__vectorT_openstudio__SectionElement_std__allocatorT_openstudio__SectionElement_t_t", "std::vector< openstudio::SectionElement,std::allocator< openstudio::SectionElement > > *|openstudio::SectionElementVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Section_std__allocatorT_openstudio__Section_t_t = {"_p_std__vectorT_openstudio__Section_std__allocatorT_openstudio__Section_t_t", "std::vector< openstudio::Section,std::allocator< openstudio::Section > > *|openstudio::SectionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__SqlFileTimeSeriesQuery_std__allocatorT_openstudio__SqlFileTimeSeriesQuery_t_t = {"_p_std__vectorT_openstudio__SqlFileTimeSeriesQuery_std__allocatorT_openstudio__SqlFileTimeSeriesQuery_t_t", "std::vector< openstudio::SqlFileTimeSeriesQuery,std::allocator< openstudio::SqlFileTimeSeriesQuery > > *|openstudio::SqlFileTimeSeriesQueryVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__TableElement_std__allocatorT_openstudio__TableElement_t_t = {"_p_std__vectorT_openstudio__TableElement_std__allocatorT_openstudio__TableElement_t_t", "std::vector< openstudio::TableElement,std::allocator< openstudio::TableElement > > *|openstudio::TableRow *|openstudio::TableElementVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Table_std__allocatorT_openstudio__Table_t_t = {"_p_std__vectorT_openstudio__Table_std__allocatorT_openstudio__Table_t_t", "std::vector< openstudio::Table,std::allocator< openstudio::Table > > *|openstudio::TableVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Tag_std__allocatorT_openstudio__Tag_t_t = {"_p_std__vectorT_openstudio__Tag_std__allocatorT_openstudio__Tag_t_t", "std::vector< openstudio::Tag,std::allocator< openstudio::Tag > > *|openstudio::TagVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__TemperatureUnit_std__allocatorT_openstudio__TemperatureUnit_t_t = {"_p_std__vectorT_openstudio__TemperatureUnit_std__allocatorT_openstudio__TemperatureUnit_t_t", "std::vector< openstudio::TemperatureUnit,std::allocator< openstudio::TemperatureUnit > > *|openstudio::TemperatureUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Text_std__allocatorT_openstudio__Text_t_t = {"_p_std__vectorT_openstudio__Text_std__allocatorT_openstudio__Text_t_t", "std::vector< openstudio::Text,std::allocator< openstudio::Text > > *|openstudio::TextVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__ThermUnit_std__allocatorT_openstudio__ThermUnit_t_t = {"_p_std__vectorT_openstudio__ThermUnit_std__allocatorT_openstudio__ThermUnit_t_t", "std::vector< openstudio::ThermUnit,std::allocator< openstudio::ThermUnit > > *|openstudio::ThermUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__TimeSeries_std__allocatorT_openstudio__TimeSeries_t_t = {"_p_std__vectorT_openstudio__TimeSeries_std__allocatorT_openstudio__TimeSeries_t_t", "std::vector< openstudio::TimeSeries,std::allocator< openstudio::TimeSeries > > *|openstudio::TimeSeriesVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Time_std__allocatorT_openstudio__Time_t_t = {"_p_std__vectorT_openstudio__Time_std__allocatorT_openstudio__Time_t_t", "std::vector< openstudio::Time,std::allocator< openstudio::Time > > *|openstudio::TimeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Transformation_std__allocatorT_openstudio__Transformation_t_t = {"_p_std__vectorT_openstudio__Transformation_std__allocatorT_openstudio__Transformation_t_t", "std::vector< openstudio::Transformation,std::allocator< openstudio::Transformation > > *|openstudio::TransformationVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t = {"_p_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t", "std::vector< openstudio::UUID,std::allocator< openstudio::UUID > > *|openstudio::HandleVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Unit_std__allocatorT_openstudio__Unit_t_t = {"_p_std__vectorT_openstudio__Unit_std__allocatorT_openstudio__Unit_t_t", "std::vector< openstudio::Unit,std::allocator< openstudio::Unit > > *|openstudio::UnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Vector3d_std__allocatorT_openstudio__Vector3d_t_t = {"_p_std__vectorT_openstudio__Vector3d_std__allocatorT_openstudio__Vector3d_t_t", "std::vector< openstudio::Vector3d,std::allocator< openstudio::Vector3d > > *|openstudio::Vector3dVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__WhUnit_std__allocatorT_openstudio__WhUnit_t_t = {"_p_std__vectorT_openstudio__WhUnit_std__allocatorT_openstudio__WhUnit_t_t", "std::vector< openstudio::WhUnit,std::allocator< openstudio::WhUnit > > *|openstudio::WhUnitVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__WorkspaceObject_std__allocatorT_openstudio__WorkspaceObject_t_t = {"_p_std__vectorT_openstudio__WorkspaceObject_std__allocatorT_openstudio__WorkspaceObject_t_t", "std::vector< openstudio::WorkspaceObject,std::allocator< openstudio::WorkspaceObject > > *|openstudio::WorkspaceObjectVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__Workspace_std__allocatorT_openstudio__Workspace_t_t = {"_p_std__vectorT_openstudio__Workspace_std__allocatorT_openstudio__Workspace_t_t", "std::vector< openstudio::Workspace,std::allocator< openstudio::Workspace > > *|openstudio::WorkspaceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirGap_std__allocatorT_openstudio__model__AirGap_t_t = {"_p_std__vectorT_openstudio__model__AirGap_std__allocatorT_openstudio__model__AirGap_t_t", "std::vector< openstudio::model::AirGap,std::allocator< openstudio::model::AirGap > > *|openstudio::model::AirGapVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirLoopHVACOutdoorAirSystem_std__allocatorT_openstudio__model__AirLoopHVACOutdoorAirSystem_t_t = {"_p_std__vectorT_openstudio__model__AirLoopHVACOutdoorAirSystem_std__allocatorT_openstudio__model__AirLoopHVACOutdoorAirSystem_t_t", "std::vector< openstudio::model::AirLoopHVACOutdoorAirSystem,std::allocator< openstudio::model::AirLoopHVACOutdoorAirSystem > > *|openstudio::model::AirLoopHVACOutdoorAirSystemVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_std__allocatorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t_t = {"_p_std__vectorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_std__allocatorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t_t", "openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAirVector *|std::vector< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir,std::allocator< openstudio::model::AirLoopHVACUnitaryHeatPumpAirToAir > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirLoopHVACZoneMixer_std__allocatorT_openstudio__model__AirLoopHVACZoneMixer_t_t = {"_p_std__vectorT_openstudio__model__AirLoopHVACZoneMixer_std__allocatorT_openstudio__model__AirLoopHVACZoneMixer_t_t", "std::vector< openstudio::model::AirLoopHVACZoneMixer,std::allocator< openstudio::model::AirLoopHVACZoneMixer > > *|openstudio::model::AirLoopHVACZoneMixerVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirLoopHVACZoneSplitter_std__allocatorT_openstudio__model__AirLoopHVACZoneSplitter_t_t = {"_p_std__vectorT_openstudio__model__AirLoopHVACZoneSplitter_std__allocatorT_openstudio__model__AirLoopHVACZoneSplitter_t_t", "std::vector< openstudio::model::AirLoopHVACZoneSplitter,std::allocator< openstudio::model::AirLoopHVACZoneSplitter > > *|openstudio::model::AirLoopHVACZoneSplitterVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirLoopHVAC_std__allocatorT_openstudio__model__AirLoopHVAC_t_t = {"_p_std__vectorT_openstudio__model__AirLoopHVAC_std__allocatorT_openstudio__model__AirLoopHVAC_t_t", "std::vector< openstudio::model::AirLoopHVAC,std::allocator< openstudio::model::AirLoopHVAC > > *|openstudio::model::AirLoopHVACVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_std__allocatorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t_t = {"_p_std__vectorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_std__allocatorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t_t", "std::vector< openstudio::model::AirTerminalSingleDuctParallelPIUReheat,std::allocator< openstudio::model::AirTerminalSingleDuctParallelPIUReheat > > *|openstudio::model::AirTerminalSingleDuctParallelPIUReheatVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirTerminalSingleDuctUncontrolled_std__allocatorT_openstudio__model__AirTerminalSingleDuctUncontrolled_t_t = {"_p_std__vectorT_openstudio__model__AirTerminalSingleDuctUncontrolled_std__allocatorT_openstudio__model__AirTerminalSingleDuctUncontrolled_t_t", "std::vector< openstudio::model::AirTerminalSingleDuctUncontrolled,std::allocator< openstudio::model::AirTerminalSingleDuctUncontrolled > > *|openstudio::model::AirTerminalSingleDuctUncontrolledVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AirWallMaterial_std__allocatorT_openstudio__model__AirWallMaterial_t_t = {"_p_std__vectorT_openstudio__model__AirWallMaterial_std__allocatorT_openstudio__model__AirWallMaterial_t_t", "std::vector< openstudio::model::AirWallMaterial,std::allocator< openstudio::model::AirWallMaterial > > *|openstudio::model::AirWallMaterialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__AvailabilityManagerScheduled_std__allocatorT_openstudio__model__AvailabilityManagerScheduled_t_t = {"_p_std__vectorT_openstudio__model__AvailabilityManagerScheduled_std__allocatorT_openstudio__model__AvailabilityManagerScheduled_t_t", "std::vector< openstudio::model::AvailabilityManagerScheduled,std::allocator< openstudio::model::AvailabilityManagerScheduled > > *|openstudio::model::AvailabilityManagerScheduledVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Blind_std__allocatorT_openstudio__model__Blind_t_t = {"_p_std__vectorT_openstudio__model__Blind_std__allocatorT_openstudio__model__Blind_t_t", "std::vector< openstudio::model::Blind,std::allocator< openstudio::model::Blind > > *|openstudio::model::BlindVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__BoilerHotWater_std__allocatorT_openstudio__model__BoilerHotWater_t_t = {"_p_std__vectorT_openstudio__model__BoilerHotWater_std__allocatorT_openstudio__model__BoilerHotWater_t_t", "std::vector< openstudio::model::BoilerHotWater,std::allocator< openstudio::model::BoilerHotWater > > *|openstudio::model::BoilerHotWaterVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__BuildingStory_std__allocatorT_openstudio__model__BuildingStory_t_t = {"_p_std__vectorT_openstudio__model__BuildingStory_std__allocatorT_openstudio__model__BuildingStory_t_t", "std::vector< openstudio::model::BuildingStory,std::allocator< openstudio::model::BuildingStory > > *|openstudio::model::BuildingStoryVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Building_std__allocatorT_openstudio__model__Building_t_t = {"_p_std__vectorT_openstudio__model__Building_std__allocatorT_openstudio__model__Building_t_t", "std::vector< openstudio::model::Building,std::allocator< openstudio::model::Building > > *|openstudio::model::BuildingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CFactorUndergroundWallConstruction_std__allocatorT_openstudio__model__CFactorUndergroundWallConstruction_t_t = {"_p_std__vectorT_openstudio__model__CFactorUndergroundWallConstruction_std__allocatorT_openstudio__model__CFactorUndergroundWallConstruction_t_t", "std::vector< openstudio::model::CFactorUndergroundWallConstruction,std::allocator< openstudio::model::CFactorUndergroundWallConstruction > > *|openstudio::model::CFactorUndergroundWallConstructionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ChillerElectricEIR_std__allocatorT_openstudio__model__ChillerElectricEIR_t_t = {"_p_std__vectorT_openstudio__model__ChillerElectricEIR_std__allocatorT_openstudio__model__ChillerElectricEIR_t_t", "std::vector< openstudio::model::ChillerElectricEIR,std::allocator< openstudio::model::ChillerElectricEIR > > *|openstudio::model::ChillerElectricEIRVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ClimateZone_std__allocatorT_openstudio__model__ClimateZone_t_t = {"_p_std__vectorT_openstudio__model__ClimateZone_std__allocatorT_openstudio__model__ClimateZone_t_t", "std::vector< openstudio::model::ClimateZone,std::allocator< openstudio::model::ClimateZone > > *|openstudio::model::ClimateZoneVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CoilCoolingDXSingleSpeed_std__allocatorT_openstudio__model__CoilCoolingDXSingleSpeed_t_t = {"_p_std__vectorT_openstudio__model__CoilCoolingDXSingleSpeed_std__allocatorT_openstudio__model__CoilCoolingDXSingleSpeed_t_t", "std::vector< openstudio::model::CoilCoolingDXSingleSpeed,std::allocator< openstudio::model::CoilCoolingDXSingleSpeed > > *|openstudio::model::CoilCoolingDXSingleSpeedVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CoilCoolingDXTwoSpeed_std__allocatorT_openstudio__model__CoilCoolingDXTwoSpeed_t_t = {"_p_std__vectorT_openstudio__model__CoilCoolingDXTwoSpeed_std__allocatorT_openstudio__model__CoilCoolingDXTwoSpeed_t_t", "std::vector< openstudio::model::CoilCoolingDXTwoSpeed,std::allocator< openstudio::model::CoilCoolingDXTwoSpeed > > *|openstudio::model::CoilCoolingDXTwoSpeedVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CoilHeatingDXSingleSpeed_std__allocatorT_openstudio__model__CoilHeatingDXSingleSpeed_t_t = {"_p_std__vectorT_openstudio__model__CoilHeatingDXSingleSpeed_std__allocatorT_openstudio__model__CoilHeatingDXSingleSpeed_t_t", "std::vector< openstudio::model::CoilHeatingDXSingleSpeed,std::allocator< openstudio::model::CoilHeatingDXSingleSpeed > > *|openstudio::model::CoilHeatingDXSingleSpeedVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CoilHeatingElectric_std__allocatorT_openstudio__model__CoilHeatingElectric_t_t = {"_p_std__vectorT_openstudio__model__CoilHeatingElectric_std__allocatorT_openstudio__model__CoilHeatingElectric_t_t", "std::vector< openstudio::model::CoilHeatingElectric,std::allocator< openstudio::model::CoilHeatingElectric > > *|openstudio::model::CoilHeatingElectricVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CoilHeatingGas_std__allocatorT_openstudio__model__CoilHeatingGas_t_t = {"_p_std__vectorT_openstudio__model__CoilHeatingGas_std__allocatorT_openstudio__model__CoilHeatingGas_t_t", "std::vector< openstudio::model::CoilHeatingGas,std::allocator< openstudio::model::CoilHeatingGas > > *|openstudio::model::CoilHeatingGasVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ComponentCost_LineItem_std__allocatorT_openstudio__model__ComponentCost_LineItem_t_t = {"_p_std__vectorT_openstudio__model__ComponentCost_LineItem_std__allocatorT_openstudio__model__ComponentCost_LineItem_t_t", "std::vector< openstudio::model::ComponentCost_LineItem,std::allocator< openstudio::model::ComponentCost_LineItem > > *|openstudio::model::ComponentCost_LineItemVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ComponentData_std__allocatorT_openstudio__model__ComponentData_t_t = {"_p_std__vectorT_openstudio__model__ComponentData_std__allocatorT_openstudio__model__ComponentData_t_t", "std::vector< openstudio::model::ComponentData,std::allocator< openstudio::model::ComponentData > > *|openstudio::model::ComponentDataVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Component_std__allocatorT_openstudio__model__Component_t_t = {"_p_std__vectorT_openstudio__model__Component_std__allocatorT_openstudio__model__Component_t_t", "std::vector< openstudio::model::Component,std::allocator< openstudio::model::Component > > *|openstudio::model::ComponentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ConstructionBaseStandardsInformation_std__allocatorT_openstudio__model__ConstructionBaseStandardsInformation_t_t = {"_p_std__vectorT_openstudio__model__ConstructionBaseStandardsInformation_std__allocatorT_openstudio__model__ConstructionBaseStandardsInformation_t_t", "std::vector< openstudio::model::ConstructionBaseStandardsInformation,std::allocator< openstudio::model::ConstructionBaseStandardsInformation > > *|openstudio::model::ConstructionBaseStandardsInformationVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ConstructionBase_std__allocatorT_openstudio__model__ConstructionBase_t_t = {"_p_std__vectorT_openstudio__model__ConstructionBase_std__allocatorT_openstudio__model__ConstructionBase_t_t", "std::vector< openstudio::model::ConstructionBase,std::allocator< openstudio::model::ConstructionBase > > *|openstudio::model::ConstructionBaseVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ConstructionWithInternalSource_std__allocatorT_openstudio__model__ConstructionWithInternalSource_t_t = {"_p_std__vectorT_openstudio__model__ConstructionWithInternalSource_std__allocatorT_openstudio__model__ConstructionWithInternalSource_t_t", "std::vector< openstudio::model::ConstructionWithInternalSource,std::allocator< openstudio::model::ConstructionWithInternalSource > > *|openstudio::model::ConstructionWithInternalSourceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Construction_std__allocatorT_openstudio__model__Construction_t_t = {"_p_std__vectorT_openstudio__model__Construction_std__allocatorT_openstudio__model__Construction_t_t", "std::vector< openstudio::model::Construction,std::allocator< openstudio::model::Construction > > *|openstudio::model::ConstructionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ControllerMechanicalVentilation_std__allocatorT_openstudio__model__ControllerMechanicalVentilation_t_t = {"_p_std__vectorT_openstudio__model__ControllerMechanicalVentilation_std__allocatorT_openstudio__model__ControllerMechanicalVentilation_t_t", "openstudio::model::ControllerMechanicalVentilationVector *|std::vector< openstudio::model::ControllerMechanicalVentilation,std::allocator< openstudio::model::ControllerMechanicalVentilation > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ControllerOutdoorAir_std__allocatorT_openstudio__model__ControllerOutdoorAir_t_t = {"_p_std__vectorT_openstudio__model__ControllerOutdoorAir_std__allocatorT_openstudio__model__ControllerOutdoorAir_t_t", "std::vector< openstudio::model::ControllerOutdoorAir,std::allocator< openstudio::model::ControllerOutdoorAir > > *|openstudio::model::ControllerOutdoorAirVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ControllerWaterCoil_std__allocatorT_openstudio__model__ControllerWaterCoil_t_t = {"_p_std__vectorT_openstudio__model__ControllerWaterCoil_std__allocatorT_openstudio__model__ControllerWaterCoil_t_t", "std::vector< openstudio::model::ControllerWaterCoil,std::allocator< openstudio::model::ControllerWaterCoil > > *|openstudio::model::ControllerWaterCoilVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ConvergenceLimits_std__allocatorT_openstudio__model__ConvergenceLimits_t_t = {"_p_std__vectorT_openstudio__model__ConvergenceLimits_std__allocatorT_openstudio__model__ConvergenceLimits_t_t", "std::vector< openstudio::model::ConvergenceLimits,std::allocator< openstudio::model::ConvergenceLimits > > *|openstudio::model::ConvergenceLimitsVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CoolingTowerSingleSpeed_std__allocatorT_openstudio__model__CoolingTowerSingleSpeed_t_t = {"_p_std__vectorT_openstudio__model__CoolingTowerSingleSpeed_std__allocatorT_openstudio__model__CoolingTowerSingleSpeed_t_t", "std::vector< openstudio::model::CoolingTowerSingleSpeed,std::allocator< openstudio::model::CoolingTowerSingleSpeed > > *|openstudio::model::CoolingTowerSingleSpeedVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveBicubic_std__allocatorT_openstudio__model__CurveBicubic_t_t = {"_p_std__vectorT_openstudio__model__CurveBicubic_std__allocatorT_openstudio__model__CurveBicubic_t_t", "std::vector< openstudio::model::CurveBicubic,std::allocator< openstudio::model::CurveBicubic > > *|openstudio::model::CurveBicubicVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveBiquadratic_std__allocatorT_openstudio__model__CurveBiquadratic_t_t = {"_p_std__vectorT_openstudio__model__CurveBiquadratic_std__allocatorT_openstudio__model__CurveBiquadratic_t_t", "std::vector< openstudio::model::CurveBiquadratic,std::allocator< openstudio::model::CurveBiquadratic > > *|openstudio::model::CurveBiquadraticVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveCubic_std__allocatorT_openstudio__model__CurveCubic_t_t = {"_p_std__vectorT_openstudio__model__CurveCubic_std__allocatorT_openstudio__model__CurveCubic_t_t", "std::vector< openstudio::model::CurveCubic,std::allocator< openstudio::model::CurveCubic > > *|openstudio::model::CurveCubicVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveDoubleExponentialDecay_std__allocatorT_openstudio__model__CurveDoubleExponentialDecay_t_t = {"_p_std__vectorT_openstudio__model__CurveDoubleExponentialDecay_std__allocatorT_openstudio__model__CurveDoubleExponentialDecay_t_t", "std::vector< openstudio::model::CurveDoubleExponentialDecay,std::allocator< openstudio::model::CurveDoubleExponentialDecay > > *|openstudio::model::CurveDoubleExponentialDecayVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveExponent_std__allocatorT_openstudio__model__CurveExponent_t_t = {"_p_std__vectorT_openstudio__model__CurveExponent_std__allocatorT_openstudio__model__CurveExponent_t_t", "std::vector< openstudio::model::CurveExponent,std::allocator< openstudio::model::CurveExponent > > *|openstudio::model::CurveExponentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveExponentialDecay_std__allocatorT_openstudio__model__CurveExponentialDecay_t_t = {"_p_std__vectorT_openstudio__model__CurveExponentialDecay_std__allocatorT_openstudio__model__CurveExponentialDecay_t_t", "std::vector< openstudio::model::CurveExponentialDecay,std::allocator< openstudio::model::CurveExponentialDecay > > *|openstudio::model::CurveExponentialDecayVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveExponentialSkewNormal_std__allocatorT_openstudio__model__CurveExponentialSkewNormal_t_t = {"_p_std__vectorT_openstudio__model__CurveExponentialSkewNormal_std__allocatorT_openstudio__model__CurveExponentialSkewNormal_t_t", "std::vector< openstudio::model::CurveExponentialSkewNormal,std::allocator< openstudio::model::CurveExponentialSkewNormal > > *|openstudio::model::CurveExponentialSkewNormalVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveFanPressureRise_std__allocatorT_openstudio__model__CurveFanPressureRise_t_t = {"_p_std__vectorT_openstudio__model__CurveFanPressureRise_std__allocatorT_openstudio__model__CurveFanPressureRise_t_t", "std::vector< openstudio::model::CurveFanPressureRise,std::allocator< openstudio::model::CurveFanPressureRise > > *|openstudio::model::CurveFanPressureRiseVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveFunctionalPressureDrop_std__allocatorT_openstudio__model__CurveFunctionalPressureDrop_t_t = {"_p_std__vectorT_openstudio__model__CurveFunctionalPressureDrop_std__allocatorT_openstudio__model__CurveFunctionalPressureDrop_t_t", "std::vector< openstudio::model::CurveFunctionalPressureDrop,std::allocator< openstudio::model::CurveFunctionalPressureDrop > > *|openstudio::model::CurveFunctionalPressureDropVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveLinear_std__allocatorT_openstudio__model__CurveLinear_t_t = {"_p_std__vectorT_openstudio__model__CurveLinear_std__allocatorT_openstudio__model__CurveLinear_t_t", "std::vector< openstudio::model::CurveLinear,std::allocator< openstudio::model::CurveLinear > > *|openstudio::model::CurveLinearVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveQuadraticLinear_std__allocatorT_openstudio__model__CurveQuadraticLinear_t_t = {"_p_std__vectorT_openstudio__model__CurveQuadraticLinear_std__allocatorT_openstudio__model__CurveQuadraticLinear_t_t", "std::vector< openstudio::model::CurveQuadraticLinear,std::allocator< openstudio::model::CurveQuadraticLinear > > *|openstudio::model::CurveQuadraticLinearVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveQuadratic_std__allocatorT_openstudio__model__CurveQuadratic_t_t = {"_p_std__vectorT_openstudio__model__CurveQuadratic_std__allocatorT_openstudio__model__CurveQuadratic_t_t", "std::vector< openstudio::model::CurveQuadratic,std::allocator< openstudio::model::CurveQuadratic > > *|openstudio::model::CurveQuadraticVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveQuartic_std__allocatorT_openstudio__model__CurveQuartic_t_t = {"_p_std__vectorT_openstudio__model__CurveQuartic_std__allocatorT_openstudio__model__CurveQuartic_t_t", "std::vector< openstudio::model::CurveQuartic,std::allocator< openstudio::model::CurveQuartic > > *|openstudio::model::CurveQuarticVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveRectangularHyperbola1_std__allocatorT_openstudio__model__CurveRectangularHyperbola1_t_t = {"_p_std__vectorT_openstudio__model__CurveRectangularHyperbola1_std__allocatorT_openstudio__model__CurveRectangularHyperbola1_t_t", "std::vector< openstudio::model::CurveRectangularHyperbola1,std::allocator< openstudio::model::CurveRectangularHyperbola1 > > *|openstudio::model::CurveRectangularHyperbola1Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveRectangularHyperbola2_std__allocatorT_openstudio__model__CurveRectangularHyperbola2_t_t = {"_p_std__vectorT_openstudio__model__CurveRectangularHyperbola2_std__allocatorT_openstudio__model__CurveRectangularHyperbola2_t_t", "openstudio::model::CurveRectangularHyperbola2Vector *|std::vector< openstudio::model::CurveRectangularHyperbola2,std::allocator< openstudio::model::CurveRectangularHyperbola2 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveSigmoid_std__allocatorT_openstudio__model__CurveSigmoid_t_t = {"_p_std__vectorT_openstudio__model__CurveSigmoid_std__allocatorT_openstudio__model__CurveSigmoid_t_t", "std::vector< openstudio::model::CurveSigmoid,std::allocator< openstudio::model::CurveSigmoid > > *|openstudio::model::CurveSigmoidVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__CurveTriquadratic_std__allocatorT_openstudio__model__CurveTriquadratic_t_t = {"_p_std__vectorT_openstudio__model__CurveTriquadratic_std__allocatorT_openstudio__model__CurveTriquadratic_t_t", "std::vector< openstudio::model::CurveTriquadratic,std::allocator< openstudio::model::CurveTriquadratic > > *|openstudio::model::CurveTriquadraticVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Curve_std__allocatorT_openstudio__model__Curve_t_t = {"_p_std__vectorT_openstudio__model__Curve_std__allocatorT_openstudio__model__Curve_t_t", "std::vector< openstudio::model::Curve,std::allocator< openstudio::model::Curve > > *|openstudio::model::CurveVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DaylightingControl_std__allocatorT_openstudio__model__DaylightingControl_t_t = {"_p_std__vectorT_openstudio__model__DaylightingControl_std__allocatorT_openstudio__model__DaylightingControl_t_t", "std::vector< openstudio::model::DaylightingControl,std::allocator< openstudio::model::DaylightingControl > > *|openstudio::model::DaylightingControlVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DaylightingDeviceShelf_std__allocatorT_openstudio__model__DaylightingDeviceShelf_t_t = {"_p_std__vectorT_openstudio__model__DaylightingDeviceShelf_std__allocatorT_openstudio__model__DaylightingDeviceShelf_t_t", "std::vector< openstudio::model::DaylightingDeviceShelf,std::allocator< openstudio::model::DaylightingDeviceShelf > > *|openstudio::model::DaylightingDeviceShelfVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DefaultConstructionSet_std__allocatorT_openstudio__model__DefaultConstructionSet_t_t = {"_p_std__vectorT_openstudio__model__DefaultConstructionSet_std__allocatorT_openstudio__model__DefaultConstructionSet_t_t", "std::vector< openstudio::model::DefaultConstructionSet,std::allocator< openstudio::model::DefaultConstructionSet > > *|openstudio::model::DefaultConstructionSetVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DefaultScheduleSet_std__allocatorT_openstudio__model__DefaultScheduleSet_t_t = {"_p_std__vectorT_openstudio__model__DefaultScheduleSet_std__allocatorT_openstudio__model__DefaultScheduleSet_t_t", "std::vector< openstudio::model::DefaultScheduleSet,std::allocator< openstudio::model::DefaultScheduleSet > > *|openstudio::model::DefaultScheduleSetVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DefaultSubSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSubSurfaceConstructions_t_t = {"_p_std__vectorT_openstudio__model__DefaultSubSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSubSurfaceConstructions_t_t", "openstudio::model::DefaultSubSurfaceConstructionsVector *|std::vector< openstudio::model::DefaultSubSurfaceConstructions,std::allocator< openstudio::model::DefaultSubSurfaceConstructions > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DefaultSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSurfaceConstructions_t_t = {"_p_std__vectorT_openstudio__model__DefaultSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSurfaceConstructions_t_t", "openstudio::model::DefaultSurfaceConstructionsVector *|std::vector< openstudio::model::DefaultSurfaceConstructions,std::allocator< openstudio::model::DefaultSurfaceConstructions > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DesignDay_std__allocatorT_openstudio__model__DesignDay_t_t = {"_p_std__vectorT_openstudio__model__DesignDay_std__allocatorT_openstudio__model__DesignDay_t_t", "std::vector< openstudio::model::DesignDay,std::allocator< openstudio::model::DesignDay > > *|openstudio::model::DesignDayVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DesignSpecificationOutdoorAir_std__allocatorT_openstudio__model__DesignSpecificationOutdoorAir_t_t = {"_p_std__vectorT_openstudio__model__DesignSpecificationOutdoorAir_std__allocatorT_openstudio__model__DesignSpecificationOutdoorAir_t_t", "std::vector< openstudio::model::DesignSpecificationOutdoorAir,std::allocator< openstudio::model::DesignSpecificationOutdoorAir > > *|openstudio::model::DesignSpecificationOutdoorAirVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DistrictCooling_std__allocatorT_openstudio__model__DistrictCooling_t_t = {"_p_std__vectorT_openstudio__model__DistrictCooling_std__allocatorT_openstudio__model__DistrictCooling_t_t", "std::vector< openstudio::model::DistrictCooling,std::allocator< openstudio::model::DistrictCooling > > *|openstudio::model::DistrictCoolingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__DistrictHeating_std__allocatorT_openstudio__model__DistrictHeating_t_t = {"_p_std__vectorT_openstudio__model__DistrictHeating_std__allocatorT_openstudio__model__DistrictHeating_t_t", "std::vector< openstudio::model::DistrictHeating,std::allocator< openstudio::model::DistrictHeating > > *|openstudio::model::DistrictHeatingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ElectricEquipmentDefinition_std__allocatorT_openstudio__model__ElectricEquipmentDefinition_t_t = {"_p_std__vectorT_openstudio__model__ElectricEquipmentDefinition_std__allocatorT_openstudio__model__ElectricEquipmentDefinition_t_t", "openstudio::model::ElectricEquipmentDefinitionVector *|std::vector< openstudio::model::ElectricEquipmentDefinition,std::allocator< openstudio::model::ElectricEquipmentDefinition > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ElectricEquipment_std__allocatorT_openstudio__model__ElectricEquipment_t_t = {"_p_std__vectorT_openstudio__model__ElectricEquipment_std__allocatorT_openstudio__model__ElectricEquipment_t_t", "std::vector< openstudio::model::ElectricEquipment,std::allocator< openstudio::model::ElectricEquipment > > *|openstudio::model::ElectricEquipmentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_std__allocatorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t_t = {"_p_std__vectorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_std__allocatorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t_t", "openstudio::model::EvaporativeCoolerDirectResearchSpecialVector *|std::vector< openstudio::model::EvaporativeCoolerDirectResearchSpecial,std::allocator< openstudio::model::EvaporativeCoolerDirectResearchSpecial > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ExteriorLightsDefinition_std__allocatorT_openstudio__model__ExteriorLightsDefinition_t_t = {"_p_std__vectorT_openstudio__model__ExteriorLightsDefinition_std__allocatorT_openstudio__model__ExteriorLightsDefinition_t_t", "openstudio::model::ExteriorLightsDefinitionVector *|std::vector< openstudio::model::ExteriorLightsDefinition,std::allocator< openstudio::model::ExteriorLightsDefinition > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ExteriorLights_std__allocatorT_openstudio__model__ExteriorLights_t_t = {"_p_std__vectorT_openstudio__model__ExteriorLights_std__allocatorT_openstudio__model__ExteriorLights_t_t", "std::vector< openstudio::model::ExteriorLights,std::allocator< openstudio::model::ExteriorLights > > *|openstudio::model::ExteriorLightsVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__FFactorGroundFloorConstruction_std__allocatorT_openstudio__model__FFactorGroundFloorConstruction_t_t = {"_p_std__vectorT_openstudio__model__FFactorGroundFloorConstruction_std__allocatorT_openstudio__model__FFactorGroundFloorConstruction_t_t", "openstudio::model::FFactorGroundFloorConstructionVector *|std::vector< openstudio::model::FFactorGroundFloorConstruction,std::allocator< openstudio::model::FFactorGroundFloorConstruction > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__FanConstantVolume_std__allocatorT_openstudio__model__FanConstantVolume_t_t = {"_p_std__vectorT_openstudio__model__FanConstantVolume_std__allocatorT_openstudio__model__FanConstantVolume_t_t", "std::vector< openstudio::model::FanConstantVolume,std::allocator< openstudio::model::FanConstantVolume > > *|openstudio::model::FanConstantVolumeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__FanVariableVolume_std__allocatorT_openstudio__model__FanVariableVolume_t_t = {"_p_std__vectorT_openstudio__model__FanVariableVolume_std__allocatorT_openstudio__model__FanVariableVolume_t_t", "std::vector< openstudio::model::FanVariableVolume,std::allocator< openstudio::model::FanVariableVolume > > *|openstudio::model::FanVariableVolumeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__FenestrationMaterial_std__allocatorT_openstudio__model__FenestrationMaterial_t_t = {"_p_std__vectorT_openstudio__model__FenestrationMaterial_std__allocatorT_openstudio__model__FenestrationMaterial_t_t", "std::vector< openstudio::model::FenestrationMaterial,std::allocator< openstudio::model::FenestrationMaterial > > *|openstudio::model::FenestrationMaterialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__FieldViewer_std__allocatorT_openstudio__model__FieldViewer_t_t = {"_p_std__vectorT_openstudio__model__FieldViewer_std__allocatorT_openstudio__model__FieldViewer_t_t", "std::vector< openstudio::model::FieldViewer,std::allocator< openstudio::model::FieldViewer > > *|openstudio::model::FieldViewerVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__GasEquipmentDefinition_std__allocatorT_openstudio__model__GasEquipmentDefinition_t_t = {"_p_std__vectorT_openstudio__model__GasEquipmentDefinition_std__allocatorT_openstudio__model__GasEquipmentDefinition_t_t", "std::vector< openstudio::model::GasEquipmentDefinition,std::allocator< openstudio::model::GasEquipmentDefinition > > *|openstudio::model::GasEquipmentDefinitionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__GasEquipment_std__allocatorT_openstudio__model__GasEquipment_t_t = {"_p_std__vectorT_openstudio__model__GasEquipment_std__allocatorT_openstudio__model__GasEquipment_t_t", "std::vector< openstudio::model::GasEquipment,std::allocator< openstudio::model::GasEquipment > > *|openstudio::model::GasEquipmentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__GasLayer_std__allocatorT_openstudio__model__GasLayer_t_t = {"_p_std__vectorT_openstudio__model__GasLayer_std__allocatorT_openstudio__model__GasLayer_t_t", "std::vector< openstudio::model::GasLayer,std::allocator< openstudio::model::GasLayer > > *|openstudio::model::GasLayerVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__GasMixture_std__allocatorT_openstudio__model__GasMixture_t_t = {"_p_std__vectorT_openstudio__model__GasMixture_std__allocatorT_openstudio__model__GasMixture_t_t", "std::vector< openstudio::model::GasMixture,std::allocator< openstudio::model::GasMixture > > *|openstudio::model::GasMixtureVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Gas_std__allocatorT_openstudio__model__Gas_t_t = {"_p_std__vectorT_openstudio__model__Gas_std__allocatorT_openstudio__model__Gas_t_t", "std::vector< openstudio::model::Gas,std::allocator< openstudio::model::Gas > > *|openstudio::model::GasVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__GenericModelObject_std__allocatorT_openstudio__model__GenericModelObject_t_t = {"_p_std__vectorT_openstudio__model__GenericModelObject_std__allocatorT_openstudio__model__GenericModelObject_t_t", "std::vector< openstudio::model::GenericModelObject,std::allocator< openstudio::model::GenericModelObject > > *|openstudio::model::GenericModelObjectVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__GlareSensor_std__allocatorT_openstudio__model__GlareSensor_t_t = {"_p_std__vectorT_openstudio__model__GlareSensor_std__allocatorT_openstudio__model__GlareSensor_t_t", "std::vector< openstudio::model::GlareSensor,std::allocator< openstudio::model::GlareSensor > > *|openstudio::model::GlareSensorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Glazing_std__allocatorT_openstudio__model__Glazing_t_t = {"_p_std__vectorT_openstudio__model__Glazing_std__allocatorT_openstudio__model__Glazing_t_t", "std::vector< openstudio::model::Glazing,std::allocator< openstudio::model::Glazing > > *|openstudio::model::GlazingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__HeatBalanceAlgorithm_std__allocatorT_openstudio__model__HeatBalanceAlgorithm_t_t = {"_p_std__vectorT_openstudio__model__HeatBalanceAlgorithm_std__allocatorT_openstudio__model__HeatBalanceAlgorithm_t_t", "std::vector< openstudio::model::HeatBalanceAlgorithm,std::allocator< openstudio::model::HeatBalanceAlgorithm > > *|openstudio::model::HeatBalanceAlgorithmVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__HotWaterEquipmentDefinition_std__allocatorT_openstudio__model__HotWaterEquipmentDefinition_t_t = {"_p_std__vectorT_openstudio__model__HotWaterEquipmentDefinition_std__allocatorT_openstudio__model__HotWaterEquipmentDefinition_t_t", "openstudio::model::HotWaterEquipmentDefinitionVector *|std::vector< openstudio::model::HotWaterEquipmentDefinition,std::allocator< openstudio::model::HotWaterEquipmentDefinition > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__HotWaterEquipment_std__allocatorT_openstudio__model__HotWaterEquipment_t_t = {"_p_std__vectorT_openstudio__model__HotWaterEquipment_std__allocatorT_openstudio__model__HotWaterEquipment_t_t", "std::vector< openstudio::model::HotWaterEquipment,std::allocator< openstudio::model::HotWaterEquipment > > *|openstudio::model::HotWaterEquipmentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__IlluminanceMap_std__allocatorT_openstudio__model__IlluminanceMap_t_t = {"_p_std__vectorT_openstudio__model__IlluminanceMap_std__allocatorT_openstudio__model__IlluminanceMap_t_t", "std::vector< openstudio::model::IlluminanceMap,std::allocator< openstudio::model::IlluminanceMap > > *|openstudio::model::IlluminanceMapVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__InfraredTransparentMaterial_std__allocatorT_openstudio__model__InfraredTransparentMaterial_t_t = {"_p_std__vectorT_openstudio__model__InfraredTransparentMaterial_std__allocatorT_openstudio__model__InfraredTransparentMaterial_t_t", "openstudio::model::InfraredTransparentMaterialVector *|std::vector< openstudio::model::InfraredTransparentMaterial,std::allocator< openstudio::model::InfraredTransparentMaterial > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__InteriorPartitionSurfaceGroup_std__allocatorT_openstudio__model__InteriorPartitionSurfaceGroup_t_t = {"_p_std__vectorT_openstudio__model__InteriorPartitionSurfaceGroup_std__allocatorT_openstudio__model__InteriorPartitionSurfaceGroup_t_t", "std::vector< openstudio::model::InteriorPartitionSurfaceGroup,std::allocator< openstudio::model::InteriorPartitionSurfaceGroup > > *|openstudio::model::InteriorPartitionSurfaceGroupVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__InteriorPartitionSurface_std__allocatorT_openstudio__model__InteriorPartitionSurface_t_t = {"_p_std__vectorT_openstudio__model__InteriorPartitionSurface_std__allocatorT_openstudio__model__InteriorPartitionSurface_t_t", "openstudio::model::InteriorPartitionSurfaceVector *|std::vector< openstudio::model::InteriorPartitionSurface,std::allocator< openstudio::model::InteriorPartitionSurface > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__InternalMassDefinition_std__allocatorT_openstudio__model__InternalMassDefinition_t_t = {"_p_std__vectorT_openstudio__model__InternalMassDefinition_std__allocatorT_openstudio__model__InternalMassDefinition_t_t", "std::vector< openstudio::model::InternalMassDefinition,std::allocator< openstudio::model::InternalMassDefinition > > *|openstudio::model::InternalMassDefinitionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__InternalMass_std__allocatorT_openstudio__model__InternalMass_t_t = {"_p_std__vectorT_openstudio__model__InternalMass_std__allocatorT_openstudio__model__InternalMass_t_t", "std::vector< openstudio::model::InternalMass,std::allocator< openstudio::model::InternalMass > > *|openstudio::model::InternalMassVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__LayeredConstruction_std__allocatorT_openstudio__model__LayeredConstruction_t_t = {"_p_std__vectorT_openstudio__model__LayeredConstruction_std__allocatorT_openstudio__model__LayeredConstruction_t_t", "std::vector< openstudio::model::LayeredConstruction,std::allocator< openstudio::model::LayeredConstruction > > *|openstudio::model::LayeredConstructionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__LifeCycleCost_Parameters_std__allocatorT_openstudio__model__LifeCycleCost_Parameters_t_t = {"_p_std__vectorT_openstudio__model__LifeCycleCost_Parameters_std__allocatorT_openstudio__model__LifeCycleCost_Parameters_t_t", "std::vector< openstudio::model::LifeCycleCost_Parameters,std::allocator< openstudio::model::LifeCycleCost_Parameters > > *|openstudio::model::LifeCycleCost_ParametersVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__LightingDesignDay_std__allocatorT_openstudio__model__LightingDesignDay_t_t = {"_p_std__vectorT_openstudio__model__LightingDesignDay_std__allocatorT_openstudio__model__LightingDesignDay_t_t", "std::vector< openstudio::model::LightingDesignDay,std::allocator< openstudio::model::LightingDesignDay > > *|openstudio::model::LightingDesignDayVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__LightingSimulationControl_std__allocatorT_openstudio__model__LightingSimulationControl_t_t = {"_p_std__vectorT_openstudio__model__LightingSimulationControl_std__allocatorT_openstudio__model__LightingSimulationControl_t_t", "openstudio::model::LightingSimulationControlVector *|std::vector< openstudio::model::LightingSimulationControl,std::allocator< openstudio::model::LightingSimulationControl > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__LightingSimulationZone_std__allocatorT_openstudio__model__LightingSimulationZone_t_t = {"_p_std__vectorT_openstudio__model__LightingSimulationZone_std__allocatorT_openstudio__model__LightingSimulationZone_t_t", "std::vector< openstudio::model::LightingSimulationZone,std::allocator< openstudio::model::LightingSimulationZone > > *|openstudio::model::LightingSimulationZoneVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__LightsDefinition_std__allocatorT_openstudio__model__LightsDefinition_t_t = {"_p_std__vectorT_openstudio__model__LightsDefinition_std__allocatorT_openstudio__model__LightsDefinition_t_t", "std::vector< openstudio::model::LightsDefinition,std::allocator< openstudio::model::LightsDefinition > > *|openstudio::model::LightsDefinitionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Lights_std__allocatorT_openstudio__model__Lights_t_t = {"_p_std__vectorT_openstudio__model__Lights_std__allocatorT_openstudio__model__Lights_t_t", "std::vector< openstudio::model::Lights,std::allocator< openstudio::model::Lights > > *|openstudio::model::LightsVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__LuminaireDefinition_std__allocatorT_openstudio__model__LuminaireDefinition_t_t = {"_p_std__vectorT_openstudio__model__LuminaireDefinition_std__allocatorT_openstudio__model__LuminaireDefinition_t_t", "std::vector< openstudio::model::LuminaireDefinition,std::allocator< openstudio::model::LuminaireDefinition > > *|openstudio::model::LuminaireDefinitionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Luminaire_std__allocatorT_openstudio__model__Luminaire_t_t = {"_p_std__vectorT_openstudio__model__Luminaire_std__allocatorT_openstudio__model__Luminaire_t_t", "std::vector< openstudio::model::Luminaire,std::allocator< openstudio::model::Luminaire > > *|openstudio::model::LuminaireVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__MasslessOpaqueMaterial_std__allocatorT_openstudio__model__MasslessOpaqueMaterial_t_t = {"_p_std__vectorT_openstudio__model__MasslessOpaqueMaterial_std__allocatorT_openstudio__model__MasslessOpaqueMaterial_t_t", "std::vector< openstudio::model::MasslessOpaqueMaterial,std::allocator< openstudio::model::MasslessOpaqueMaterial > > *|openstudio::model::MasslessOpaqueMaterialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Material_std__allocatorT_openstudio__model__Material_t_t = {"_p_std__vectorT_openstudio__model__Material_std__allocatorT_openstudio__model__Material_t_t", "std::vector< openstudio::model::Material,std::allocator< openstudio::model::Material > > *|openstudio::model::MaterialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Meter_std__allocatorT_openstudio__model__Meter_t_t = {"_p_std__vectorT_openstudio__model__Meter_std__allocatorT_openstudio__model__Meter_t_t", "std::vector< openstudio::model::Meter,std::allocator< openstudio::model::Meter > > *|openstudio::model::MeterVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ModelObject_std__allocatorT_openstudio__model__ModelObject_t_t = {"_p_std__vectorT_openstudio__model__ModelObject_std__allocatorT_openstudio__model__ModelObject_t_t", "std::vector< openstudio::model::ModelObject,std::allocator< openstudio::model::ModelObject > > *|openstudio::model::ModelObjectVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ModelPartitionMaterial_std__allocatorT_openstudio__model__ModelPartitionMaterial_t_t = {"_p_std__vectorT_openstudio__model__ModelPartitionMaterial_std__allocatorT_openstudio__model__ModelPartitionMaterial_t_t", "std::vector< openstudio::model::ModelPartitionMaterial,std::allocator< openstudio::model::ModelPartitionMaterial > > *|openstudio::model::ModelPartitionMaterialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Model_std__allocatorT_openstudio__model__Model_t_t = {"_p_std__vectorT_openstudio__model__Model_std__allocatorT_openstudio__model__Model_t_t", "std::vector< openstudio::model::Model,std::allocator< openstudio::model::Model > > *|openstudio::model::ModelVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Node_std__allocatorT_openstudio__model__Node_t_t = {"_p_std__vectorT_openstudio__model__Node_std__allocatorT_openstudio__model__Node_t_t", "std::vector< openstudio::model::Node,std::allocator< openstudio::model::Node > > *|openstudio::model::NodeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__OpaqueMaterial_std__allocatorT_openstudio__model__OpaqueMaterial_t_t = {"_p_std__vectorT_openstudio__model__OpaqueMaterial_std__allocatorT_openstudio__model__OpaqueMaterial_t_t", "std::vector< openstudio::model::OpaqueMaterial,std::allocator< openstudio::model::OpaqueMaterial > > *|openstudio::model::OpaqueMaterialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__OtherEquipmentDefinition_std__allocatorT_openstudio__model__OtherEquipmentDefinition_t_t = {"_p_std__vectorT_openstudio__model__OtherEquipmentDefinition_std__allocatorT_openstudio__model__OtherEquipmentDefinition_t_t", "std::vector< openstudio::model::OtherEquipmentDefinition,std::allocator< openstudio::model::OtherEquipmentDefinition > > *|openstudio::model::OtherEquipmentDefinitionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__OtherEquipment_std__allocatorT_openstudio__model__OtherEquipment_t_t = {"_p_std__vectorT_openstudio__model__OtherEquipment_std__allocatorT_openstudio__model__OtherEquipment_t_t", "std::vector< openstudio::model::OtherEquipment,std::allocator< openstudio::model::OtherEquipment > > *|openstudio::model::OtherEquipmentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__OutputVariable_std__allocatorT_openstudio__model__OutputVariable_t_t = {"_p_std__vectorT_openstudio__model__OutputVariable_std__allocatorT_openstudio__model__OutputVariable_t_t", "std::vector< openstudio::model::OutputVariable,std::allocator< openstudio::model::OutputVariable > > *|openstudio::model::OutputVariableVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ParentObject_std__allocatorT_openstudio__model__ParentObject_t_t = {"_p_std__vectorT_openstudio__model__ParentObject_std__allocatorT_openstudio__model__ParentObject_t_t", "std::vector< openstudio::model::ParentObject,std::allocator< openstudio::model::ParentObject > > *|openstudio::model::ParentObjectVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__PeopleDefinition_std__allocatorT_openstudio__model__PeopleDefinition_t_t = {"_p_std__vectorT_openstudio__model__PeopleDefinition_std__allocatorT_openstudio__model__PeopleDefinition_t_t", "std::vector< openstudio::model::PeopleDefinition,std::allocator< openstudio::model::PeopleDefinition > > *|openstudio::model::PeopleDefinitionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__People_std__allocatorT_openstudio__model__People_t_t = {"_p_std__vectorT_openstudio__model__People_std__allocatorT_openstudio__model__People_t_t", "std::vector< openstudio::model::People,std::allocator< openstudio::model::People > > *|openstudio::model::PeopleVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__PipeAdiabatic_std__allocatorT_openstudio__model__PipeAdiabatic_t_t = {"_p_std__vectorT_openstudio__model__PipeAdiabatic_std__allocatorT_openstudio__model__PipeAdiabatic_t_t", "std::vector< openstudio::model::PipeAdiabatic,std::allocator< openstudio::model::PipeAdiabatic > > *|openstudio::model::PipeAdiabaticVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__PlanarSurfaceGroup_std__allocatorT_openstudio__model__PlanarSurfaceGroup_t_t = {"_p_std__vectorT_openstudio__model__PlanarSurfaceGroup_std__allocatorT_openstudio__model__PlanarSurfaceGroup_t_t", "std::vector< openstudio::model::PlanarSurfaceGroup,std::allocator< openstudio::model::PlanarSurfaceGroup > > *|openstudio::model::PlanarSurfaceGroupVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__PlanarSurface_std__allocatorT_openstudio__model__PlanarSurface_t_t = {"_p_std__vectorT_openstudio__model__PlanarSurface_std__allocatorT_openstudio__model__PlanarSurface_t_t", "std::vector< openstudio::model::PlanarSurface,std::allocator< openstudio::model::PlanarSurface > > *|openstudio::model::PlanarSurfaceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__PortList_std__allocatorT_openstudio__model__PortList_t_t = {"_p_std__vectorT_openstudio__model__PortList_std__allocatorT_openstudio__model__PortList_t_t", "std::vector< openstudio::model::PortList,std::allocator< openstudio::model::PortList > > *|openstudio::model::PortListVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__PumpVariableSpeed_std__allocatorT_openstudio__model__PumpVariableSpeed_t_t = {"_p_std__vectorT_openstudio__model__PumpVariableSpeed_std__allocatorT_openstudio__model__PumpVariableSpeed_t_t", "std::vector< openstudio::model::PumpVariableSpeed,std::allocator< openstudio::model::PumpVariableSpeed > > *|openstudio::model::PumpVariableSpeedVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__RadianceParameters_std__allocatorT_openstudio__model__RadianceParameters_t_t = {"_p_std__vectorT_openstudio__model__RadianceParameters_std__allocatorT_openstudio__model__RadianceParameters_t_t", "std::vector< openstudio::model::RadianceParameters,std::allocator< openstudio::model::RadianceParameters > > *|openstudio::model::RadianceParametersVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__RefractionExtinctionGlazing_std__allocatorT_openstudio__model__RefractionExtinctionGlazing_t_t = {"_p_std__vectorT_openstudio__model__RefractionExtinctionGlazing_std__allocatorT_openstudio__model__RefractionExtinctionGlazing_t_t", "std::vector< openstudio::model::RefractionExtinctionGlazing,std::allocator< openstudio::model::RefractionExtinctionGlazing > > *|openstudio::model::RefractionExtinctionGlazingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Relationship_std__allocatorT_openstudio__model__Relationship_t_t = {"_p_std__vectorT_openstudio__model__Relationship_std__allocatorT_openstudio__model__Relationship_t_t", "std::vector< openstudio::model::Relationship,std::allocator< openstudio::model::Relationship > > *|openstudio::model::RelationshipVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__RenderingColor_std__allocatorT_openstudio__model__RenderingColor_t_t = {"_p_std__vectorT_openstudio__model__RenderingColor_std__allocatorT_openstudio__model__RenderingColor_t_t", "std::vector< openstudio::model::RenderingColor,std::allocator< openstudio::model::RenderingColor > > *|openstudio::model::RenderingColorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ResourceObject_std__allocatorT_openstudio__model__ResourceObject_t_t = {"_p_std__vectorT_openstudio__model__ResourceObject_std__allocatorT_openstudio__model__ResourceObject_t_t", "std::vector< openstudio::model::ResourceObject,std::allocator< openstudio::model::ResourceObject > > *|openstudio::model::ResourceObjectVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__RoofVegetation_std__allocatorT_openstudio__model__RoofVegetation_t_t = {"_p_std__vectorT_openstudio__model__RoofVegetation_std__allocatorT_openstudio__model__RoofVegetation_t_t", "std::vector< openstudio::model::RoofVegetation,std::allocator< openstudio::model::RoofVegetation > > *|openstudio::model::RoofVegetationVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__RunPeriodControlDaylightSavingTime_std__allocatorT_openstudio__model__RunPeriodControlDaylightSavingTime_t_t = {"_p_std__vectorT_openstudio__model__RunPeriodControlDaylightSavingTime_std__allocatorT_openstudio__model__RunPeriodControlDaylightSavingTime_t_t", "openstudio::model::RunPeriodControlDaylightSavingTimeVector *|std::vector< openstudio::model::RunPeriodControlDaylightSavingTime,std::allocator< openstudio::model::RunPeriodControlDaylightSavingTime > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__RunPeriodControlSpecialDays_std__allocatorT_openstudio__model__RunPeriodControlSpecialDays_t_t = {"_p_std__vectorT_openstudio__model__RunPeriodControlSpecialDays_std__allocatorT_openstudio__model__RunPeriodControlSpecialDays_t_t", "std::vector< openstudio::model::RunPeriodControlSpecialDays,std::allocator< openstudio::model::RunPeriodControlSpecialDays > > *|openstudio::model::RunPeriodControlSpecialDaysVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__RunPeriod_std__allocatorT_openstudio__model__RunPeriod_t_t = {"_p_std__vectorT_openstudio__model__RunPeriod_std__allocatorT_openstudio__model__RunPeriod_t_t", "std::vector< openstudio::model::RunPeriod,std::allocator< openstudio::model::RunPeriod > > *|openstudio::model::RunPeriodVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleBase_std__allocatorT_openstudio__model__ScheduleBase_t_t = {"_p_std__vectorT_openstudio__model__ScheduleBase_std__allocatorT_openstudio__model__ScheduleBase_t_t", "std::vector< openstudio::model::ScheduleBase,std::allocator< openstudio::model::ScheduleBase > > *|openstudio::model::ScheduleBaseVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleCompact_std__allocatorT_openstudio__model__ScheduleCompact_t_t = {"_p_std__vectorT_openstudio__model__ScheduleCompact_std__allocatorT_openstudio__model__ScheduleCompact_t_t", "std::vector< openstudio::model::ScheduleCompact,std::allocator< openstudio::model::ScheduleCompact > > *|openstudio::model::ScheduleCompactVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleConstant_std__allocatorT_openstudio__model__ScheduleConstant_t_t = {"_p_std__vectorT_openstudio__model__ScheduleConstant_std__allocatorT_openstudio__model__ScheduleConstant_t_t", "std::vector< openstudio::model::ScheduleConstant,std::allocator< openstudio::model::ScheduleConstant > > *|openstudio::model::ScheduleConstantVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleDay_std__allocatorT_openstudio__model__ScheduleDay_t_t = {"_p_std__vectorT_openstudio__model__ScheduleDay_std__allocatorT_openstudio__model__ScheduleDay_t_t", "std::vector< openstudio::model::ScheduleDay,std::allocator< openstudio::model::ScheduleDay > > *|openstudio::model::ScheduleDayVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleFixedInterval_std__allocatorT_openstudio__model__ScheduleFixedInterval_t_t = {"_p_std__vectorT_openstudio__model__ScheduleFixedInterval_std__allocatorT_openstudio__model__ScheduleFixedInterval_t_t", "std::vector< openstudio::model::ScheduleFixedInterval,std::allocator< openstudio::model::ScheduleFixedInterval > > *|openstudio::model::ScheduleFixedIntervalVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleInterval_std__allocatorT_openstudio__model__ScheduleInterval_t_t = {"_p_std__vectorT_openstudio__model__ScheduleInterval_std__allocatorT_openstudio__model__ScheduleInterval_t_t", "std::vector< openstudio::model::ScheduleInterval,std::allocator< openstudio::model::ScheduleInterval > > *|openstudio::model::ScheduleIntervalVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleRule_std__allocatorT_openstudio__model__ScheduleRule_t_t = {"_p_std__vectorT_openstudio__model__ScheduleRule_std__allocatorT_openstudio__model__ScheduleRule_t_t", "std::vector< openstudio::model::ScheduleRule,std::allocator< openstudio::model::ScheduleRule > > *|openstudio::model::ScheduleRuleVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleRuleset_std__allocatorT_openstudio__model__ScheduleRuleset_t_t = {"_p_std__vectorT_openstudio__model__ScheduleRuleset_std__allocatorT_openstudio__model__ScheduleRuleset_t_t", "std::vector< openstudio::model::ScheduleRuleset,std::allocator< openstudio::model::ScheduleRuleset > > *|openstudio::model::ScheduleRulesetVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleTypeLimits_std__allocatorT_openstudio__model__ScheduleTypeLimits_t_t = {"_p_std__vectorT_openstudio__model__ScheduleTypeLimits_std__allocatorT_openstudio__model__ScheduleTypeLimits_t_t", "std::vector< openstudio::model::ScheduleTypeLimits,std::allocator< openstudio::model::ScheduleTypeLimits > > *|openstudio::model::ScheduleTypeLimitsVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleType_std__allocatorT_openstudio__model__ScheduleType_t_t = {"_p_std__vectorT_openstudio__model__ScheduleType_std__allocatorT_openstudio__model__ScheduleType_t_t", "std::vector< openstudio::model::ScheduleType,std::allocator< openstudio::model::ScheduleType > > *|openstudio::model::ScheduleTypeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleVariableInterval_std__allocatorT_openstudio__model__ScheduleVariableInterval_t_t = {"_p_std__vectorT_openstudio__model__ScheduleVariableInterval_std__allocatorT_openstudio__model__ScheduleVariableInterval_t_t", "std::vector< openstudio::model::ScheduleVariableInterval,std::allocator< openstudio::model::ScheduleVariableInterval > > *|openstudio::model::ScheduleVariableIntervalVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleWeek_std__allocatorT_openstudio__model__ScheduleWeek_t_t = {"_p_std__vectorT_openstudio__model__ScheduleWeek_std__allocatorT_openstudio__model__ScheduleWeek_t_t", "std::vector< openstudio::model::ScheduleWeek,std::allocator< openstudio::model::ScheduleWeek > > *|openstudio::model::ScheduleWeekVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ScheduleYear_std__allocatorT_openstudio__model__ScheduleYear_t_t = {"_p_std__vectorT_openstudio__model__ScheduleYear_std__allocatorT_openstudio__model__ScheduleYear_t_t", "std::vector< openstudio::model::ScheduleYear,std::allocator< openstudio::model::ScheduleYear > > *|openstudio::model::ScheduleYearVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Schedule_std__allocatorT_openstudio__model__Schedule_t_t = {"_p_std__vectorT_openstudio__model__Schedule_std__allocatorT_openstudio__model__Schedule_t_t", "std::vector< openstudio::model::Schedule,std::allocator< openstudio::model::Schedule > > *|openstudio::model::ScheduleVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Screen_std__allocatorT_openstudio__model__Screen_t_t = {"_p_std__vectorT_openstudio__model__Screen_std__allocatorT_openstudio__model__Screen_t_t", "std::vector< openstudio::model::Screen,std::allocator< openstudio::model::Screen > > *|openstudio::model::ScreenVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SetpointManagerMixedAir_std__allocatorT_openstudio__model__SetpointManagerMixedAir_t_t = {"_p_std__vectorT_openstudio__model__SetpointManagerMixedAir_std__allocatorT_openstudio__model__SetpointManagerMixedAir_t_t", "std::vector< openstudio::model::SetpointManagerMixedAir,std::allocator< openstudio::model::SetpointManagerMixedAir > > *|openstudio::model::SetpointManagerMixedAirVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SetpointManagerSingleZoneReheat_std__allocatorT_openstudio__model__SetpointManagerSingleZoneReheat_t_t = {"_p_std__vectorT_openstudio__model__SetpointManagerSingleZoneReheat_std__allocatorT_openstudio__model__SetpointManagerSingleZoneReheat_t_t", "std::vector< openstudio::model::SetpointManagerSingleZoneReheat,std::allocator< openstudio::model::SetpointManagerSingleZoneReheat > > *|openstudio::model::SetpointManagerSingleZoneReheatVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Shade_std__allocatorT_openstudio__model__Shade_t_t = {"_p_std__vectorT_openstudio__model__Shade_std__allocatorT_openstudio__model__Shade_t_t", "std::vector< openstudio::model::Shade,std::allocator< openstudio::model::Shade > > *|openstudio::model::ShadeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ShadingMaterial_std__allocatorT_openstudio__model__ShadingMaterial_t_t = {"_p_std__vectorT_openstudio__model__ShadingMaterial_std__allocatorT_openstudio__model__ShadingMaterial_t_t", "std::vector< openstudio::model::ShadingMaterial,std::allocator< openstudio::model::ShadingMaterial > > *|openstudio::model::ShadingMaterialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ShadingSurfaceGroup_std__allocatorT_openstudio__model__ShadingSurfaceGroup_t_t = {"_p_std__vectorT_openstudio__model__ShadingSurfaceGroup_std__allocatorT_openstudio__model__ShadingSurfaceGroup_t_t", "std::vector< openstudio::model::ShadingSurfaceGroup,std::allocator< openstudio::model::ShadingSurfaceGroup > > *|openstudio::model::ShadingSurfaceGroupVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ShadingSurface_std__allocatorT_openstudio__model__ShadingSurface_t_t = {"_p_std__vectorT_openstudio__model__ShadingSurface_std__allocatorT_openstudio__model__ShadingSurface_t_t", "std::vector< openstudio::model::ShadingSurface,std::allocator< openstudio::model::ShadingSurface > > *|openstudio::model::ShadingSurfaceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SimpleGlazing_std__allocatorT_openstudio__model__SimpleGlazing_t_t = {"_p_std__vectorT_openstudio__model__SimpleGlazing_std__allocatorT_openstudio__model__SimpleGlazing_t_t", "std::vector< openstudio::model::SimpleGlazing,std::allocator< openstudio::model::SimpleGlazing > > *|openstudio::model::SimpleGlazingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SiteGroundReflectance_std__allocatorT_openstudio__model__SiteGroundReflectance_t_t = {"_p_std__vectorT_openstudio__model__SiteGroundReflectance_std__allocatorT_openstudio__model__SiteGroundReflectance_t_t", "std::vector< openstudio::model::SiteGroundReflectance,std::allocator< openstudio::model::SiteGroundReflectance > > *|openstudio::model::SiteGroundReflectanceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SiteGroundTemperatureBuildingSurface_std__allocatorT_openstudio__model__SiteGroundTemperatureBuildingSurface_t_t = {"_p_std__vectorT_openstudio__model__SiteGroundTemperatureBuildingSurface_std__allocatorT_openstudio__model__SiteGroundTemperatureBuildingSurface_t_t", "openstudio::model::SiteGroundTemperatureBuildingSurfaceVector *|std::vector< openstudio::model::SiteGroundTemperatureBuildingSurface,std::allocator< openstudio::model::SiteGroundTemperatureBuildingSurface > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SiteWaterMainsTemperature_std__allocatorT_openstudio__model__SiteWaterMainsTemperature_t_t = {"_p_std__vectorT_openstudio__model__SiteWaterMainsTemperature_std__allocatorT_openstudio__model__SiteWaterMainsTemperature_t_t", "openstudio::model::SiteWaterMainsTemperatureVector *|std::vector< openstudio::model::SiteWaterMainsTemperature,std::allocator< openstudio::model::SiteWaterMainsTemperature > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Site_std__allocatorT_openstudio__model__Site_t_t = {"_p_std__vectorT_openstudio__model__Site_std__allocatorT_openstudio__model__Site_t_t", "std::vector< openstudio::model::Site,std::allocator< openstudio::model::Site > > *|openstudio::model::SiteVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SizingParameters_std__allocatorT_openstudio__model__SizingParameters_t_t = {"_p_std__vectorT_openstudio__model__SizingParameters_std__allocatorT_openstudio__model__SizingParameters_t_t", "std::vector< openstudio::model::SizingParameters,std::allocator< openstudio::model::SizingParameters > > *|openstudio::model::SizingParametersVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SizingPeriod_std__allocatorT_openstudio__model__SizingPeriod_t_t = {"_p_std__vectorT_openstudio__model__SizingPeriod_std__allocatorT_openstudio__model__SizingPeriod_t_t", "std::vector< openstudio::model::SizingPeriod,std::allocator< openstudio::model::SizingPeriod > > *|openstudio::model::SizingPeriodVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SizingPlant_std__allocatorT_openstudio__model__SizingPlant_t_t = {"_p_std__vectorT_openstudio__model__SizingPlant_std__allocatorT_openstudio__model__SizingPlant_t_t", "std::vector< openstudio::model::SizingPlant,std::allocator< openstudio::model::SizingPlant > > *|openstudio::model::SizingPlantVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SizingSystem_std__allocatorT_openstudio__model__SizingSystem_t_t = {"_p_std__vectorT_openstudio__model__SizingSystem_std__allocatorT_openstudio__model__SizingSystem_t_t", "std::vector< openstudio::model::SizingSystem,std::allocator< openstudio::model::SizingSystem > > *|openstudio::model::SizingSystemVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SizingZone_std__allocatorT_openstudio__model__SizingZone_t_t = {"_p_std__vectorT_openstudio__model__SizingZone_std__allocatorT_openstudio__model__SizingZone_t_t", "std::vector< openstudio::model::SizingZone,std::allocator< openstudio::model::SizingZone > > *|openstudio::model::SizingZoneVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SkyTemperature_std__allocatorT_openstudio__model__SkyTemperature_t_t = {"_p_std__vectorT_openstudio__model__SkyTemperature_std__allocatorT_openstudio__model__SkyTemperature_t_t", "std::vector< openstudio::model::SkyTemperature,std::allocator< openstudio::model::SkyTemperature > > *|openstudio::model::SkyTemperatureVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SpaceInfiltrationDesignFlowRate_std__allocatorT_openstudio__model__SpaceInfiltrationDesignFlowRate_t_t = {"_p_std__vectorT_openstudio__model__SpaceInfiltrationDesignFlowRate_std__allocatorT_openstudio__model__SpaceInfiltrationDesignFlowRate_t_t", "std::vector< openstudio::model::SpaceInfiltrationDesignFlowRate,std::allocator< openstudio::model::SpaceInfiltrationDesignFlowRate > > *|openstudio::model::SpaceInfiltrationDesignFlowRateVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_std__allocatorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t_t = {"_p_std__vectorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_std__allocatorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t_t", "std::vector< openstudio::model::SpaceInfiltrationEffectiveLeakageArea,std::allocator< openstudio::model::SpaceInfiltrationEffectiveLeakageArea > > *|openstudio::model::SpaceInfiltrationEffectiveLeakageAreaVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SpaceItem_std__allocatorT_openstudio__model__SpaceItem_t_t = {"_p_std__vectorT_openstudio__model__SpaceItem_std__allocatorT_openstudio__model__SpaceItem_t_t", "std::vector< openstudio::model::SpaceItem,std::allocator< openstudio::model::SpaceItem > > *|openstudio::model::SpaceItemVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SpaceLoadDefinition_std__allocatorT_openstudio__model__SpaceLoadDefinition_t_t = {"_p_std__vectorT_openstudio__model__SpaceLoadDefinition_std__allocatorT_openstudio__model__SpaceLoadDefinition_t_t", "std::vector< openstudio::model::SpaceLoadDefinition,std::allocator< openstudio::model::SpaceLoadDefinition > > *|openstudio::model::SpaceLoadDefinitionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SpaceLoadInstance_std__allocatorT_openstudio__model__SpaceLoadInstance_t_t = {"_p_std__vectorT_openstudio__model__SpaceLoadInstance_std__allocatorT_openstudio__model__SpaceLoadInstance_t_t", "std::vector< openstudio::model::SpaceLoadInstance,std::allocator< openstudio::model::SpaceLoadInstance > > *|openstudio::model::SpaceLoadInstanceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SpaceLoad_std__allocatorT_openstudio__model__SpaceLoad_t_t = {"_p_std__vectorT_openstudio__model__SpaceLoad_std__allocatorT_openstudio__model__SpaceLoad_t_t", "std::vector< openstudio::model::SpaceLoad,std::allocator< openstudio::model::SpaceLoad > > *|openstudio::model::SpaceLoadVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SpaceType_std__allocatorT_openstudio__model__SpaceType_t_t = {"_p_std__vectorT_openstudio__model__SpaceType_std__allocatorT_openstudio__model__SpaceType_t_t", "std::vector< openstudio::model::SpaceType,std::allocator< openstudio::model::SpaceType > > *|openstudio::model::SpaceTypeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Space_std__allocatorT_openstudio__model__Space_t_t = {"_p_std__vectorT_openstudio__model__Space_std__allocatorT_openstudio__model__Space_t_t", "std::vector< openstudio::model::Space,std::allocator< openstudio::model::Space > > *|openstudio::model::SpaceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__StandardGlazing_std__allocatorT_openstudio__model__StandardGlazing_t_t = {"_p_std__vectorT_openstudio__model__StandardGlazing_std__allocatorT_openstudio__model__StandardGlazing_t_t", "std::vector< openstudio::model::StandardGlazing,std::allocator< openstudio::model::StandardGlazing > > *|openstudio::model::StandardGlazingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__StandardOpaqueMaterial_std__allocatorT_openstudio__model__StandardOpaqueMaterial_t_t = {"_p_std__vectorT_openstudio__model__StandardOpaqueMaterial_std__allocatorT_openstudio__model__StandardOpaqueMaterial_t_t", "std::vector< openstudio::model::StandardOpaqueMaterial,std::allocator< openstudio::model::StandardOpaqueMaterial > > *|openstudio::model::StadardOpaqueMaterialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SteamEquipmentDefinition_std__allocatorT_openstudio__model__SteamEquipmentDefinition_t_t = {"_p_std__vectorT_openstudio__model__SteamEquipmentDefinition_std__allocatorT_openstudio__model__SteamEquipmentDefinition_t_t", "std::vector< openstudio::model::SteamEquipmentDefinition,std::allocator< openstudio::model::SteamEquipmentDefinition > > *|openstudio::model::SteamEquipmentDefinitionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SteamEquipment_std__allocatorT_openstudio__model__SteamEquipment_t_t = {"_p_std__vectorT_openstudio__model__SteamEquipment_std__allocatorT_openstudio__model__SteamEquipment_t_t", "std::vector< openstudio::model::SteamEquipment,std::allocator< openstudio::model::SteamEquipment > > *|openstudio::model::SteamEquipmentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__StraightComponent_std__allocatorT_openstudio__model__StraightComponent_t_t = {"_p_std__vectorT_openstudio__model__StraightComponent_std__allocatorT_openstudio__model__StraightComponent_t_t", "std::vector< openstudio::model::StraightComponent,std::allocator< openstudio::model::StraightComponent > > *|openstudio::model::StraightComponentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__SubSurface_std__allocatorT_openstudio__model__SubSurface_t_t = {"_p_std__vectorT_openstudio__model__SubSurface_std__allocatorT_openstudio__model__SubSurface_t_t", "std::vector< openstudio::model::SubSurface,std::allocator< openstudio::model::SubSurface > > *|openstudio::model::SubSurfaceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__Surface_std__allocatorT_openstudio__model__Surface_t_t = {"_p_std__vectorT_openstudio__model__Surface_std__allocatorT_openstudio__model__Surface_t_t", "std::vector< openstudio::model::Surface,std::allocator< openstudio::model::Surface > > *|openstudio::model::SurfaceVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ThermalZone_std__allocatorT_openstudio__model__ThermalZone_t_t = {"_p_std__vectorT_openstudio__model__ThermalZone_std__allocatorT_openstudio__model__ThermalZone_t_t", "std::vector< openstudio::model::ThermalZone,std::allocator< openstudio::model::ThermalZone > > *|openstudio::model::ThermalZoneVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ThermochromicGlazing_std__allocatorT_openstudio__model__ThermochromicGlazing_t_t = {"_p_std__vectorT_openstudio__model__ThermochromicGlazing_std__allocatorT_openstudio__model__ThermochromicGlazing_t_t", "std::vector< openstudio::model::ThermochromicGlazing,std::allocator< openstudio::model::ThermochromicGlazing > > *|openstudio::model::ThermochromicGlazingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__WaterHeaterMixed_std__allocatorT_openstudio__model__WaterHeaterMixed_t_t = {"_p_std__vectorT_openstudio__model__WaterHeaterMixed_std__allocatorT_openstudio__model__WaterHeaterMixed_t_t", "std::vector< openstudio::model::WaterHeaterMixed,std::allocator< openstudio::model::WaterHeaterMixed > > *|openstudio::model::WaterHeaterMixedVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__WaterUseConnections_std__allocatorT_openstudio__model__WaterUseConnections_t_t = {"_p_std__vectorT_openstudio__model__WaterUseConnections_std__allocatorT_openstudio__model__WaterUseConnections_t_t", "std::vector< openstudio::model::WaterUseConnections,std::allocator< openstudio::model::WaterUseConnections > > *|openstudio::model::WaterUseConnectionsVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__WaterUseEquipmentDefinition_std__allocatorT_openstudio__model__WaterUseEquipmentDefinition_t_t = {"_p_std__vectorT_openstudio__model__WaterUseEquipmentDefinition_std__allocatorT_openstudio__model__WaterUseEquipmentDefinition_t_t", "openstudio::model::WaterUseEquipmentDefinitionVector *|std::vector< openstudio::model::WaterUseEquipmentDefinition,std::allocator< openstudio::model::WaterUseEquipmentDefinition > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__WaterUseEquipment_std__allocatorT_openstudio__model__WaterUseEquipment_t_t = {"_p_std__vectorT_openstudio__model__WaterUseEquipment_std__allocatorT_openstudio__model__WaterUseEquipment_t_t", "std::vector< openstudio::model::WaterUseEquipment,std::allocator< openstudio::model::WaterUseEquipment > > *|openstudio::model::WaterUseEquipmentVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__WeatherFileConditionType_std__allocatorT_openstudio__model__WeatherFileConditionType_t_t = {"_p_std__vectorT_openstudio__model__WeatherFileConditionType_std__allocatorT_openstudio__model__WeatherFileConditionType_t_t", "openstudio::model::WeatherFileConditionTypeVector *|std::vector< openstudio::model::WeatherFileConditionType,std::allocator< openstudio::model::WeatherFileConditionType > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__WeatherFileDays_std__allocatorT_openstudio__model__WeatherFileDays_t_t = {"_p_std__vectorT_openstudio__model__WeatherFileDays_std__allocatorT_openstudio__model__WeatherFileDays_t_t", "std::vector< openstudio::model::WeatherFileDays,std::allocator< openstudio::model::WeatherFileDays > > *|openstudio::model::WeatherFileDaysVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__WeatherFile_std__allocatorT_openstudio__model__WeatherFile_t_t = {"_p_std__vectorT_openstudio__model__WeatherFile_std__allocatorT_openstudio__model__WeatherFile_t_t", "std::vector< openstudio::model::WeatherFile,std::allocator< openstudio::model::WeatherFile > > *|openstudio::model::WeatherFileVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__WindowDataFile_std__allocatorT_openstudio__model__WindowDataFile_t_t = {"_p_std__vectorT_openstudio__model__WindowDataFile_std__allocatorT_openstudio__model__WindowDataFile_t_t", "std::vector< openstudio::model::WindowDataFile,std::allocator< openstudio::model::WindowDataFile > > *|openstudio::model::WindowDataFileVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__YearDescription_std__allocatorT_openstudio__model__YearDescription_t_t = {"_p_std__vectorT_openstudio__model__YearDescription_std__allocatorT_openstudio__model__YearDescription_t_t", "std::vector< openstudio::model::YearDescription,std::allocator< openstudio::model::YearDescription > > *|openstudio::model::YearDescriptionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ZoneAirContaminantBalance_std__allocatorT_openstudio__model__ZoneAirContaminantBalance_t_t = {"_p_std__vectorT_openstudio__model__ZoneAirContaminantBalance_std__allocatorT_openstudio__model__ZoneAirContaminantBalance_t_t", "openstudio::model::ZoneAirContaminantBalanceVector *|std::vector< openstudio::model::ZoneAirContaminantBalance,std::allocator< openstudio::model::ZoneAirContaminantBalance > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_std__allocatorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t_t = {"_p_std__vectorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_std__allocatorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t_t", "openstudio::model::ZoneAirHeatBalanceAlgorithmVector *|std::vector< openstudio::model::ZoneAirHeatBalanceAlgorithm,std::allocator< openstudio::model::ZoneAirHeatBalanceAlgorithm > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_std__allocatorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t_t = {"_p_std__vectorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_std__allocatorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t_t", "std::vector< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial,std::allocator< openstudio::model::ZoneCapacitanceMultiplierResearchSpecial > > *|openstudio::model::ZoneCapacitanceMultiplierResearchSpecialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ZoneHVACEquipmentList_std__allocatorT_openstudio__model__ZoneHVACEquipmentList_t_t = {"_p_std__vectorT_openstudio__model__ZoneHVACEquipmentList_std__allocatorT_openstudio__model__ZoneHVACEquipmentList_t_t", "std::vector< openstudio::model::ZoneHVACEquipmentList,std::allocator< openstudio::model::ZoneHVACEquipmentList > > *|openstudio::model::ZoneHVACEquipmentListVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ZoneHVACFourPipeFanCoil_std__allocatorT_openstudio__model__ZoneHVACFourPipeFanCoil_t_t = {"_p_std__vectorT_openstudio__model__ZoneHVACFourPipeFanCoil_std__allocatorT_openstudio__model__ZoneHVACFourPipeFanCoil_t_t", "std::vector< openstudio::model::ZoneHVACFourPipeFanCoil,std::allocator< openstudio::model::ZoneHVACFourPipeFanCoil > > *|openstudio::model::ZoneHVACFourPipeFanCoilVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_std__allocatorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t_t = {"_p_std__vectorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_std__allocatorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t_t", "std::vector< openstudio::model::ZoneHVACIdealLoadsAirSystem,std::allocator< openstudio::model::ZoneHVACIdealLoadsAirSystem > > *|openstudio::model::ZoneHVACIdealLoadsAirSystemVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t_t = {"_p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t_t", "openstudio::model::ZoneHVACPackagedTerminalAirConditionerVector *|std::vector< openstudio::model::ZoneHVACPackagedTerminalAirConditioner,std::allocator< openstudio::model::ZoneHVACPackagedTerminalAirConditioner > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t_t = {"_p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t_t", "std::vector< openstudio::model::ZoneHVACPackagedTerminalHeatPump,std::allocator< openstudio::model::ZoneHVACPackagedTerminalHeatPump > > *|openstudio::model::ZoneHVACPackagedTerminalHeatPumpVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|openstudio::StringVector *|openstudio::SectionHeadingVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *|openstudio::UnsignedVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "openstudio::PathStringType *|std::wstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "openstudio::PathCharType *|wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ConstPtr,
  &_swigt__p_ConstVec,
  &_swigt__p_ConstWeakPtr,
  &_swigt__p_ImplPtr,
  &_swigt__p_ImplType,
  &_swigt__p_Ptr,
  &_swigt__p_Vec,
  &_swigt__p_WeakPtr,
  &_swigt__p_allocator_type,
  &_swigt__p_boost__log__sinks__synchronous_sinkT_boost__log__sinks__text_ostream_backend_t,
  &_swigt__p_boost__log__sources__severity_channel_logger_mtT_LogLevel_t,
  &_swigt__p_boost__optionalT_QUrl_t,
  &_swigt__p_boost__optionalT_double_t,
  &_swigt__p_boost__optionalT_int_t,
  &_swigt__p_boost__optionalT_openstudio__AttributeDescription_t,
  &_swigt__p_boost__optionalT_openstudio__Attribute_t,
  &_swigt__p_boost__optionalT_openstudio__BCLMeasure_t,
  &_swigt__p_boost__optionalT_openstudio__BTUUnit_t,
  &_swigt__p_boost__optionalT_openstudio__BoundingBox_t,
  &_swigt__p_boost__optionalT_openstudio__CFMUnit_t,
  &_swigt__p_boost__optionalT_openstudio__Calendar_t,
  &_swigt__p_boost__optionalT_openstudio__CelciusUnit_t,
  &_swigt__p_boost__optionalT_openstudio__DataError_t,
  &_swigt__p_boost__optionalT_openstudio__DateTime_t,
  &_swigt__p_boost__optionalT_openstudio__Date_t,
  &_swigt__p_boost__optionalT_openstudio__DocumentElement_t,
  &_swigt__p_boost__optionalT_openstudio__Document_t,
  &_swigt__p_boost__optionalT_openstudio__EnvironmentIdentifier_t,
  &_swigt__p_boost__optionalT_openstudio__EnvironmentType_t,
  &_swigt__p_boost__optionalT_openstudio__EulerAngles_t,
  &_swigt__p_boost__optionalT_openstudio__FahrenheitUnit_t,
  &_swigt__p_boost__optionalT_openstudio__FileReference_t,
  &_swigt__p_boost__optionalT_openstudio__FuelType_t,
  &_swigt__p_boost__optionalT_openstudio__GPDUnit_t,
  &_swigt__p_boost__optionalT_openstudio__IPUnit_t,
  &_swigt__p_boost__optionalT_openstudio__IddField_t,
  &_swigt__p_boost__optionalT_openstudio__IddFile_t,
  &_swigt__p_boost__optionalT_openstudio__IddKey_t,
  &_swigt__p_boost__optionalT_openstudio__IddObject_t,
  &_swigt__p_boost__optionalT_openstudio__IdfFile_t,
  &_swigt__p_boost__optionalT_openstudio__IdfObject_t,
  &_swigt__p_boost__optionalT_openstudio__ImfFile_t,
  &_swigt__p_boost__optionalT_openstudio__KeyValueIdentifier_t,
  &_swigt__p_boost__optionalT_openstudio__MPHUnit_t,
  &_swigt__p_boost__optionalT_openstudio__Misc1Unit_t,
  &_swigt__p_boost__optionalT_openstudio__Plane_t,
  &_swigt__p_boost__optionalT_openstudio__Point3d_t,
  &_swigt__p_boost__optionalT_openstudio__Quantity_t,
  &_swigt__p_boost__optionalT_openstudio__ReportingFrequency_t,
  &_swigt__p_boost__optionalT_openstudio__SIUnit_t,
  &_swigt__p_boost__optionalT_openstudio__SectionElement_t,
  &_swigt__p_boost__optionalT_openstudio__SectionHeading_t,
  &_swigt__p_boost__optionalT_openstudio__Section_t,
  &_swigt__p_boost__optionalT_openstudio__SqlFile_t,
  &_swigt__p_boost__optionalT_openstudio__Table_t,
  &_swigt__p_boost__optionalT_openstudio__Tag_t,
  &_swigt__p_boost__optionalT_openstudio__TemperatureUnit_t,
  &_swigt__p_boost__optionalT_openstudio__Text_t,
  &_swigt__p_boost__optionalT_openstudio__ThermUnit_t,
  &_swigt__p_boost__optionalT_openstudio__TimeDependentValuationFile_t,
  &_swigt__p_boost__optionalT_openstudio__TimeSeriesIdentifier_t,
  &_swigt__p_boost__optionalT_openstudio__TimeSeries_t,
  &_swigt__p_boost__optionalT_openstudio__Time_t,
  &_swigt__p_boost__optionalT_openstudio__Transformation_t,
  &_swigt__p_boost__optionalT_openstudio__UUID_t,
  &_swigt__p_boost__optionalT_openstudio__Unit_t,
  &_swigt__p_boost__optionalT_openstudio__Vector3d_t,
  &_swigt__p_boost__optionalT_openstudio__WhUnit_t,
  &_swigt__p_boost__optionalT_openstudio__WorkspaceObject_t,
  &_swigt__p_boost__optionalT_openstudio__Workspace_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirGap_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirLoopHVACOutdoorAirSystem_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirLoopHVACZoneMixer_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirLoopHVACZoneSplitter_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirLoopHVAC_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctUncontrolled_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctVAVReheat_t,
  &_swigt__p_boost__optionalT_openstudio__model__AirWallMaterial_t,
  &_swigt__p_boost__optionalT_openstudio__model__AvailabilityManagerScheduled_t,
  &_swigt__p_boost__optionalT_openstudio__model__Blind_t,
  &_swigt__p_boost__optionalT_openstudio__model__BoilerHotWater_t,
  &_swigt__p_boost__optionalT_openstudio__model__BuildingStandardsInformation_t,
  &_swigt__p_boost__optionalT_openstudio__model__BuildingStory_t,
  &_swigt__p_boost__optionalT_openstudio__model__Building_t,
  &_swigt__p_boost__optionalT_openstudio__model__CFactorUndergroundWallConstruction_t,
  &_swigt__p_boost__optionalT_openstudio__model__ChillerElectricEIR_t,
  &_swigt__p_boost__optionalT_openstudio__model__ClimateZones_t,
  &_swigt__p_boost__optionalT_openstudio__model__CoilCoolingDXSingleSpeed_t,
  &_swigt__p_boost__optionalT_openstudio__model__CoilCoolingDXTwoSpeed_t,
  &_swigt__p_boost__optionalT_openstudio__model__CoilCoolingWater_t,
  &_swigt__p_boost__optionalT_openstudio__model__CoilHeatingDXSingleSpeed_t,
  &_swigt__p_boost__optionalT_openstudio__model__CoilHeatingElectric_t,
  &_swigt__p_boost__optionalT_openstudio__model__CoilHeatingGas_t,
  &_swigt__p_boost__optionalT_openstudio__model__CoilHeatingWater_t,
  &_swigt__p_boost__optionalT_openstudio__model__ComponentCost_LineItem_t,
  &_swigt__p_boost__optionalT_openstudio__model__ComponentData_t,
  &_swigt__p_boost__optionalT_openstudio__model__Component_t,
  &_swigt__p_boost__optionalT_openstudio__model__ConnectorMixer_t,
  &_swigt__p_boost__optionalT_openstudio__model__ConnectorSplitter_t,
  &_swigt__p_boost__optionalT_openstudio__model__ConstructionBaseStandardsInformation_t,
  &_swigt__p_boost__optionalT_openstudio__model__ConstructionBase_t,
  &_swigt__p_boost__optionalT_openstudio__model__ConstructionWithInternalSource_t,
  &_swigt__p_boost__optionalT_openstudio__model__Construction_t,
  &_swigt__p_boost__optionalT_openstudio__model__ControllerMechanicalVentilation_t,
  &_swigt__p_boost__optionalT_openstudio__model__ControllerOutdoorAir_t,
  &_swigt__p_boost__optionalT_openstudio__model__ControllerWaterCoil_t,
  &_swigt__p_boost__optionalT_openstudio__model__ConvergenceLimits_t,
  &_swigt__p_boost__optionalT_openstudio__model__CoolingTowerSingleSpeed_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveBicubic_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveBiquadratic_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveCubic_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveDoubleExponentialDecay_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveExponent_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveExponentialDecay_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveExponentialSkewNormal_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveFanPressureRise_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveFunctionalPressureDrop_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveLinear_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveQuadraticLinear_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveQuadratic_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveQuartic_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola1_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola2_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveSigmoid_t,
  &_swigt__p_boost__optionalT_openstudio__model__CurveTriquadratic_t,
  &_swigt__p_boost__optionalT_openstudio__model__Curve_t,
  &_swigt__p_boost__optionalT_openstudio__model__DaylightingControl_t,
  &_swigt__p_boost__optionalT_openstudio__model__DaylightingDeviceShelf_t,
  &_swigt__p_boost__optionalT_openstudio__model__DefaultConstructionSet_t,
  &_swigt__p_boost__optionalT_openstudio__model__DefaultScheduleSet_t,
  &_swigt__p_boost__optionalT_openstudio__model__DefaultSubSurfaceConstructions_t,
  &_swigt__p_boost__optionalT_openstudio__model__DefaultSurfaceConstructions_t,
  &_swigt__p_boost__optionalT_openstudio__model__DesignDay_t,
  &_swigt__p_boost__optionalT_openstudio__model__DesignSpecificationOutdoorAir_t,
  &_swigt__p_boost__optionalT_openstudio__model__DistrictCooling_t,
  &_swigt__p_boost__optionalT_openstudio__model__DistrictHeating_t,
  &_swigt__p_boost__optionalT_openstudio__model__ElectricEquipmentDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__ElectricEquipment_t,
  &_swigt__p_boost__optionalT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t,
  &_swigt__p_boost__optionalT_openstudio__model__ExteriorLightsDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__ExteriorLights_t,
  &_swigt__p_boost__optionalT_openstudio__model__FFactorGroundFloorConstruction_t,
  &_swigt__p_boost__optionalT_openstudio__model__Facility_t,
  &_swigt__p_boost__optionalT_openstudio__model__FanConstantVolume_t,
  &_swigt__p_boost__optionalT_openstudio__model__FanVariableVolume_t,
  &_swigt__p_boost__optionalT_openstudio__model__FenestrationMaterial_t,
  &_swigt__p_boost__optionalT_openstudio__model__GasEquipmentDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__GasEquipment_t,
  &_swigt__p_boost__optionalT_openstudio__model__GasLayer_t,
  &_swigt__p_boost__optionalT_openstudio__model__GasMixture_t,
  &_swigt__p_boost__optionalT_openstudio__model__Gas_t,
  &_swigt__p_boost__optionalT_openstudio__model__GenericModelObject_t,
  &_swigt__p_boost__optionalT_openstudio__model__GlareSensor_t,
  &_swigt__p_boost__optionalT_openstudio__model__Glazing_t,
  &_swigt__p_boost__optionalT_openstudio__model__HVACComponent_t,
  &_swigt__p_boost__optionalT_openstudio__model__HeatBalanceAlgorithm_t,
  &_swigt__p_boost__optionalT_openstudio__model__HotWaterEquipmentDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__HotWaterEquipment_t,
  &_swigt__p_boost__optionalT_openstudio__model__IlluminanceMap_t,
  &_swigt__p_boost__optionalT_openstudio__model__InfraredTransparentMaterial_t,
  &_swigt__p_boost__optionalT_openstudio__model__InsideSurfaceConvectionAlgorithm_t,
  &_swigt__p_boost__optionalT_openstudio__model__InteriorPartitionSurfaceGroup_t,
  &_swigt__p_boost__optionalT_openstudio__model__InteriorPartitionSurface_t,
  &_swigt__p_boost__optionalT_openstudio__model__InternalMassDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__InternalMass_t,
  &_swigt__p_boost__optionalT_openstudio__model__LayeredConstruction_t,
  &_swigt__p_boost__optionalT_openstudio__model__LifeCycleCost_Parameters_t,
  &_swigt__p_boost__optionalT_openstudio__model__LightingDesignDay_t,
  &_swigt__p_boost__optionalT_openstudio__model__LightingSimulationControl_t,
  &_swigt__p_boost__optionalT_openstudio__model__LightingSimulationZone_t,
  &_swigt__p_boost__optionalT_openstudio__model__LightsDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__Lights_t,
  &_swigt__p_boost__optionalT_openstudio__model__Loop_t,
  &_swigt__p_boost__optionalT_openstudio__model__LuminaireDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__Luminaire_t,
  &_swigt__p_boost__optionalT_openstudio__model__MasslessOpaqueMaterial_t,
  &_swigt__p_boost__optionalT_openstudio__model__Material_t,
  &_swigt__p_boost__optionalT_openstudio__model__Meter_t,
  &_swigt__p_boost__optionalT_openstudio__model__Mixer_t,
  &_swigt__p_boost__optionalT_openstudio__model__ModelObject_t,
  &_swigt__p_boost__optionalT_openstudio__model__ModelPartitionMaterial_t,
  &_swigt__p_boost__optionalT_openstudio__model__Model_t,
  &_swigt__p_boost__optionalT_openstudio__model__Node_t,
  &_swigt__p_boost__optionalT_openstudio__model__OpaqueMaterial_t,
  &_swigt__p_boost__optionalT_openstudio__model__OtherEquipmentDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__OtherEquipment_t,
  &_swigt__p_boost__optionalT_openstudio__model__OutputVariable_t,
  &_swigt__p_boost__optionalT_openstudio__model__OutsideSurfaceConvectionAlgorithm_t,
  &_swigt__p_boost__optionalT_openstudio__model__ParentObject_t,
  &_swigt__p_boost__optionalT_openstudio__model__PeopleDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__People_t,
  &_swigt__p_boost__optionalT_openstudio__model__PipeAdiabatic_t,
  &_swigt__p_boost__optionalT_openstudio__model__PlanarSurfaceGroup_t,
  &_swigt__p_boost__optionalT_openstudio__model__PlanarSurface_t,
  &_swigt__p_boost__optionalT_openstudio__model__PlantLoop_t,
  &_swigt__p_boost__optionalT_openstudio__model__PortList_t,
  &_swigt__p_boost__optionalT_openstudio__model__PumpVariableSpeed_t,
  &_swigt__p_boost__optionalT_openstudio__model__RadianceParameters_t,
  &_swigt__p_boost__optionalT_openstudio__model__RefractionExtinctionGlazing_t,
  &_swigt__p_boost__optionalT_openstudio__model__Relationship_t,
  &_swigt__p_boost__optionalT_openstudio__model__RenderingColor_t,
  &_swigt__p_boost__optionalT_openstudio__model__ResourceObject_t,
  &_swigt__p_boost__optionalT_openstudio__model__RoofVegetation_t,
  &_swigt__p_boost__optionalT_openstudio__model__RunPeriodControlDaylightSavingTime_t,
  &_swigt__p_boost__optionalT_openstudio__model__RunPeriodControlSpecialDays_t,
  &_swigt__p_boost__optionalT_openstudio__model__RunPeriod_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleBase_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleCompact_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleConstant_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleDay_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleFixedInterval_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleInterval_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleRule_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleRuleset_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleTypeLimits_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleVariableInterval_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleWeek_t,
  &_swigt__p_boost__optionalT_openstudio__model__ScheduleYear_t,
  &_swigt__p_boost__optionalT_openstudio__model__Schedule_t,
  &_swigt__p_boost__optionalT_openstudio__model__Screen_t,
  &_swigt__p_boost__optionalT_openstudio__model__SetpointManagerMixedAir_t,
  &_swigt__p_boost__optionalT_openstudio__model__SetpointManagerSingleZoneReheat_t,
  &_swigt__p_boost__optionalT_openstudio__model__Shade_t,
  &_swigt__p_boost__optionalT_openstudio__model__ShadingMaterial_t,
  &_swigt__p_boost__optionalT_openstudio__model__ShadingSurfaceGroup_t,
  &_swigt__p_boost__optionalT_openstudio__model__ShadingSurface_t,
  &_swigt__p_boost__optionalT_openstudio__model__ShadowCalculation_t,
  &_swigt__p_boost__optionalT_openstudio__model__SimpleGlazing_t,
  &_swigt__p_boost__optionalT_openstudio__model__SimulationControl_t,
  &_swigt__p_boost__optionalT_openstudio__model__SiteGroundReflectance_t,
  &_swigt__p_boost__optionalT_openstudio__model__SiteGroundTemperatureBuildingSurface_t,
  &_swigt__p_boost__optionalT_openstudio__model__SiteWaterMainsTemperature_t,
  &_swigt__p_boost__optionalT_openstudio__model__Site_t,
  &_swigt__p_boost__optionalT_openstudio__model__SizingParameters_t,
  &_swigt__p_boost__optionalT_openstudio__model__SizingPeriod_t,
  &_swigt__p_boost__optionalT_openstudio__model__SizingPlant_t,
  &_swigt__p_boost__optionalT_openstudio__model__SizingSystem_t,
  &_swigt__p_boost__optionalT_openstudio__model__SizingZone_t,
  &_swigt__p_boost__optionalT_openstudio__model__SkyTemperature_t,
  &_swigt__p_boost__optionalT_openstudio__model__SpaceInfiltrationDesignFlowRate_t,
  &_swigt__p_boost__optionalT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t,
  &_swigt__p_boost__optionalT_openstudio__model__SpaceItem_t,
  &_swigt__p_boost__optionalT_openstudio__model__SpaceLoadDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__SpaceLoadInstance_t,
  &_swigt__p_boost__optionalT_openstudio__model__SpaceLoad_t,
  &_swigt__p_boost__optionalT_openstudio__model__SpaceType_t,
  &_swigt__p_boost__optionalT_openstudio__model__Space_t,
  &_swigt__p_boost__optionalT_openstudio__model__Splitter_t,
  &_swigt__p_boost__optionalT_openstudio__model__StandardGlazing_t,
  &_swigt__p_boost__optionalT_openstudio__model__StandardOpaqueMaterial_t,
  &_swigt__p_boost__optionalT_openstudio__model__SteamEquipmentDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__SteamEquipment_t,
  &_swigt__p_boost__optionalT_openstudio__model__StraightComponent_t,
  &_swigt__p_boost__optionalT_openstudio__model__SubSurface_t,
  &_swigt__p_boost__optionalT_openstudio__model__Surface_t,
  &_swigt__p_boost__optionalT_openstudio__model__ThermalZone_t,
  &_swigt__p_boost__optionalT_openstudio__model__ThermochromicGlazing_t,
  &_swigt__p_boost__optionalT_openstudio__model__ThermostatSetpointDualSetpoint_t,
  &_swigt__p_boost__optionalT_openstudio__model__TimeDependentValuation_t,
  &_swigt__p_boost__optionalT_openstudio__model__Timestep_t,
  &_swigt__p_boost__optionalT_openstudio__model__Version_t,
  &_swigt__p_boost__optionalT_openstudio__model__WaterHeaterMixed_t,
  &_swigt__p_boost__optionalT_openstudio__model__WaterToAirComponent_t,
  &_swigt__p_boost__optionalT_openstudio__model__WaterToWaterComponent_t,
  &_swigt__p_boost__optionalT_openstudio__model__WaterUseConnections_t,
  &_swigt__p_boost__optionalT_openstudio__model__WaterUseEquipmentDefinition_t,
  &_swigt__p_boost__optionalT_openstudio__model__WaterUseEquipment_t,
  &_swigt__p_boost__optionalT_openstudio__model__WeatherFileConditionType_t,
  &_swigt__p_boost__optionalT_openstudio__model__WeatherFileDays_t,
  &_swigt__p_boost__optionalT_openstudio__model__WeatherFile_t,
  &_swigt__p_boost__optionalT_openstudio__model__WindowDataFile_t,
  &_swigt__p_boost__optionalT_openstudio__model__YearDescription_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneAirContaminantBalance_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneHVACComponent_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneHVACEquipmentList_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneHVACFourPipeFanCoil_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t,
  &_swigt__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t,
  &_swigt__p_boost__optionalT_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t_t,
  &_swigt__p_boost__optionalT_std__string_t,
  &_swigt__p_boost__optionalT_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t_t,
  &_swigt__p_boost__optionalT_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t_t,
  &_swigt__p_boost__optionalT_unsigned_int_t,
  &_swigt__p_char,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_first_type,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_openstudio__EndUses,
  &_swigt__p_openstudio__SingletonT_openstudio__ApplicationSingleton_t,
  &_swigt__p_openstudio__SingletonT_openstudio__LoggerSingleton_t,
  &_swigt__p_openstudio__SingletonT_openstudio__model__ScheduleTypeRegistrySingleton_t,
  &_swigt__p_openstudio__UUID,
  &_swigt__p_openstudio__isomodel__ForwardTranslator,
  &_swigt__p_openstudio__isomodel__SimModel,
  &_swigt__p_openstudio__isomodel__UserModel,
  &_swigt__p_openstudio__model__Component,
  &_swigt__p_openstudio__model__Model,
  &_swigt__p_reference,
  &_swigt__p_second_type,
  &_swigt__p_size_type,
  &_swigt__p_std__mapT_openstudio__UUID_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_std__pairT_openstudio__UUID_const_openstudio__UUID_t_t_t,
  &_swigt__p_std__pairT_openstudio__IdfObject_openstudio__IdfObject_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_double_std__lessT_double_t_std__allocatorT_double_t_t,
  &_swigt__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,
  &_swigt__p_std__setT_openstudio__DataError_openstudio__DataErrorLess_std__allocatorT_openstudio__DataError_t_t,
  &_swigt__p_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t,
  &_swigt__p_std__setT_openstudio__ReportingFrequency_std__lessT_openstudio__ReportingFrequency_t_std__allocatorT_openstudio__ReportingFrequency_t_t,
  &_swigt__p_std__setT_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_openstudio__UUID_t_t,
  &_swigt__p_std__setT_std__string_IstringCompare_std__allocatorT_std__string_t_t,
  &_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  &_swigt__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_openstudio__AttributeDescription_std__allocatorT_openstudio__AttributeDescription_t_t,
  &_swigt__p_std__vectorT_openstudio__Attribute_std__allocatorT_openstudio__Attribute_t_t,
  &_swigt__p_std__vectorT_openstudio__BCLMeasure_std__allocatorT_openstudio__BCLMeasure_t_t,
  &_swigt__p_std__vectorT_openstudio__BTUUnit_std__allocatorT_openstudio__BTUUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__BoundingBox_std__allocatorT_openstudio__BoundingBox_t_t,
  &_swigt__p_std__vectorT_openstudio__CFMUnit_std__allocatorT_openstudio__CFMUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__Calendar_std__allocatorT_openstudio__Calendar_t_t,
  &_swigt__p_std__vectorT_openstudio__CelciusUnit_std__allocatorT_openstudio__CelciusUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__DataError_std__allocatorT_openstudio__DataError_t_t,
  &_swigt__p_std__vectorT_openstudio__DateTime_std__allocatorT_openstudio__DateTime_t_t,
  &_swigt__p_std__vectorT_openstudio__Date_std__allocatorT_openstudio__Date_t_t,
  &_swigt__p_std__vectorT_openstudio__DocumentElement_std__allocatorT_openstudio__DocumentElement_t_t,
  &_swigt__p_std__vectorT_openstudio__EulerAngles_std__allocatorT_openstudio__EulerAngles_t_t,
  &_swigt__p_std__vectorT_openstudio__FahrenheitUnit_std__allocatorT_openstudio__FahrenheitUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__FileReference_std__allocatorT_openstudio__FileReference_t_t,
  &_swigt__p_std__vectorT_openstudio__FuelType_std__allocatorT_openstudio__FuelType_t_t,
  &_swigt__p_std__vectorT_openstudio__GPDUnit_std__allocatorT_openstudio__GPDUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__IPUnit_std__allocatorT_openstudio__IPUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__IddField_std__allocatorT_openstudio__IddField_t_t,
  &_swigt__p_std__vectorT_openstudio__IddFile_std__allocatorT_openstudio__IddFile_t_t,
  &_swigt__p_std__vectorT_openstudio__IddKey_std__allocatorT_openstudio__IddKey_t_t,
  &_swigt__p_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t,
  &_swigt__p_std__vectorT_openstudio__IddObject_std__allocatorT_openstudio__IddObject_t_t,
  &_swigt__p_std__vectorT_openstudio__IdfExtensibleGroup_std__allocatorT_openstudio__IdfExtensibleGroup_t_t,
  &_swigt__p_std__vectorT_openstudio__IdfFile_std__allocatorT_openstudio__IdfFile_t_t,
  &_swigt__p_std__vectorT_openstudio__IdfObject_std__allocatorT_openstudio__IdfObject_t_t,
  &_swigt__p_std__vectorT_openstudio__ImfFile_std__allocatorT_openstudio__ImfFile_t_t,
  &_swigt__p_std__vectorT_openstudio__MPHUnit_std__allocatorT_openstudio__MPHUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__Misc1Unit_std__allocatorT_openstudio__Misc1Unit_t_t,
  &_swigt__p_std__vectorT_openstudio__Plane_std__allocatorT_openstudio__Plane_t_t,
  &_swigt__p_std__vectorT_openstudio__Point3d_std__allocatorT_openstudio__Point3d_t_t,
  &_swigt__p_std__vectorT_openstudio__Quantity_std__allocatorT_openstudio__Quantity_t_t,
  &_swigt__p_std__vectorT_openstudio__ReportingFrequency_std__allocatorT_openstudio__ReportingFrequency_t_t,
  &_swigt__p_std__vectorT_openstudio__SIUnit_std__allocatorT_openstudio__SIUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__SectionElement_std__allocatorT_openstudio__SectionElement_t_t,
  &_swigt__p_std__vectorT_openstudio__Section_std__allocatorT_openstudio__Section_t_t,
  &_swigt__p_std__vectorT_openstudio__SqlFileTimeSeriesQuery_std__allocatorT_openstudio__SqlFileTimeSeriesQuery_t_t,
  &_swigt__p_std__vectorT_openstudio__TableElement_std__allocatorT_openstudio__TableElement_t_t,
  &_swigt__p_std__vectorT_openstudio__Table_std__allocatorT_openstudio__Table_t_t,
  &_swigt__p_std__vectorT_openstudio__Tag_std__allocatorT_openstudio__Tag_t_t,
  &_swigt__p_std__vectorT_openstudio__TemperatureUnit_std__allocatorT_openstudio__TemperatureUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__Text_std__allocatorT_openstudio__Text_t_t,
  &_swigt__p_std__vectorT_openstudio__ThermUnit_std__allocatorT_openstudio__ThermUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__TimeSeries_std__allocatorT_openstudio__TimeSeries_t_t,
  &_swigt__p_std__vectorT_openstudio__Time_std__allocatorT_openstudio__Time_t_t,
  &_swigt__p_std__vectorT_openstudio__Transformation_std__allocatorT_openstudio__Transformation_t_t,
  &_swigt__p_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t,
  &_swigt__p_std__vectorT_openstudio__Unit_std__allocatorT_openstudio__Unit_t_t,
  &_swigt__p_std__vectorT_openstudio__Vector3d_std__allocatorT_openstudio__Vector3d_t_t,
  &_swigt__p_std__vectorT_openstudio__WhUnit_std__allocatorT_openstudio__WhUnit_t_t,
  &_swigt__p_std__vectorT_openstudio__WorkspaceObject_std__allocatorT_openstudio__WorkspaceObject_t_t,
  &_swigt__p_std__vectorT_openstudio__Workspace_std__allocatorT_openstudio__Workspace_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirGap_std__allocatorT_openstudio__model__AirGap_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirLoopHVACOutdoorAirSystem_std__allocatorT_openstudio__model__AirLoopHVACOutdoorAirSystem_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_std__allocatorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirLoopHVACZoneMixer_std__allocatorT_openstudio__model__AirLoopHVACZoneMixer_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirLoopHVACZoneSplitter_std__allocatorT_openstudio__model__AirLoopHVACZoneSplitter_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirLoopHVAC_std__allocatorT_openstudio__model__AirLoopHVAC_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_std__allocatorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirTerminalSingleDuctUncontrolled_std__allocatorT_openstudio__model__AirTerminalSingleDuctUncontrolled_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AirWallMaterial_std__allocatorT_openstudio__model__AirWallMaterial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__AvailabilityManagerScheduled_std__allocatorT_openstudio__model__AvailabilityManagerScheduled_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Blind_std__allocatorT_openstudio__model__Blind_t_t,
  &_swigt__p_std__vectorT_openstudio__model__BoilerHotWater_std__allocatorT_openstudio__model__BoilerHotWater_t_t,
  &_swigt__p_std__vectorT_openstudio__model__BuildingStory_std__allocatorT_openstudio__model__BuildingStory_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Building_std__allocatorT_openstudio__model__Building_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CFactorUndergroundWallConstruction_std__allocatorT_openstudio__model__CFactorUndergroundWallConstruction_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ChillerElectricEIR_std__allocatorT_openstudio__model__ChillerElectricEIR_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ClimateZone_std__allocatorT_openstudio__model__ClimateZone_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CoilCoolingDXSingleSpeed_std__allocatorT_openstudio__model__CoilCoolingDXSingleSpeed_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CoilCoolingDXTwoSpeed_std__allocatorT_openstudio__model__CoilCoolingDXTwoSpeed_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CoilHeatingDXSingleSpeed_std__allocatorT_openstudio__model__CoilHeatingDXSingleSpeed_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CoilHeatingElectric_std__allocatorT_openstudio__model__CoilHeatingElectric_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CoilHeatingGas_std__allocatorT_openstudio__model__CoilHeatingGas_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ComponentCost_LineItem_std__allocatorT_openstudio__model__ComponentCost_LineItem_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ComponentData_std__allocatorT_openstudio__model__ComponentData_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Component_std__allocatorT_openstudio__model__Component_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ConstructionBaseStandardsInformation_std__allocatorT_openstudio__model__ConstructionBaseStandardsInformation_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ConstructionBase_std__allocatorT_openstudio__model__ConstructionBase_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ConstructionWithInternalSource_std__allocatorT_openstudio__model__ConstructionWithInternalSource_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Construction_std__allocatorT_openstudio__model__Construction_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ControllerMechanicalVentilation_std__allocatorT_openstudio__model__ControllerMechanicalVentilation_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ControllerOutdoorAir_std__allocatorT_openstudio__model__ControllerOutdoorAir_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ControllerWaterCoil_std__allocatorT_openstudio__model__ControllerWaterCoil_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ConvergenceLimits_std__allocatorT_openstudio__model__ConvergenceLimits_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CoolingTowerSingleSpeed_std__allocatorT_openstudio__model__CoolingTowerSingleSpeed_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveBicubic_std__allocatorT_openstudio__model__CurveBicubic_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveBiquadratic_std__allocatorT_openstudio__model__CurveBiquadratic_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveCubic_std__allocatorT_openstudio__model__CurveCubic_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveDoubleExponentialDecay_std__allocatorT_openstudio__model__CurveDoubleExponentialDecay_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveExponent_std__allocatorT_openstudio__model__CurveExponent_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveExponentialDecay_std__allocatorT_openstudio__model__CurveExponentialDecay_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveExponentialSkewNormal_std__allocatorT_openstudio__model__CurveExponentialSkewNormal_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveFanPressureRise_std__allocatorT_openstudio__model__CurveFanPressureRise_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveFunctionalPressureDrop_std__allocatorT_openstudio__model__CurveFunctionalPressureDrop_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveLinear_std__allocatorT_openstudio__model__CurveLinear_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveQuadraticLinear_std__allocatorT_openstudio__model__CurveQuadraticLinear_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveQuadratic_std__allocatorT_openstudio__model__CurveQuadratic_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveQuartic_std__allocatorT_openstudio__model__CurveQuartic_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveRectangularHyperbola1_std__allocatorT_openstudio__model__CurveRectangularHyperbola1_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveRectangularHyperbola2_std__allocatorT_openstudio__model__CurveRectangularHyperbola2_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveSigmoid_std__allocatorT_openstudio__model__CurveSigmoid_t_t,
  &_swigt__p_std__vectorT_openstudio__model__CurveTriquadratic_std__allocatorT_openstudio__model__CurveTriquadratic_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Curve_std__allocatorT_openstudio__model__Curve_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DaylightingControl_std__allocatorT_openstudio__model__DaylightingControl_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DaylightingDeviceShelf_std__allocatorT_openstudio__model__DaylightingDeviceShelf_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DefaultConstructionSet_std__allocatorT_openstudio__model__DefaultConstructionSet_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DefaultScheduleSet_std__allocatorT_openstudio__model__DefaultScheduleSet_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DefaultSubSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSubSurfaceConstructions_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DefaultSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSurfaceConstructions_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DesignDay_std__allocatorT_openstudio__model__DesignDay_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DesignSpecificationOutdoorAir_std__allocatorT_openstudio__model__DesignSpecificationOutdoorAir_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DistrictCooling_std__allocatorT_openstudio__model__DistrictCooling_t_t,
  &_swigt__p_std__vectorT_openstudio__model__DistrictHeating_std__allocatorT_openstudio__model__DistrictHeating_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ElectricEquipmentDefinition_std__allocatorT_openstudio__model__ElectricEquipmentDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ElectricEquipment_std__allocatorT_openstudio__model__ElectricEquipment_t_t,
  &_swigt__p_std__vectorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_std__allocatorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ExteriorLightsDefinition_std__allocatorT_openstudio__model__ExteriorLightsDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ExteriorLights_std__allocatorT_openstudio__model__ExteriorLights_t_t,
  &_swigt__p_std__vectorT_openstudio__model__FFactorGroundFloorConstruction_std__allocatorT_openstudio__model__FFactorGroundFloorConstruction_t_t,
  &_swigt__p_std__vectorT_openstudio__model__FanConstantVolume_std__allocatorT_openstudio__model__FanConstantVolume_t_t,
  &_swigt__p_std__vectorT_openstudio__model__FanVariableVolume_std__allocatorT_openstudio__model__FanVariableVolume_t_t,
  &_swigt__p_std__vectorT_openstudio__model__FenestrationMaterial_std__allocatorT_openstudio__model__FenestrationMaterial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__FieldViewer_std__allocatorT_openstudio__model__FieldViewer_t_t,
  &_swigt__p_std__vectorT_openstudio__model__GasEquipmentDefinition_std__allocatorT_openstudio__model__GasEquipmentDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__GasEquipment_std__allocatorT_openstudio__model__GasEquipment_t_t,
  &_swigt__p_std__vectorT_openstudio__model__GasLayer_std__allocatorT_openstudio__model__GasLayer_t_t,
  &_swigt__p_std__vectorT_openstudio__model__GasMixture_std__allocatorT_openstudio__model__GasMixture_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Gas_std__allocatorT_openstudio__model__Gas_t_t,
  &_swigt__p_std__vectorT_openstudio__model__GenericModelObject_std__allocatorT_openstudio__model__GenericModelObject_t_t,
  &_swigt__p_std__vectorT_openstudio__model__GlareSensor_std__allocatorT_openstudio__model__GlareSensor_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Glazing_std__allocatorT_openstudio__model__Glazing_t_t,
  &_swigt__p_std__vectorT_openstudio__model__HeatBalanceAlgorithm_std__allocatorT_openstudio__model__HeatBalanceAlgorithm_t_t,
  &_swigt__p_std__vectorT_openstudio__model__HotWaterEquipmentDefinition_std__allocatorT_openstudio__model__HotWaterEquipmentDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__HotWaterEquipment_std__allocatorT_openstudio__model__HotWaterEquipment_t_t,
  &_swigt__p_std__vectorT_openstudio__model__IlluminanceMap_std__allocatorT_openstudio__model__IlluminanceMap_t_t,
  &_swigt__p_std__vectorT_openstudio__model__InfraredTransparentMaterial_std__allocatorT_openstudio__model__InfraredTransparentMaterial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__InteriorPartitionSurfaceGroup_std__allocatorT_openstudio__model__InteriorPartitionSurfaceGroup_t_t,
  &_swigt__p_std__vectorT_openstudio__model__InteriorPartitionSurface_std__allocatorT_openstudio__model__InteriorPartitionSurface_t_t,
  &_swigt__p_std__vectorT_openstudio__model__InternalMassDefinition_std__allocatorT_openstudio__model__InternalMassDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__InternalMass_std__allocatorT_openstudio__model__InternalMass_t_t,
  &_swigt__p_std__vectorT_openstudio__model__LayeredConstruction_std__allocatorT_openstudio__model__LayeredConstruction_t_t,
  &_swigt__p_std__vectorT_openstudio__model__LifeCycleCost_Parameters_std__allocatorT_openstudio__model__LifeCycleCost_Parameters_t_t,
  &_swigt__p_std__vectorT_openstudio__model__LightingDesignDay_std__allocatorT_openstudio__model__LightingDesignDay_t_t,
  &_swigt__p_std__vectorT_openstudio__model__LightingSimulationControl_std__allocatorT_openstudio__model__LightingSimulationControl_t_t,
  &_swigt__p_std__vectorT_openstudio__model__LightingSimulationZone_std__allocatorT_openstudio__model__LightingSimulationZone_t_t,
  &_swigt__p_std__vectorT_openstudio__model__LightsDefinition_std__allocatorT_openstudio__model__LightsDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Lights_std__allocatorT_openstudio__model__Lights_t_t,
  &_swigt__p_std__vectorT_openstudio__model__LuminaireDefinition_std__allocatorT_openstudio__model__LuminaireDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Luminaire_std__allocatorT_openstudio__model__Luminaire_t_t,
  &_swigt__p_std__vectorT_openstudio__model__MasslessOpaqueMaterial_std__allocatorT_openstudio__model__MasslessOpaqueMaterial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Material_std__allocatorT_openstudio__model__Material_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Meter_std__allocatorT_openstudio__model__Meter_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ModelObject_std__allocatorT_openstudio__model__ModelObject_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ModelPartitionMaterial_std__allocatorT_openstudio__model__ModelPartitionMaterial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Model_std__allocatorT_openstudio__model__Model_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Node_std__allocatorT_openstudio__model__Node_t_t,
  &_swigt__p_std__vectorT_openstudio__model__OpaqueMaterial_std__allocatorT_openstudio__model__OpaqueMaterial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__OtherEquipmentDefinition_std__allocatorT_openstudio__model__OtherEquipmentDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__OtherEquipment_std__allocatorT_openstudio__model__OtherEquipment_t_t,
  &_swigt__p_std__vectorT_openstudio__model__OutputVariable_std__allocatorT_openstudio__model__OutputVariable_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ParentObject_std__allocatorT_openstudio__model__ParentObject_t_t,
  &_swigt__p_std__vectorT_openstudio__model__PeopleDefinition_std__allocatorT_openstudio__model__PeopleDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__People_std__allocatorT_openstudio__model__People_t_t,
  &_swigt__p_std__vectorT_openstudio__model__PipeAdiabatic_std__allocatorT_openstudio__model__PipeAdiabatic_t_t,
  &_swigt__p_std__vectorT_openstudio__model__PlanarSurfaceGroup_std__allocatorT_openstudio__model__PlanarSurfaceGroup_t_t,
  &_swigt__p_std__vectorT_openstudio__model__PlanarSurface_std__allocatorT_openstudio__model__PlanarSurface_t_t,
  &_swigt__p_std__vectorT_openstudio__model__PortList_std__allocatorT_openstudio__model__PortList_t_t,
  &_swigt__p_std__vectorT_openstudio__model__PumpVariableSpeed_std__allocatorT_openstudio__model__PumpVariableSpeed_t_t,
  &_swigt__p_std__vectorT_openstudio__model__RadianceParameters_std__allocatorT_openstudio__model__RadianceParameters_t_t,
  &_swigt__p_std__vectorT_openstudio__model__RefractionExtinctionGlazing_std__allocatorT_openstudio__model__RefractionExtinctionGlazing_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Relationship_std__allocatorT_openstudio__model__Relationship_t_t,
  &_swigt__p_std__vectorT_openstudio__model__RenderingColor_std__allocatorT_openstudio__model__RenderingColor_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ResourceObject_std__allocatorT_openstudio__model__ResourceObject_t_t,
  &_swigt__p_std__vectorT_openstudio__model__RoofVegetation_std__allocatorT_openstudio__model__RoofVegetation_t_t,
  &_swigt__p_std__vectorT_openstudio__model__RunPeriodControlDaylightSavingTime_std__allocatorT_openstudio__model__RunPeriodControlDaylightSavingTime_t_t,
  &_swigt__p_std__vectorT_openstudio__model__RunPeriodControlSpecialDays_std__allocatorT_openstudio__model__RunPeriodControlSpecialDays_t_t,
  &_swigt__p_std__vectorT_openstudio__model__RunPeriod_std__allocatorT_openstudio__model__RunPeriod_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleBase_std__allocatorT_openstudio__model__ScheduleBase_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleCompact_std__allocatorT_openstudio__model__ScheduleCompact_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleConstant_std__allocatorT_openstudio__model__ScheduleConstant_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleDay_std__allocatorT_openstudio__model__ScheduleDay_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleFixedInterval_std__allocatorT_openstudio__model__ScheduleFixedInterval_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleInterval_std__allocatorT_openstudio__model__ScheduleInterval_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleRule_std__allocatorT_openstudio__model__ScheduleRule_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleRuleset_std__allocatorT_openstudio__model__ScheduleRuleset_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleTypeLimits_std__allocatorT_openstudio__model__ScheduleTypeLimits_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleType_std__allocatorT_openstudio__model__ScheduleType_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleVariableInterval_std__allocatorT_openstudio__model__ScheduleVariableInterval_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleWeek_std__allocatorT_openstudio__model__ScheduleWeek_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ScheduleYear_std__allocatorT_openstudio__model__ScheduleYear_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Schedule_std__allocatorT_openstudio__model__Schedule_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Screen_std__allocatorT_openstudio__model__Screen_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SetpointManagerMixedAir_std__allocatorT_openstudio__model__SetpointManagerMixedAir_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SetpointManagerSingleZoneReheat_std__allocatorT_openstudio__model__SetpointManagerSingleZoneReheat_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Shade_std__allocatorT_openstudio__model__Shade_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ShadingMaterial_std__allocatorT_openstudio__model__ShadingMaterial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ShadingSurfaceGroup_std__allocatorT_openstudio__model__ShadingSurfaceGroup_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ShadingSurface_std__allocatorT_openstudio__model__ShadingSurface_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SimpleGlazing_std__allocatorT_openstudio__model__SimpleGlazing_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SiteGroundReflectance_std__allocatorT_openstudio__model__SiteGroundReflectance_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SiteGroundTemperatureBuildingSurface_std__allocatorT_openstudio__model__SiteGroundTemperatureBuildingSurface_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SiteWaterMainsTemperature_std__allocatorT_openstudio__model__SiteWaterMainsTemperature_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Site_std__allocatorT_openstudio__model__Site_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SizingParameters_std__allocatorT_openstudio__model__SizingParameters_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SizingPeriod_std__allocatorT_openstudio__model__SizingPeriod_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SizingPlant_std__allocatorT_openstudio__model__SizingPlant_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SizingSystem_std__allocatorT_openstudio__model__SizingSystem_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SizingZone_std__allocatorT_openstudio__model__SizingZone_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SkyTemperature_std__allocatorT_openstudio__model__SkyTemperature_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SpaceInfiltrationDesignFlowRate_std__allocatorT_openstudio__model__SpaceInfiltrationDesignFlowRate_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_std__allocatorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SpaceItem_std__allocatorT_openstudio__model__SpaceItem_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SpaceLoadDefinition_std__allocatorT_openstudio__model__SpaceLoadDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SpaceLoadInstance_std__allocatorT_openstudio__model__SpaceLoadInstance_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SpaceLoad_std__allocatorT_openstudio__model__SpaceLoad_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SpaceType_std__allocatorT_openstudio__model__SpaceType_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Space_std__allocatorT_openstudio__model__Space_t_t,
  &_swigt__p_std__vectorT_openstudio__model__StandardGlazing_std__allocatorT_openstudio__model__StandardGlazing_t_t,
  &_swigt__p_std__vectorT_openstudio__model__StandardOpaqueMaterial_std__allocatorT_openstudio__model__StandardOpaqueMaterial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SteamEquipmentDefinition_std__allocatorT_openstudio__model__SteamEquipmentDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SteamEquipment_std__allocatorT_openstudio__model__SteamEquipment_t_t,
  &_swigt__p_std__vectorT_openstudio__model__StraightComponent_std__allocatorT_openstudio__model__StraightComponent_t_t,
  &_swigt__p_std__vectorT_openstudio__model__SubSurface_std__allocatorT_openstudio__model__SubSurface_t_t,
  &_swigt__p_std__vectorT_openstudio__model__Surface_std__allocatorT_openstudio__model__Surface_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ThermalZone_std__allocatorT_openstudio__model__ThermalZone_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ThermochromicGlazing_std__allocatorT_openstudio__model__ThermochromicGlazing_t_t,
  &_swigt__p_std__vectorT_openstudio__model__WaterHeaterMixed_std__allocatorT_openstudio__model__WaterHeaterMixed_t_t,
  &_swigt__p_std__vectorT_openstudio__model__WaterUseConnections_std__allocatorT_openstudio__model__WaterUseConnections_t_t,
  &_swigt__p_std__vectorT_openstudio__model__WaterUseEquipmentDefinition_std__allocatorT_openstudio__model__WaterUseEquipmentDefinition_t_t,
  &_swigt__p_std__vectorT_openstudio__model__WaterUseEquipment_std__allocatorT_openstudio__model__WaterUseEquipment_t_t,
  &_swigt__p_std__vectorT_openstudio__model__WeatherFileConditionType_std__allocatorT_openstudio__model__WeatherFileConditionType_t_t,
  &_swigt__p_std__vectorT_openstudio__model__WeatherFileDays_std__allocatorT_openstudio__model__WeatherFileDays_t_t,
  &_swigt__p_std__vectorT_openstudio__model__WeatherFile_std__allocatorT_openstudio__model__WeatherFile_t_t,
  &_swigt__p_std__vectorT_openstudio__model__WindowDataFile_std__allocatorT_openstudio__model__WindowDataFile_t_t,
  &_swigt__p_std__vectorT_openstudio__model__YearDescription_std__allocatorT_openstudio__model__YearDescription_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ZoneAirContaminantBalance_std__allocatorT_openstudio__model__ZoneAirContaminantBalance_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_std__allocatorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_std__allocatorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ZoneHVACEquipmentList_std__allocatorT_openstudio__model__ZoneHVACEquipmentList_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ZoneHVACFourPipeFanCoil_std__allocatorT_openstudio__model__ZoneHVACFourPipeFanCoil_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_std__allocatorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t_t,
  &_swigt__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__wstring,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_value_type,
  &_swigt__p_void,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_ConstPtr[] = {  {&_swigt__p_ConstPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstVec[] = {  {&_swigt__p_ConstVec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstWeakPtr[] = {  {&_swigt__p_ConstWeakPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImplPtr[] = {  {&_swigt__p_ImplPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImplType[] = {  {&_swigt__p_ImplType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ptr[] = {  {&_swigt__p_Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec[] = {  {&_swigt__p_Vec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WeakPtr[] = {  {&_swigt__p_WeakPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__log__sinks__synchronous_sinkT_boost__log__sinks__text_ostream_backend_t[] = {  {&_swigt__p_boost__log__sinks__synchronous_sinkT_boost__log__sinks__text_ostream_backend_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__log__sources__severity_channel_logger_mtT_LogLevel_t[] = {  {&_swigt__p_boost__log__sources__severity_channel_logger_mtT_LogLevel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_QUrl_t[] = {  {&_swigt__p_boost__optionalT_QUrl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_double_t[] = {  {&_swigt__p_boost__optionalT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_int_t[] = {  {&_swigt__p_boost__optionalT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__AttributeDescription_t[] = {  {&_swigt__p_boost__optionalT_openstudio__AttributeDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Attribute_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Attribute_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__BCLMeasure_t[] = {  {&_swigt__p_boost__optionalT_openstudio__BCLMeasure_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__BTUUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__BTUUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__BoundingBox_t[] = {  {&_swigt__p_boost__optionalT_openstudio__BoundingBox_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__CFMUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__CFMUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Calendar_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Calendar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__CelciusUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__CelciusUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__DataError_t[] = {  {&_swigt__p_boost__optionalT_openstudio__DataError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__DateTime_t[] = {  {&_swigt__p_boost__optionalT_openstudio__DateTime_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Date_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Date_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__DocumentElement_t[] = {  {&_swigt__p_boost__optionalT_openstudio__DocumentElement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Document_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Document_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__EnvironmentIdentifier_t[] = {  {&_swigt__p_boost__optionalT_openstudio__EnvironmentIdentifier_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__EnvironmentType_t[] = {  {&_swigt__p_boost__optionalT_openstudio__EnvironmentType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__EulerAngles_t[] = {  {&_swigt__p_boost__optionalT_openstudio__EulerAngles_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__FahrenheitUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__FahrenheitUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__FileReference_t[] = {  {&_swigt__p_boost__optionalT_openstudio__FileReference_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__FuelType_t[] = {  {&_swigt__p_boost__optionalT_openstudio__FuelType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__GPDUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__GPDUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__IPUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__IPUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__IddField_t[] = {  {&_swigt__p_boost__optionalT_openstudio__IddField_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__IddFile_t[] = {  {&_swigt__p_boost__optionalT_openstudio__IddFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__IddKey_t[] = {  {&_swigt__p_boost__optionalT_openstudio__IddKey_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__IddObject_t[] = {  {&_swigt__p_boost__optionalT_openstudio__IddObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__IdfFile_t[] = {  {&_swigt__p_boost__optionalT_openstudio__IdfFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__IdfObject_t[] = {  {&_swigt__p_boost__optionalT_openstudio__IdfObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__ImfFile_t[] = {  {&_swigt__p_boost__optionalT_openstudio__ImfFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__KeyValueIdentifier_t[] = {  {&_swigt__p_boost__optionalT_openstudio__KeyValueIdentifier_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__MPHUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__MPHUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Misc1Unit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Misc1Unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Plane_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Plane_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Point3d_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Point3d_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Quantity_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Quantity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__ReportingFrequency_t[] = {  {&_swigt__p_boost__optionalT_openstudio__ReportingFrequency_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__SIUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__SIUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__SectionElement_t[] = {  {&_swigt__p_boost__optionalT_openstudio__SectionElement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__SectionHeading_t[] = {  {&_swigt__p_boost__optionalT_openstudio__SectionHeading_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Section_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Section_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__SqlFile_t[] = {  {&_swigt__p_boost__optionalT_openstudio__SqlFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Table_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Table_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Tag_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Tag_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__TemperatureUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__TemperatureUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Text_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Text_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__ThermUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__ThermUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__TimeDependentValuationFile_t[] = {  {&_swigt__p_boost__optionalT_openstudio__TimeDependentValuationFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__TimeSeriesIdentifier_t[] = {  {&_swigt__p_boost__optionalT_openstudio__TimeSeriesIdentifier_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__TimeSeries_t[] = {  {&_swigt__p_boost__optionalT_openstudio__TimeSeries_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Time_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Transformation_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Transformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__UUID_t[] = {  {&_swigt__p_boost__optionalT_openstudio__UUID_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Unit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Unit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Vector3d_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Vector3d_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__WhUnit_t[] = {  {&_swigt__p_boost__optionalT_openstudio__WhUnit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__WorkspaceObject_t[] = {  {&_swigt__p_boost__optionalT_openstudio__WorkspaceObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__Workspace_t[] = {  {&_swigt__p_boost__optionalT_openstudio__Workspace_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirGap_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirGap_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirLoopHVACOutdoorAirSystem_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirLoopHVACOutdoorAirSystem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirLoopHVACZoneMixer_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirLoopHVACZoneMixer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirLoopHVACZoneSplitter_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirLoopHVACZoneSplitter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirLoopHVAC_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirLoopHVAC_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctUncontrolled_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctUncontrolled_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctVAVReheat_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctVAVReheat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AirWallMaterial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AirWallMaterial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__AvailabilityManagerScheduled_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__AvailabilityManagerScheduled_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Blind_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Blind_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__BoilerHotWater_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__BoilerHotWater_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__BuildingStandardsInformation_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__BuildingStandardsInformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__BuildingStory_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__BuildingStory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Building_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Building_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CFactorUndergroundWallConstruction_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CFactorUndergroundWallConstruction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ChillerElectricEIR_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ChillerElectricEIR_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ClimateZones_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ClimateZones_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CoilCoolingDXSingleSpeed_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CoilCoolingDXSingleSpeed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CoilCoolingDXTwoSpeed_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CoilCoolingDXTwoSpeed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CoilCoolingWater_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CoilCoolingWater_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CoilHeatingDXSingleSpeed_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CoilHeatingDXSingleSpeed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CoilHeatingElectric_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CoilHeatingElectric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CoilHeatingGas_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CoilHeatingGas_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CoilHeatingWater_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CoilHeatingWater_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ComponentCost_LineItem_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ComponentCost_LineItem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ComponentData_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ComponentData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Component_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Component_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ConnectorMixer_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ConnectorMixer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ConnectorSplitter_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ConnectorSplitter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ConstructionBaseStandardsInformation_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ConstructionBaseStandardsInformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ConstructionBase_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ConstructionBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ConstructionWithInternalSource_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ConstructionWithInternalSource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Construction_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Construction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ControllerMechanicalVentilation_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ControllerMechanicalVentilation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ControllerOutdoorAir_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ControllerOutdoorAir_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ControllerWaterCoil_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ControllerWaterCoil_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ConvergenceLimits_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ConvergenceLimits_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CoolingTowerSingleSpeed_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CoolingTowerSingleSpeed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveBicubic_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveBicubic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveBiquadratic_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveBiquadratic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveCubic_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveCubic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveDoubleExponentialDecay_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveDoubleExponentialDecay_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveExponent_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveExponent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveExponentialDecay_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveExponentialDecay_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveExponentialSkewNormal_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveExponentialSkewNormal_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveFanPressureRise_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveFanPressureRise_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveFunctionalPressureDrop_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveFunctionalPressureDrop_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveLinear_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveLinear_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveQuadraticLinear_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveQuadraticLinear_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveQuadratic_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveQuadratic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveQuartic_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveQuartic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola1_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola2_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveSigmoid_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveSigmoid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__CurveTriquadratic_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__CurveTriquadratic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Curve_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Curve_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DaylightingControl_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DaylightingControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DaylightingDeviceShelf_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DaylightingDeviceShelf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DefaultConstructionSet_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DefaultConstructionSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DefaultScheduleSet_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DefaultScheduleSet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DefaultSubSurfaceConstructions_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DefaultSubSurfaceConstructions_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DefaultSurfaceConstructions_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DefaultSurfaceConstructions_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DesignDay_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DesignDay_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DesignSpecificationOutdoorAir_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DesignSpecificationOutdoorAir_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DistrictCooling_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DistrictCooling_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__DistrictHeating_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__DistrictHeating_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ElectricEquipmentDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ElectricEquipmentDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ElectricEquipment_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ElectricEquipment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ExteriorLightsDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ExteriorLightsDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ExteriorLights_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ExteriorLights_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__FFactorGroundFloorConstruction_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__FFactorGroundFloorConstruction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Facility_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Facility_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__FanConstantVolume_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__FanConstantVolume_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__FanVariableVolume_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__FanVariableVolume_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__FenestrationMaterial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__FenestrationMaterial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__GasEquipmentDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__GasEquipmentDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__GasEquipment_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__GasEquipment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__GasLayer_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__GasLayer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__GasMixture_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__GasMixture_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Gas_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Gas_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__GenericModelObject_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__GenericModelObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__GlareSensor_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__GlareSensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Glazing_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Glazing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__HVACComponent_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__HVACComponent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__HeatBalanceAlgorithm_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__HeatBalanceAlgorithm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__HotWaterEquipmentDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__HotWaterEquipmentDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__HotWaterEquipment_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__HotWaterEquipment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__IlluminanceMap_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__IlluminanceMap_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__InfraredTransparentMaterial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__InfraredTransparentMaterial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__InsideSurfaceConvectionAlgorithm_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__InsideSurfaceConvectionAlgorithm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__InteriorPartitionSurfaceGroup_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__InteriorPartitionSurfaceGroup_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__InteriorPartitionSurface_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__InteriorPartitionSurface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__InternalMassDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__InternalMassDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__InternalMass_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__InternalMass_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__LayeredConstruction_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__LayeredConstruction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__LifeCycleCost_Parameters_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__LifeCycleCost_Parameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__LightingDesignDay_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__LightingDesignDay_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__LightingSimulationControl_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__LightingSimulationControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__LightingSimulationZone_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__LightingSimulationZone_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__LightsDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__LightsDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Lights_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Lights_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Loop_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Loop_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__LuminaireDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__LuminaireDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Luminaire_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Luminaire_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__MasslessOpaqueMaterial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__MasslessOpaqueMaterial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Material_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Material_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Meter_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Meter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Mixer_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Mixer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ModelObject_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ModelObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ModelPartitionMaterial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ModelPartitionMaterial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Model_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Model_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Node_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__OpaqueMaterial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__OpaqueMaterial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__OtherEquipmentDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__OtherEquipmentDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__OtherEquipment_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__OtherEquipment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__OutputVariable_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__OutputVariable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__OutsideSurfaceConvectionAlgorithm_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__OutsideSurfaceConvectionAlgorithm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ParentObject_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ParentObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__PeopleDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__PeopleDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__People_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__People_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__PipeAdiabatic_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__PipeAdiabatic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__PlanarSurfaceGroup_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__PlanarSurfaceGroup_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__PlanarSurface_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__PlanarSurface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__PlantLoop_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__PlantLoop_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__PortList_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__PortList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__PumpVariableSpeed_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__PumpVariableSpeed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__RadianceParameters_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__RadianceParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__RefractionExtinctionGlazing_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__RefractionExtinctionGlazing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Relationship_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Relationship_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__RenderingColor_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__RenderingColor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ResourceObject_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ResourceObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__RoofVegetation_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__RoofVegetation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__RunPeriodControlDaylightSavingTime_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__RunPeriodControlDaylightSavingTime_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__RunPeriodControlSpecialDays_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__RunPeriodControlSpecialDays_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__RunPeriod_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__RunPeriod_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleBase_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleCompact_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleCompact_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleConstant_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleConstant_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleDay_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleDay_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleFixedInterval_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleFixedInterval_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleInterval_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleInterval_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleRule_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleRule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleRuleset_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleRuleset_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleTypeLimits_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleTypeLimits_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleVariableInterval_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleVariableInterval_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleWeek_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleWeek_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ScheduleYear_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ScheduleYear_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Schedule_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Schedule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Screen_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Screen_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SetpointManagerMixedAir_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SetpointManagerMixedAir_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SetpointManagerSingleZoneReheat_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SetpointManagerSingleZoneReheat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Shade_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Shade_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ShadingMaterial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ShadingMaterial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ShadingSurfaceGroup_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ShadingSurfaceGroup_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ShadingSurface_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ShadingSurface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ShadowCalculation_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ShadowCalculation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SimpleGlazing_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SimpleGlazing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SimulationControl_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SimulationControl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SiteGroundReflectance_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SiteGroundReflectance_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SiteGroundTemperatureBuildingSurface_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SiteGroundTemperatureBuildingSurface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SiteWaterMainsTemperature_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SiteWaterMainsTemperature_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Site_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Site_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SizingParameters_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SizingParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SizingPeriod_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SizingPeriod_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SizingPlant_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SizingPlant_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SizingSystem_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SizingSystem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SizingZone_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SizingZone_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SkyTemperature_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SkyTemperature_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SpaceInfiltrationDesignFlowRate_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SpaceInfiltrationDesignFlowRate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SpaceItem_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SpaceItem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SpaceLoadDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SpaceLoadDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SpaceLoadInstance_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SpaceLoadInstance_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SpaceLoad_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SpaceLoad_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SpaceType_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SpaceType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Space_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Space_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Splitter_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Splitter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__StandardGlazing_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__StandardGlazing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__StandardOpaqueMaterial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__StandardOpaqueMaterial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SteamEquipmentDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SteamEquipmentDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SteamEquipment_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SteamEquipment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__StraightComponent_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__StraightComponent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__SubSurface_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__SubSurface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Surface_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Surface_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ThermalZone_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ThermalZone_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ThermochromicGlazing_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ThermochromicGlazing_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ThermostatSetpointDualSetpoint_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ThermostatSetpointDualSetpoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__TimeDependentValuation_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__TimeDependentValuation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Timestep_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Timestep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__Version_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__Version_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WaterHeaterMixed_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WaterHeaterMixed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WaterToAirComponent_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WaterToAirComponent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WaterToWaterComponent_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WaterToWaterComponent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WaterUseConnections_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WaterUseConnections_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WaterUseEquipmentDefinition_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WaterUseEquipmentDefinition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WaterUseEquipment_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WaterUseEquipment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WeatherFileConditionType_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WeatherFileConditionType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WeatherFileDays_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WeatherFileDays_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WeatherFile_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WeatherFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__WindowDataFile_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__WindowDataFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__YearDescription_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__YearDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneAirContaminantBalance_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneAirContaminantBalance_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneHVACComponent_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneHVACComponent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneHVACEquipmentList_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneHVACEquipmentList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneHVACFourPipeFanCoil_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneHVACFourPipeFanCoil_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t[] = {  {&_swigt__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t_t[] = {  {&_swigt__p_boost__optionalT_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_std__string_t[] = {  {&_swigt__p_boost__optionalT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t_t[] = {  {&_swigt__p_boost__optionalT_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t_t[] = {  {&_swigt__p_boost__optionalT_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__optionalT_unsigned_int_t[] = {  {&_swigt__p_boost__optionalT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__EndUses[] = {  {&_swigt__p_openstudio__EndUses, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__SingletonT_openstudio__ApplicationSingleton_t[] = {  {&_swigt__p_openstudio__SingletonT_openstudio__ApplicationSingleton_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__SingletonT_openstudio__LoggerSingleton_t[] = {  {&_swigt__p_openstudio__SingletonT_openstudio__LoggerSingleton_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__SingletonT_openstudio__model__ScheduleTypeRegistrySingleton_t[] = {  {&_swigt__p_openstudio__SingletonT_openstudio__model__ScheduleTypeRegistrySingleton_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__UUID[] = {  {&_swigt__p_openstudio__UUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__isomodel__ForwardTranslator[] = {  {&_swigt__p_openstudio__isomodel__ForwardTranslator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__isomodel__SimModel[] = {  {&_swigt__p_openstudio__isomodel__SimModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__isomodel__UserModel[] = {  {&_swigt__p_openstudio__isomodel__UserModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__model__Component[] = {{&_swigt__p_openstudio__model__Component, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openstudio__model__Model[] = {  {&_swigt__p_openstudio__model__Component, _p_openstudio__model__ComponentTo_p_openstudio__model__Model, 0, 0},  {&_swigt__p_openstudio__model__Model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_openstudio__UUID_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_std__pairT_openstudio__UUID_const_openstudio__UUID_t_t_t[] = {  {&_swigt__p_std__mapT_openstudio__UUID_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_std__pairT_openstudio__UUID_const_openstudio__UUID_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_openstudio__IdfObject_openstudio__IdfObject_t[] = {  {&_swigt__p_std__pairT_openstudio__IdfObject_openstudio__IdfObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_double_std__lessT_double_t_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__setT_double_std__lessT_double_t_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_openstudio__DataError_openstudio__DataErrorLess_std__allocatorT_openstudio__DataError_t_t[] = {  {&_swigt__p_std__setT_openstudio__DataError_openstudio__DataErrorLess_std__allocatorT_openstudio__DataError_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t[] = {  {&_swigt__p_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_openstudio__ReportingFrequency_std__lessT_openstudio__ReportingFrequency_t_std__allocatorT_openstudio__ReportingFrequency_t_t[] = {  {&_swigt__p_std__setT_openstudio__ReportingFrequency_std__lessT_openstudio__ReportingFrequency_t_std__allocatorT_openstudio__ReportingFrequency_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_openstudio__UUID_t_t[] = {  {&_swigt__p_std__setT_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_openstudio__UUID_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_IstringCompare_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__setT_std__string_IstringCompare_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_std__allocatorT_bool_t_t[] = {  {&_swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__AttributeDescription_std__allocatorT_openstudio__AttributeDescription_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__AttributeDescription_std__allocatorT_openstudio__AttributeDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Attribute_std__allocatorT_openstudio__Attribute_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Attribute_std__allocatorT_openstudio__Attribute_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__BCLMeasure_std__allocatorT_openstudio__BCLMeasure_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__BCLMeasure_std__allocatorT_openstudio__BCLMeasure_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__BTUUnit_std__allocatorT_openstudio__BTUUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__BTUUnit_std__allocatorT_openstudio__BTUUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__BoundingBox_std__allocatorT_openstudio__BoundingBox_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__BoundingBox_std__allocatorT_openstudio__BoundingBox_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__CFMUnit_std__allocatorT_openstudio__CFMUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__CFMUnit_std__allocatorT_openstudio__CFMUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Calendar_std__allocatorT_openstudio__Calendar_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Calendar_std__allocatorT_openstudio__Calendar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__CelciusUnit_std__allocatorT_openstudio__CelciusUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__CelciusUnit_std__allocatorT_openstudio__CelciusUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__DataError_std__allocatorT_openstudio__DataError_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__DataError_std__allocatorT_openstudio__DataError_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__DateTime_std__allocatorT_openstudio__DateTime_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__DateTime_std__allocatorT_openstudio__DateTime_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Date_std__allocatorT_openstudio__Date_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Date_std__allocatorT_openstudio__Date_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__DocumentElement_std__allocatorT_openstudio__DocumentElement_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__DocumentElement_std__allocatorT_openstudio__DocumentElement_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__EulerAngles_std__allocatorT_openstudio__EulerAngles_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__EulerAngles_std__allocatorT_openstudio__EulerAngles_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__FahrenheitUnit_std__allocatorT_openstudio__FahrenheitUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__FahrenheitUnit_std__allocatorT_openstudio__FahrenheitUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__FileReference_std__allocatorT_openstudio__FileReference_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__FileReference_std__allocatorT_openstudio__FileReference_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__FuelType_std__allocatorT_openstudio__FuelType_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__FuelType_std__allocatorT_openstudio__FuelType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__GPDUnit_std__allocatorT_openstudio__GPDUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__GPDUnit_std__allocatorT_openstudio__GPDUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IPUnit_std__allocatorT_openstudio__IPUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IPUnit_std__allocatorT_openstudio__IPUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IddField_std__allocatorT_openstudio__IddField_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IddField_std__allocatorT_openstudio__IddField_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IddFile_std__allocatorT_openstudio__IddFile_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IddFile_std__allocatorT_openstudio__IddFile_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IddKey_std__allocatorT_openstudio__IddKey_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IddKey_std__allocatorT_openstudio__IddKey_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IddObject_std__allocatorT_openstudio__IddObject_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IddObject_std__allocatorT_openstudio__IddObject_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IdfExtensibleGroup_std__allocatorT_openstudio__IdfExtensibleGroup_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IdfExtensibleGroup_std__allocatorT_openstudio__IdfExtensibleGroup_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IdfFile_std__allocatorT_openstudio__IdfFile_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IdfFile_std__allocatorT_openstudio__IdfFile_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__IdfObject_std__allocatorT_openstudio__IdfObject_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__IdfObject_std__allocatorT_openstudio__IdfObject_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__ImfFile_std__allocatorT_openstudio__ImfFile_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__ImfFile_std__allocatorT_openstudio__ImfFile_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__MPHUnit_std__allocatorT_openstudio__MPHUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__MPHUnit_std__allocatorT_openstudio__MPHUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Misc1Unit_std__allocatorT_openstudio__Misc1Unit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Misc1Unit_std__allocatorT_openstudio__Misc1Unit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Plane_std__allocatorT_openstudio__Plane_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Plane_std__allocatorT_openstudio__Plane_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Point3d_std__allocatorT_openstudio__Point3d_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Point3d_std__allocatorT_openstudio__Point3d_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Quantity_std__allocatorT_openstudio__Quantity_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Quantity_std__allocatorT_openstudio__Quantity_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__ReportingFrequency_std__allocatorT_openstudio__ReportingFrequency_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__ReportingFrequency_std__allocatorT_openstudio__ReportingFrequency_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__SIUnit_std__allocatorT_openstudio__SIUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__SIUnit_std__allocatorT_openstudio__SIUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__SectionElement_std__allocatorT_openstudio__SectionElement_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__SectionElement_std__allocatorT_openstudio__SectionElement_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Section_std__allocatorT_openstudio__Section_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Section_std__allocatorT_openstudio__Section_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__SqlFileTimeSeriesQuery_std__allocatorT_openstudio__SqlFileTimeSeriesQuery_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__SqlFileTimeSeriesQuery_std__allocatorT_openstudio__SqlFileTimeSeriesQuery_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__TableElement_std__allocatorT_openstudio__TableElement_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__TableElement_std__allocatorT_openstudio__TableElement_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Table_std__allocatorT_openstudio__Table_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Table_std__allocatorT_openstudio__Table_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Tag_std__allocatorT_openstudio__Tag_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Tag_std__allocatorT_openstudio__Tag_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__TemperatureUnit_std__allocatorT_openstudio__TemperatureUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__TemperatureUnit_std__allocatorT_openstudio__TemperatureUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Text_std__allocatorT_openstudio__Text_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Text_std__allocatorT_openstudio__Text_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__ThermUnit_std__allocatorT_openstudio__ThermUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__ThermUnit_std__allocatorT_openstudio__ThermUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__TimeSeries_std__allocatorT_openstudio__TimeSeries_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__TimeSeries_std__allocatorT_openstudio__TimeSeries_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Time_std__allocatorT_openstudio__Time_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Time_std__allocatorT_openstudio__Time_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Transformation_std__allocatorT_openstudio__Transformation_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Transformation_std__allocatorT_openstudio__Transformation_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Unit_std__allocatorT_openstudio__Unit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Unit_std__allocatorT_openstudio__Unit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Vector3d_std__allocatorT_openstudio__Vector3d_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Vector3d_std__allocatorT_openstudio__Vector3d_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__WhUnit_std__allocatorT_openstudio__WhUnit_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__WhUnit_std__allocatorT_openstudio__WhUnit_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__WorkspaceObject_std__allocatorT_openstudio__WorkspaceObject_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__WorkspaceObject_std__allocatorT_openstudio__WorkspaceObject_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__Workspace_std__allocatorT_openstudio__Workspace_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__Workspace_std__allocatorT_openstudio__Workspace_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirGap_std__allocatorT_openstudio__model__AirGap_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirGap_std__allocatorT_openstudio__model__AirGap_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirLoopHVACOutdoorAirSystem_std__allocatorT_openstudio__model__AirLoopHVACOutdoorAirSystem_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirLoopHVACOutdoorAirSystem_std__allocatorT_openstudio__model__AirLoopHVACOutdoorAirSystem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_std__allocatorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_std__allocatorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirLoopHVACZoneMixer_std__allocatorT_openstudio__model__AirLoopHVACZoneMixer_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirLoopHVACZoneMixer_std__allocatorT_openstudio__model__AirLoopHVACZoneMixer_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirLoopHVACZoneSplitter_std__allocatorT_openstudio__model__AirLoopHVACZoneSplitter_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirLoopHVACZoneSplitter_std__allocatorT_openstudio__model__AirLoopHVACZoneSplitter_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirLoopHVAC_std__allocatorT_openstudio__model__AirLoopHVAC_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirLoopHVAC_std__allocatorT_openstudio__model__AirLoopHVAC_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_std__allocatorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_std__allocatorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirTerminalSingleDuctUncontrolled_std__allocatorT_openstudio__model__AirTerminalSingleDuctUncontrolled_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirTerminalSingleDuctUncontrolled_std__allocatorT_openstudio__model__AirTerminalSingleDuctUncontrolled_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AirWallMaterial_std__allocatorT_openstudio__model__AirWallMaterial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AirWallMaterial_std__allocatorT_openstudio__model__AirWallMaterial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__AvailabilityManagerScheduled_std__allocatorT_openstudio__model__AvailabilityManagerScheduled_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__AvailabilityManagerScheduled_std__allocatorT_openstudio__model__AvailabilityManagerScheduled_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Blind_std__allocatorT_openstudio__model__Blind_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Blind_std__allocatorT_openstudio__model__Blind_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__BoilerHotWater_std__allocatorT_openstudio__model__BoilerHotWater_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__BoilerHotWater_std__allocatorT_openstudio__model__BoilerHotWater_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__BuildingStory_std__allocatorT_openstudio__model__BuildingStory_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__BuildingStory_std__allocatorT_openstudio__model__BuildingStory_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Building_std__allocatorT_openstudio__model__Building_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Building_std__allocatorT_openstudio__model__Building_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CFactorUndergroundWallConstruction_std__allocatorT_openstudio__model__CFactorUndergroundWallConstruction_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CFactorUndergroundWallConstruction_std__allocatorT_openstudio__model__CFactorUndergroundWallConstruction_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ChillerElectricEIR_std__allocatorT_openstudio__model__ChillerElectricEIR_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ChillerElectricEIR_std__allocatorT_openstudio__model__ChillerElectricEIR_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ClimateZone_std__allocatorT_openstudio__model__ClimateZone_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ClimateZone_std__allocatorT_openstudio__model__ClimateZone_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CoilCoolingDXSingleSpeed_std__allocatorT_openstudio__model__CoilCoolingDXSingleSpeed_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CoilCoolingDXSingleSpeed_std__allocatorT_openstudio__model__CoilCoolingDXSingleSpeed_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CoilCoolingDXTwoSpeed_std__allocatorT_openstudio__model__CoilCoolingDXTwoSpeed_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CoilCoolingDXTwoSpeed_std__allocatorT_openstudio__model__CoilCoolingDXTwoSpeed_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CoilHeatingDXSingleSpeed_std__allocatorT_openstudio__model__CoilHeatingDXSingleSpeed_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CoilHeatingDXSingleSpeed_std__allocatorT_openstudio__model__CoilHeatingDXSingleSpeed_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CoilHeatingElectric_std__allocatorT_openstudio__model__CoilHeatingElectric_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CoilHeatingElectric_std__allocatorT_openstudio__model__CoilHeatingElectric_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CoilHeatingGas_std__allocatorT_openstudio__model__CoilHeatingGas_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CoilHeatingGas_std__allocatorT_openstudio__model__CoilHeatingGas_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ComponentCost_LineItem_std__allocatorT_openstudio__model__ComponentCost_LineItem_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ComponentCost_LineItem_std__allocatorT_openstudio__model__ComponentCost_LineItem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ComponentData_std__allocatorT_openstudio__model__ComponentData_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ComponentData_std__allocatorT_openstudio__model__ComponentData_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Component_std__allocatorT_openstudio__model__Component_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Component_std__allocatorT_openstudio__model__Component_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ConstructionBaseStandardsInformation_std__allocatorT_openstudio__model__ConstructionBaseStandardsInformation_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ConstructionBaseStandardsInformation_std__allocatorT_openstudio__model__ConstructionBaseStandardsInformation_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ConstructionBase_std__allocatorT_openstudio__model__ConstructionBase_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ConstructionBase_std__allocatorT_openstudio__model__ConstructionBase_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ConstructionWithInternalSource_std__allocatorT_openstudio__model__ConstructionWithInternalSource_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ConstructionWithInternalSource_std__allocatorT_openstudio__model__ConstructionWithInternalSource_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Construction_std__allocatorT_openstudio__model__Construction_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Construction_std__allocatorT_openstudio__model__Construction_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ControllerMechanicalVentilation_std__allocatorT_openstudio__model__ControllerMechanicalVentilation_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ControllerMechanicalVentilation_std__allocatorT_openstudio__model__ControllerMechanicalVentilation_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ControllerOutdoorAir_std__allocatorT_openstudio__model__ControllerOutdoorAir_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ControllerOutdoorAir_std__allocatorT_openstudio__model__ControllerOutdoorAir_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ControllerWaterCoil_std__allocatorT_openstudio__model__ControllerWaterCoil_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ControllerWaterCoil_std__allocatorT_openstudio__model__ControllerWaterCoil_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ConvergenceLimits_std__allocatorT_openstudio__model__ConvergenceLimits_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ConvergenceLimits_std__allocatorT_openstudio__model__ConvergenceLimits_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CoolingTowerSingleSpeed_std__allocatorT_openstudio__model__CoolingTowerSingleSpeed_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CoolingTowerSingleSpeed_std__allocatorT_openstudio__model__CoolingTowerSingleSpeed_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveBicubic_std__allocatorT_openstudio__model__CurveBicubic_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveBicubic_std__allocatorT_openstudio__model__CurveBicubic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveBiquadratic_std__allocatorT_openstudio__model__CurveBiquadratic_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveBiquadratic_std__allocatorT_openstudio__model__CurveBiquadratic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveCubic_std__allocatorT_openstudio__model__CurveCubic_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveCubic_std__allocatorT_openstudio__model__CurveCubic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveDoubleExponentialDecay_std__allocatorT_openstudio__model__CurveDoubleExponentialDecay_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveDoubleExponentialDecay_std__allocatorT_openstudio__model__CurveDoubleExponentialDecay_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveExponent_std__allocatorT_openstudio__model__CurveExponent_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveExponent_std__allocatorT_openstudio__model__CurveExponent_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveExponentialDecay_std__allocatorT_openstudio__model__CurveExponentialDecay_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveExponentialDecay_std__allocatorT_openstudio__model__CurveExponentialDecay_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveExponentialSkewNormal_std__allocatorT_openstudio__model__CurveExponentialSkewNormal_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveExponentialSkewNormal_std__allocatorT_openstudio__model__CurveExponentialSkewNormal_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveFanPressureRise_std__allocatorT_openstudio__model__CurveFanPressureRise_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveFanPressureRise_std__allocatorT_openstudio__model__CurveFanPressureRise_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveFunctionalPressureDrop_std__allocatorT_openstudio__model__CurveFunctionalPressureDrop_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveFunctionalPressureDrop_std__allocatorT_openstudio__model__CurveFunctionalPressureDrop_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveLinear_std__allocatorT_openstudio__model__CurveLinear_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveLinear_std__allocatorT_openstudio__model__CurveLinear_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveQuadraticLinear_std__allocatorT_openstudio__model__CurveQuadraticLinear_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveQuadraticLinear_std__allocatorT_openstudio__model__CurveQuadraticLinear_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveQuadratic_std__allocatorT_openstudio__model__CurveQuadratic_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveQuadratic_std__allocatorT_openstudio__model__CurveQuadratic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveQuartic_std__allocatorT_openstudio__model__CurveQuartic_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveQuartic_std__allocatorT_openstudio__model__CurveQuartic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveRectangularHyperbola1_std__allocatorT_openstudio__model__CurveRectangularHyperbola1_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveRectangularHyperbola1_std__allocatorT_openstudio__model__CurveRectangularHyperbola1_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveRectangularHyperbola2_std__allocatorT_openstudio__model__CurveRectangularHyperbola2_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveRectangularHyperbola2_std__allocatorT_openstudio__model__CurveRectangularHyperbola2_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveSigmoid_std__allocatorT_openstudio__model__CurveSigmoid_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveSigmoid_std__allocatorT_openstudio__model__CurveSigmoid_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__CurveTriquadratic_std__allocatorT_openstudio__model__CurveTriquadratic_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__CurveTriquadratic_std__allocatorT_openstudio__model__CurveTriquadratic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Curve_std__allocatorT_openstudio__model__Curve_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Curve_std__allocatorT_openstudio__model__Curve_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DaylightingControl_std__allocatorT_openstudio__model__DaylightingControl_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DaylightingControl_std__allocatorT_openstudio__model__DaylightingControl_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DaylightingDeviceShelf_std__allocatorT_openstudio__model__DaylightingDeviceShelf_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DaylightingDeviceShelf_std__allocatorT_openstudio__model__DaylightingDeviceShelf_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DefaultConstructionSet_std__allocatorT_openstudio__model__DefaultConstructionSet_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DefaultConstructionSet_std__allocatorT_openstudio__model__DefaultConstructionSet_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DefaultScheduleSet_std__allocatorT_openstudio__model__DefaultScheduleSet_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DefaultScheduleSet_std__allocatorT_openstudio__model__DefaultScheduleSet_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DefaultSubSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSubSurfaceConstructions_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DefaultSubSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSubSurfaceConstructions_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DefaultSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSurfaceConstructions_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DefaultSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSurfaceConstructions_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DesignDay_std__allocatorT_openstudio__model__DesignDay_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DesignDay_std__allocatorT_openstudio__model__DesignDay_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DesignSpecificationOutdoorAir_std__allocatorT_openstudio__model__DesignSpecificationOutdoorAir_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DesignSpecificationOutdoorAir_std__allocatorT_openstudio__model__DesignSpecificationOutdoorAir_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DistrictCooling_std__allocatorT_openstudio__model__DistrictCooling_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DistrictCooling_std__allocatorT_openstudio__model__DistrictCooling_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__DistrictHeating_std__allocatorT_openstudio__model__DistrictHeating_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__DistrictHeating_std__allocatorT_openstudio__model__DistrictHeating_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ElectricEquipmentDefinition_std__allocatorT_openstudio__model__ElectricEquipmentDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ElectricEquipmentDefinition_std__allocatorT_openstudio__model__ElectricEquipmentDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ElectricEquipment_std__allocatorT_openstudio__model__ElectricEquipment_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ElectricEquipment_std__allocatorT_openstudio__model__ElectricEquipment_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_std__allocatorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_std__allocatorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ExteriorLightsDefinition_std__allocatorT_openstudio__model__ExteriorLightsDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ExteriorLightsDefinition_std__allocatorT_openstudio__model__ExteriorLightsDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ExteriorLights_std__allocatorT_openstudio__model__ExteriorLights_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ExteriorLights_std__allocatorT_openstudio__model__ExteriorLights_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__FFactorGroundFloorConstruction_std__allocatorT_openstudio__model__FFactorGroundFloorConstruction_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__FFactorGroundFloorConstruction_std__allocatorT_openstudio__model__FFactorGroundFloorConstruction_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__FanConstantVolume_std__allocatorT_openstudio__model__FanConstantVolume_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__FanConstantVolume_std__allocatorT_openstudio__model__FanConstantVolume_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__FanVariableVolume_std__allocatorT_openstudio__model__FanVariableVolume_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__FanVariableVolume_std__allocatorT_openstudio__model__FanVariableVolume_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__FenestrationMaterial_std__allocatorT_openstudio__model__FenestrationMaterial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__FenestrationMaterial_std__allocatorT_openstudio__model__FenestrationMaterial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__FieldViewer_std__allocatorT_openstudio__model__FieldViewer_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__FieldViewer_std__allocatorT_openstudio__model__FieldViewer_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__GasEquipmentDefinition_std__allocatorT_openstudio__model__GasEquipmentDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__GasEquipmentDefinition_std__allocatorT_openstudio__model__GasEquipmentDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__GasEquipment_std__allocatorT_openstudio__model__GasEquipment_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__GasEquipment_std__allocatorT_openstudio__model__GasEquipment_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__GasLayer_std__allocatorT_openstudio__model__GasLayer_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__GasLayer_std__allocatorT_openstudio__model__GasLayer_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__GasMixture_std__allocatorT_openstudio__model__GasMixture_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__GasMixture_std__allocatorT_openstudio__model__GasMixture_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Gas_std__allocatorT_openstudio__model__Gas_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Gas_std__allocatorT_openstudio__model__Gas_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__GenericModelObject_std__allocatorT_openstudio__model__GenericModelObject_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__GenericModelObject_std__allocatorT_openstudio__model__GenericModelObject_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__GlareSensor_std__allocatorT_openstudio__model__GlareSensor_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__GlareSensor_std__allocatorT_openstudio__model__GlareSensor_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Glazing_std__allocatorT_openstudio__model__Glazing_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Glazing_std__allocatorT_openstudio__model__Glazing_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__HeatBalanceAlgorithm_std__allocatorT_openstudio__model__HeatBalanceAlgorithm_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__HeatBalanceAlgorithm_std__allocatorT_openstudio__model__HeatBalanceAlgorithm_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__HotWaterEquipmentDefinition_std__allocatorT_openstudio__model__HotWaterEquipmentDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__HotWaterEquipmentDefinition_std__allocatorT_openstudio__model__HotWaterEquipmentDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__HotWaterEquipment_std__allocatorT_openstudio__model__HotWaterEquipment_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__HotWaterEquipment_std__allocatorT_openstudio__model__HotWaterEquipment_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__IlluminanceMap_std__allocatorT_openstudio__model__IlluminanceMap_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__IlluminanceMap_std__allocatorT_openstudio__model__IlluminanceMap_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__InfraredTransparentMaterial_std__allocatorT_openstudio__model__InfraredTransparentMaterial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__InfraredTransparentMaterial_std__allocatorT_openstudio__model__InfraredTransparentMaterial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__InteriorPartitionSurfaceGroup_std__allocatorT_openstudio__model__InteriorPartitionSurfaceGroup_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__InteriorPartitionSurfaceGroup_std__allocatorT_openstudio__model__InteriorPartitionSurfaceGroup_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__InteriorPartitionSurface_std__allocatorT_openstudio__model__InteriorPartitionSurface_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__InteriorPartitionSurface_std__allocatorT_openstudio__model__InteriorPartitionSurface_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__InternalMassDefinition_std__allocatorT_openstudio__model__InternalMassDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__InternalMassDefinition_std__allocatorT_openstudio__model__InternalMassDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__InternalMass_std__allocatorT_openstudio__model__InternalMass_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__InternalMass_std__allocatorT_openstudio__model__InternalMass_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__LayeredConstruction_std__allocatorT_openstudio__model__LayeredConstruction_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__LayeredConstruction_std__allocatorT_openstudio__model__LayeredConstruction_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__LifeCycleCost_Parameters_std__allocatorT_openstudio__model__LifeCycleCost_Parameters_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__LifeCycleCost_Parameters_std__allocatorT_openstudio__model__LifeCycleCost_Parameters_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__LightingDesignDay_std__allocatorT_openstudio__model__LightingDesignDay_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__LightingDesignDay_std__allocatorT_openstudio__model__LightingDesignDay_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__LightingSimulationControl_std__allocatorT_openstudio__model__LightingSimulationControl_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__LightingSimulationControl_std__allocatorT_openstudio__model__LightingSimulationControl_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__LightingSimulationZone_std__allocatorT_openstudio__model__LightingSimulationZone_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__LightingSimulationZone_std__allocatorT_openstudio__model__LightingSimulationZone_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__LightsDefinition_std__allocatorT_openstudio__model__LightsDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__LightsDefinition_std__allocatorT_openstudio__model__LightsDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Lights_std__allocatorT_openstudio__model__Lights_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Lights_std__allocatorT_openstudio__model__Lights_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__LuminaireDefinition_std__allocatorT_openstudio__model__LuminaireDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__LuminaireDefinition_std__allocatorT_openstudio__model__LuminaireDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Luminaire_std__allocatorT_openstudio__model__Luminaire_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Luminaire_std__allocatorT_openstudio__model__Luminaire_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__MasslessOpaqueMaterial_std__allocatorT_openstudio__model__MasslessOpaqueMaterial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__MasslessOpaqueMaterial_std__allocatorT_openstudio__model__MasslessOpaqueMaterial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Material_std__allocatorT_openstudio__model__Material_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Material_std__allocatorT_openstudio__model__Material_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Meter_std__allocatorT_openstudio__model__Meter_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Meter_std__allocatorT_openstudio__model__Meter_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ModelObject_std__allocatorT_openstudio__model__ModelObject_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ModelObject_std__allocatorT_openstudio__model__ModelObject_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ModelPartitionMaterial_std__allocatorT_openstudio__model__ModelPartitionMaterial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ModelPartitionMaterial_std__allocatorT_openstudio__model__ModelPartitionMaterial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Model_std__allocatorT_openstudio__model__Model_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Model_std__allocatorT_openstudio__model__Model_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Node_std__allocatorT_openstudio__model__Node_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Node_std__allocatorT_openstudio__model__Node_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__OpaqueMaterial_std__allocatorT_openstudio__model__OpaqueMaterial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__OpaqueMaterial_std__allocatorT_openstudio__model__OpaqueMaterial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__OtherEquipmentDefinition_std__allocatorT_openstudio__model__OtherEquipmentDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__OtherEquipmentDefinition_std__allocatorT_openstudio__model__OtherEquipmentDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__OtherEquipment_std__allocatorT_openstudio__model__OtherEquipment_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__OtherEquipment_std__allocatorT_openstudio__model__OtherEquipment_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__OutputVariable_std__allocatorT_openstudio__model__OutputVariable_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__OutputVariable_std__allocatorT_openstudio__model__OutputVariable_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ParentObject_std__allocatorT_openstudio__model__ParentObject_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ParentObject_std__allocatorT_openstudio__model__ParentObject_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__PeopleDefinition_std__allocatorT_openstudio__model__PeopleDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__PeopleDefinition_std__allocatorT_openstudio__model__PeopleDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__People_std__allocatorT_openstudio__model__People_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__People_std__allocatorT_openstudio__model__People_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__PipeAdiabatic_std__allocatorT_openstudio__model__PipeAdiabatic_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__PipeAdiabatic_std__allocatorT_openstudio__model__PipeAdiabatic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__PlanarSurfaceGroup_std__allocatorT_openstudio__model__PlanarSurfaceGroup_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__PlanarSurfaceGroup_std__allocatorT_openstudio__model__PlanarSurfaceGroup_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__PlanarSurface_std__allocatorT_openstudio__model__PlanarSurface_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__PlanarSurface_std__allocatorT_openstudio__model__PlanarSurface_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__PortList_std__allocatorT_openstudio__model__PortList_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__PortList_std__allocatorT_openstudio__model__PortList_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__PumpVariableSpeed_std__allocatorT_openstudio__model__PumpVariableSpeed_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__PumpVariableSpeed_std__allocatorT_openstudio__model__PumpVariableSpeed_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__RadianceParameters_std__allocatorT_openstudio__model__RadianceParameters_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__RadianceParameters_std__allocatorT_openstudio__model__RadianceParameters_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__RefractionExtinctionGlazing_std__allocatorT_openstudio__model__RefractionExtinctionGlazing_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__RefractionExtinctionGlazing_std__allocatorT_openstudio__model__RefractionExtinctionGlazing_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Relationship_std__allocatorT_openstudio__model__Relationship_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Relationship_std__allocatorT_openstudio__model__Relationship_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__RenderingColor_std__allocatorT_openstudio__model__RenderingColor_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__RenderingColor_std__allocatorT_openstudio__model__RenderingColor_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ResourceObject_std__allocatorT_openstudio__model__ResourceObject_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ResourceObject_std__allocatorT_openstudio__model__ResourceObject_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__RoofVegetation_std__allocatorT_openstudio__model__RoofVegetation_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__RoofVegetation_std__allocatorT_openstudio__model__RoofVegetation_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__RunPeriodControlDaylightSavingTime_std__allocatorT_openstudio__model__RunPeriodControlDaylightSavingTime_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__RunPeriodControlDaylightSavingTime_std__allocatorT_openstudio__model__RunPeriodControlDaylightSavingTime_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__RunPeriodControlSpecialDays_std__allocatorT_openstudio__model__RunPeriodControlSpecialDays_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__RunPeriodControlSpecialDays_std__allocatorT_openstudio__model__RunPeriodControlSpecialDays_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__RunPeriod_std__allocatorT_openstudio__model__RunPeriod_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__RunPeriod_std__allocatorT_openstudio__model__RunPeriod_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleBase_std__allocatorT_openstudio__model__ScheduleBase_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleBase_std__allocatorT_openstudio__model__ScheduleBase_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleCompact_std__allocatorT_openstudio__model__ScheduleCompact_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleCompact_std__allocatorT_openstudio__model__ScheduleCompact_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleConstant_std__allocatorT_openstudio__model__ScheduleConstant_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleConstant_std__allocatorT_openstudio__model__ScheduleConstant_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleDay_std__allocatorT_openstudio__model__ScheduleDay_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleDay_std__allocatorT_openstudio__model__ScheduleDay_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleFixedInterval_std__allocatorT_openstudio__model__ScheduleFixedInterval_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleFixedInterval_std__allocatorT_openstudio__model__ScheduleFixedInterval_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleInterval_std__allocatorT_openstudio__model__ScheduleInterval_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleInterval_std__allocatorT_openstudio__model__ScheduleInterval_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleRule_std__allocatorT_openstudio__model__ScheduleRule_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleRule_std__allocatorT_openstudio__model__ScheduleRule_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleRuleset_std__allocatorT_openstudio__model__ScheduleRuleset_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleRuleset_std__allocatorT_openstudio__model__ScheduleRuleset_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleTypeLimits_std__allocatorT_openstudio__model__ScheduleTypeLimits_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleTypeLimits_std__allocatorT_openstudio__model__ScheduleTypeLimits_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleType_std__allocatorT_openstudio__model__ScheduleType_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleType_std__allocatorT_openstudio__model__ScheduleType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleVariableInterval_std__allocatorT_openstudio__model__ScheduleVariableInterval_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleVariableInterval_std__allocatorT_openstudio__model__ScheduleVariableInterval_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleWeek_std__allocatorT_openstudio__model__ScheduleWeek_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleWeek_std__allocatorT_openstudio__model__ScheduleWeek_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ScheduleYear_std__allocatorT_openstudio__model__ScheduleYear_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ScheduleYear_std__allocatorT_openstudio__model__ScheduleYear_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Schedule_std__allocatorT_openstudio__model__Schedule_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Schedule_std__allocatorT_openstudio__model__Schedule_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Screen_std__allocatorT_openstudio__model__Screen_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Screen_std__allocatorT_openstudio__model__Screen_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SetpointManagerMixedAir_std__allocatorT_openstudio__model__SetpointManagerMixedAir_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SetpointManagerMixedAir_std__allocatorT_openstudio__model__SetpointManagerMixedAir_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SetpointManagerSingleZoneReheat_std__allocatorT_openstudio__model__SetpointManagerSingleZoneReheat_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SetpointManagerSingleZoneReheat_std__allocatorT_openstudio__model__SetpointManagerSingleZoneReheat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Shade_std__allocatorT_openstudio__model__Shade_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Shade_std__allocatorT_openstudio__model__Shade_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ShadingMaterial_std__allocatorT_openstudio__model__ShadingMaterial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ShadingMaterial_std__allocatorT_openstudio__model__ShadingMaterial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ShadingSurfaceGroup_std__allocatorT_openstudio__model__ShadingSurfaceGroup_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ShadingSurfaceGroup_std__allocatorT_openstudio__model__ShadingSurfaceGroup_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ShadingSurface_std__allocatorT_openstudio__model__ShadingSurface_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ShadingSurface_std__allocatorT_openstudio__model__ShadingSurface_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SimpleGlazing_std__allocatorT_openstudio__model__SimpleGlazing_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SimpleGlazing_std__allocatorT_openstudio__model__SimpleGlazing_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SiteGroundReflectance_std__allocatorT_openstudio__model__SiteGroundReflectance_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SiteGroundReflectance_std__allocatorT_openstudio__model__SiteGroundReflectance_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SiteGroundTemperatureBuildingSurface_std__allocatorT_openstudio__model__SiteGroundTemperatureBuildingSurface_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SiteGroundTemperatureBuildingSurface_std__allocatorT_openstudio__model__SiteGroundTemperatureBuildingSurface_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SiteWaterMainsTemperature_std__allocatorT_openstudio__model__SiteWaterMainsTemperature_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SiteWaterMainsTemperature_std__allocatorT_openstudio__model__SiteWaterMainsTemperature_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Site_std__allocatorT_openstudio__model__Site_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Site_std__allocatorT_openstudio__model__Site_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SizingParameters_std__allocatorT_openstudio__model__SizingParameters_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SizingParameters_std__allocatorT_openstudio__model__SizingParameters_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SizingPeriod_std__allocatorT_openstudio__model__SizingPeriod_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SizingPeriod_std__allocatorT_openstudio__model__SizingPeriod_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SizingPlant_std__allocatorT_openstudio__model__SizingPlant_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SizingPlant_std__allocatorT_openstudio__model__SizingPlant_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SizingSystem_std__allocatorT_openstudio__model__SizingSystem_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SizingSystem_std__allocatorT_openstudio__model__SizingSystem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SizingZone_std__allocatorT_openstudio__model__SizingZone_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SizingZone_std__allocatorT_openstudio__model__SizingZone_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SkyTemperature_std__allocatorT_openstudio__model__SkyTemperature_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SkyTemperature_std__allocatorT_openstudio__model__SkyTemperature_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SpaceInfiltrationDesignFlowRate_std__allocatorT_openstudio__model__SpaceInfiltrationDesignFlowRate_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SpaceInfiltrationDesignFlowRate_std__allocatorT_openstudio__model__SpaceInfiltrationDesignFlowRate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_std__allocatorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_std__allocatorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SpaceItem_std__allocatorT_openstudio__model__SpaceItem_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SpaceItem_std__allocatorT_openstudio__model__SpaceItem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SpaceLoadDefinition_std__allocatorT_openstudio__model__SpaceLoadDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SpaceLoadDefinition_std__allocatorT_openstudio__model__SpaceLoadDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SpaceLoadInstance_std__allocatorT_openstudio__model__SpaceLoadInstance_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SpaceLoadInstance_std__allocatorT_openstudio__model__SpaceLoadInstance_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SpaceLoad_std__allocatorT_openstudio__model__SpaceLoad_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SpaceLoad_std__allocatorT_openstudio__model__SpaceLoad_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SpaceType_std__allocatorT_openstudio__model__SpaceType_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SpaceType_std__allocatorT_openstudio__model__SpaceType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Space_std__allocatorT_openstudio__model__Space_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Space_std__allocatorT_openstudio__model__Space_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__StandardGlazing_std__allocatorT_openstudio__model__StandardGlazing_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__StandardGlazing_std__allocatorT_openstudio__model__StandardGlazing_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__StandardOpaqueMaterial_std__allocatorT_openstudio__model__StandardOpaqueMaterial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__StandardOpaqueMaterial_std__allocatorT_openstudio__model__StandardOpaqueMaterial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SteamEquipmentDefinition_std__allocatorT_openstudio__model__SteamEquipmentDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SteamEquipmentDefinition_std__allocatorT_openstudio__model__SteamEquipmentDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SteamEquipment_std__allocatorT_openstudio__model__SteamEquipment_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SteamEquipment_std__allocatorT_openstudio__model__SteamEquipment_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__StraightComponent_std__allocatorT_openstudio__model__StraightComponent_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__StraightComponent_std__allocatorT_openstudio__model__StraightComponent_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__SubSurface_std__allocatorT_openstudio__model__SubSurface_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__SubSurface_std__allocatorT_openstudio__model__SubSurface_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__Surface_std__allocatorT_openstudio__model__Surface_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__Surface_std__allocatorT_openstudio__model__Surface_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ThermalZone_std__allocatorT_openstudio__model__ThermalZone_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ThermalZone_std__allocatorT_openstudio__model__ThermalZone_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ThermochromicGlazing_std__allocatorT_openstudio__model__ThermochromicGlazing_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ThermochromicGlazing_std__allocatorT_openstudio__model__ThermochromicGlazing_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__WaterHeaterMixed_std__allocatorT_openstudio__model__WaterHeaterMixed_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__WaterHeaterMixed_std__allocatorT_openstudio__model__WaterHeaterMixed_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__WaterUseConnections_std__allocatorT_openstudio__model__WaterUseConnections_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__WaterUseConnections_std__allocatorT_openstudio__model__WaterUseConnections_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__WaterUseEquipmentDefinition_std__allocatorT_openstudio__model__WaterUseEquipmentDefinition_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__WaterUseEquipmentDefinition_std__allocatorT_openstudio__model__WaterUseEquipmentDefinition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__WaterUseEquipment_std__allocatorT_openstudio__model__WaterUseEquipment_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__WaterUseEquipment_std__allocatorT_openstudio__model__WaterUseEquipment_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__WeatherFileConditionType_std__allocatorT_openstudio__model__WeatherFileConditionType_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__WeatherFileConditionType_std__allocatorT_openstudio__model__WeatherFileConditionType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__WeatherFileDays_std__allocatorT_openstudio__model__WeatherFileDays_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__WeatherFileDays_std__allocatorT_openstudio__model__WeatherFileDays_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__WeatherFile_std__allocatorT_openstudio__model__WeatherFile_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__WeatherFile_std__allocatorT_openstudio__model__WeatherFile_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__WindowDataFile_std__allocatorT_openstudio__model__WindowDataFile_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__WindowDataFile_std__allocatorT_openstudio__model__WindowDataFile_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__YearDescription_std__allocatorT_openstudio__model__YearDescription_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__YearDescription_std__allocatorT_openstudio__model__YearDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ZoneAirContaminantBalance_std__allocatorT_openstudio__model__ZoneAirContaminantBalance_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ZoneAirContaminantBalance_std__allocatorT_openstudio__model__ZoneAirContaminantBalance_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_std__allocatorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_std__allocatorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_std__allocatorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_std__allocatorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ZoneHVACEquipmentList_std__allocatorT_openstudio__model__ZoneHVACEquipmentList_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ZoneHVACEquipmentList_std__allocatorT_openstudio__model__ZoneHVACEquipmentList_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ZoneHVACFourPipeFanCoil_std__allocatorT_openstudio__model__ZoneHVACFourPipeFanCoil_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ZoneHVACFourPipeFanCoil_std__allocatorT_openstudio__model__ZoneHVACFourPipeFanCoil_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_std__allocatorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_std__allocatorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t_t[] = {  {&_swigt__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ConstPtr,
  _swigc__p_ConstVec,
  _swigc__p_ConstWeakPtr,
  _swigc__p_ImplPtr,
  _swigc__p_ImplType,
  _swigc__p_Ptr,
  _swigc__p_Vec,
  _swigc__p_WeakPtr,
  _swigc__p_allocator_type,
  _swigc__p_boost__log__sinks__synchronous_sinkT_boost__log__sinks__text_ostream_backend_t,
  _swigc__p_boost__log__sources__severity_channel_logger_mtT_LogLevel_t,
  _swigc__p_boost__optionalT_QUrl_t,
  _swigc__p_boost__optionalT_double_t,
  _swigc__p_boost__optionalT_int_t,
  _swigc__p_boost__optionalT_openstudio__AttributeDescription_t,
  _swigc__p_boost__optionalT_openstudio__Attribute_t,
  _swigc__p_boost__optionalT_openstudio__BCLMeasure_t,
  _swigc__p_boost__optionalT_openstudio__BTUUnit_t,
  _swigc__p_boost__optionalT_openstudio__BoundingBox_t,
  _swigc__p_boost__optionalT_openstudio__CFMUnit_t,
  _swigc__p_boost__optionalT_openstudio__Calendar_t,
  _swigc__p_boost__optionalT_openstudio__CelciusUnit_t,
  _swigc__p_boost__optionalT_openstudio__DataError_t,
  _swigc__p_boost__optionalT_openstudio__DateTime_t,
  _swigc__p_boost__optionalT_openstudio__Date_t,
  _swigc__p_boost__optionalT_openstudio__DocumentElement_t,
  _swigc__p_boost__optionalT_openstudio__Document_t,
  _swigc__p_boost__optionalT_openstudio__EnvironmentIdentifier_t,
  _swigc__p_boost__optionalT_openstudio__EnvironmentType_t,
  _swigc__p_boost__optionalT_openstudio__EulerAngles_t,
  _swigc__p_boost__optionalT_openstudio__FahrenheitUnit_t,
  _swigc__p_boost__optionalT_openstudio__FileReference_t,
  _swigc__p_boost__optionalT_openstudio__FuelType_t,
  _swigc__p_boost__optionalT_openstudio__GPDUnit_t,
  _swigc__p_boost__optionalT_openstudio__IPUnit_t,
  _swigc__p_boost__optionalT_openstudio__IddField_t,
  _swigc__p_boost__optionalT_openstudio__IddFile_t,
  _swigc__p_boost__optionalT_openstudio__IddKey_t,
  _swigc__p_boost__optionalT_openstudio__IddObject_t,
  _swigc__p_boost__optionalT_openstudio__IdfFile_t,
  _swigc__p_boost__optionalT_openstudio__IdfObject_t,
  _swigc__p_boost__optionalT_openstudio__ImfFile_t,
  _swigc__p_boost__optionalT_openstudio__KeyValueIdentifier_t,
  _swigc__p_boost__optionalT_openstudio__MPHUnit_t,
  _swigc__p_boost__optionalT_openstudio__Misc1Unit_t,
  _swigc__p_boost__optionalT_openstudio__Plane_t,
  _swigc__p_boost__optionalT_openstudio__Point3d_t,
  _swigc__p_boost__optionalT_openstudio__Quantity_t,
  _swigc__p_boost__optionalT_openstudio__ReportingFrequency_t,
  _swigc__p_boost__optionalT_openstudio__SIUnit_t,
  _swigc__p_boost__optionalT_openstudio__SectionElement_t,
  _swigc__p_boost__optionalT_openstudio__SectionHeading_t,
  _swigc__p_boost__optionalT_openstudio__Section_t,
  _swigc__p_boost__optionalT_openstudio__SqlFile_t,
  _swigc__p_boost__optionalT_openstudio__Table_t,
  _swigc__p_boost__optionalT_openstudio__Tag_t,
  _swigc__p_boost__optionalT_openstudio__TemperatureUnit_t,
  _swigc__p_boost__optionalT_openstudio__Text_t,
  _swigc__p_boost__optionalT_openstudio__ThermUnit_t,
  _swigc__p_boost__optionalT_openstudio__TimeDependentValuationFile_t,
  _swigc__p_boost__optionalT_openstudio__TimeSeriesIdentifier_t,
  _swigc__p_boost__optionalT_openstudio__TimeSeries_t,
  _swigc__p_boost__optionalT_openstudio__Time_t,
  _swigc__p_boost__optionalT_openstudio__Transformation_t,
  _swigc__p_boost__optionalT_openstudio__UUID_t,
  _swigc__p_boost__optionalT_openstudio__Unit_t,
  _swigc__p_boost__optionalT_openstudio__Vector3d_t,
  _swigc__p_boost__optionalT_openstudio__WhUnit_t,
  _swigc__p_boost__optionalT_openstudio__WorkspaceObject_t,
  _swigc__p_boost__optionalT_openstudio__Workspace_t,
  _swigc__p_boost__optionalT_openstudio__model__AirGap_t,
  _swigc__p_boost__optionalT_openstudio__model__AirLoopHVACOutdoorAirSystem_t,
  _swigc__p_boost__optionalT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t,
  _swigc__p_boost__optionalT_openstudio__model__AirLoopHVACZoneMixer_t,
  _swigc__p_boost__optionalT_openstudio__model__AirLoopHVACZoneSplitter_t,
  _swigc__p_boost__optionalT_openstudio__model__AirLoopHVAC_t,
  _swigc__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t,
  _swigc__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctUncontrolled_t,
  _swigc__p_boost__optionalT_openstudio__model__AirTerminalSingleDuctVAVReheat_t,
  _swigc__p_boost__optionalT_openstudio__model__AirWallMaterial_t,
  _swigc__p_boost__optionalT_openstudio__model__AvailabilityManagerScheduled_t,
  _swigc__p_boost__optionalT_openstudio__model__Blind_t,
  _swigc__p_boost__optionalT_openstudio__model__BoilerHotWater_t,
  _swigc__p_boost__optionalT_openstudio__model__BuildingStandardsInformation_t,
  _swigc__p_boost__optionalT_openstudio__model__BuildingStory_t,
  _swigc__p_boost__optionalT_openstudio__model__Building_t,
  _swigc__p_boost__optionalT_openstudio__model__CFactorUndergroundWallConstruction_t,
  _swigc__p_boost__optionalT_openstudio__model__ChillerElectricEIR_t,
  _swigc__p_boost__optionalT_openstudio__model__ClimateZones_t,
  _swigc__p_boost__optionalT_openstudio__model__CoilCoolingDXSingleSpeed_t,
  _swigc__p_boost__optionalT_openstudio__model__CoilCoolingDXTwoSpeed_t,
  _swigc__p_boost__optionalT_openstudio__model__CoilCoolingWater_t,
  _swigc__p_boost__optionalT_openstudio__model__CoilHeatingDXSingleSpeed_t,
  _swigc__p_boost__optionalT_openstudio__model__CoilHeatingElectric_t,
  _swigc__p_boost__optionalT_openstudio__model__CoilHeatingGas_t,
  _swigc__p_boost__optionalT_openstudio__model__CoilHeatingWater_t,
  _swigc__p_boost__optionalT_openstudio__model__ComponentCost_LineItem_t,
  _swigc__p_boost__optionalT_openstudio__model__ComponentData_t,
  _swigc__p_boost__optionalT_openstudio__model__Component_t,
  _swigc__p_boost__optionalT_openstudio__model__ConnectorMixer_t,
  _swigc__p_boost__optionalT_openstudio__model__ConnectorSplitter_t,
  _swigc__p_boost__optionalT_openstudio__model__ConstructionBaseStandardsInformation_t,
  _swigc__p_boost__optionalT_openstudio__model__ConstructionBase_t,
  _swigc__p_boost__optionalT_openstudio__model__ConstructionWithInternalSource_t,
  _swigc__p_boost__optionalT_openstudio__model__Construction_t,
  _swigc__p_boost__optionalT_openstudio__model__ControllerMechanicalVentilation_t,
  _swigc__p_boost__optionalT_openstudio__model__ControllerOutdoorAir_t,
  _swigc__p_boost__optionalT_openstudio__model__ControllerWaterCoil_t,
  _swigc__p_boost__optionalT_openstudio__model__ConvergenceLimits_t,
  _swigc__p_boost__optionalT_openstudio__model__CoolingTowerSingleSpeed_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveBicubic_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveBiquadratic_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveCubic_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveDoubleExponentialDecay_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveExponent_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveExponentialDecay_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveExponentialSkewNormal_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveFanPressureRise_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveFunctionalPressureDrop_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveLinear_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveQuadraticLinear_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveQuadratic_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveQuartic_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola1_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveRectangularHyperbola2_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveSigmoid_t,
  _swigc__p_boost__optionalT_openstudio__model__CurveTriquadratic_t,
  _swigc__p_boost__optionalT_openstudio__model__Curve_t,
  _swigc__p_boost__optionalT_openstudio__model__DaylightingControl_t,
  _swigc__p_boost__optionalT_openstudio__model__DaylightingDeviceShelf_t,
  _swigc__p_boost__optionalT_openstudio__model__DefaultConstructionSet_t,
  _swigc__p_boost__optionalT_openstudio__model__DefaultScheduleSet_t,
  _swigc__p_boost__optionalT_openstudio__model__DefaultSubSurfaceConstructions_t,
  _swigc__p_boost__optionalT_openstudio__model__DefaultSurfaceConstructions_t,
  _swigc__p_boost__optionalT_openstudio__model__DesignDay_t,
  _swigc__p_boost__optionalT_openstudio__model__DesignSpecificationOutdoorAir_t,
  _swigc__p_boost__optionalT_openstudio__model__DistrictCooling_t,
  _swigc__p_boost__optionalT_openstudio__model__DistrictHeating_t,
  _swigc__p_boost__optionalT_openstudio__model__ElectricEquipmentDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__ElectricEquipment_t,
  _swigc__p_boost__optionalT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t,
  _swigc__p_boost__optionalT_openstudio__model__ExteriorLightsDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__ExteriorLights_t,
  _swigc__p_boost__optionalT_openstudio__model__FFactorGroundFloorConstruction_t,
  _swigc__p_boost__optionalT_openstudio__model__Facility_t,
  _swigc__p_boost__optionalT_openstudio__model__FanConstantVolume_t,
  _swigc__p_boost__optionalT_openstudio__model__FanVariableVolume_t,
  _swigc__p_boost__optionalT_openstudio__model__FenestrationMaterial_t,
  _swigc__p_boost__optionalT_openstudio__model__GasEquipmentDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__GasEquipment_t,
  _swigc__p_boost__optionalT_openstudio__model__GasLayer_t,
  _swigc__p_boost__optionalT_openstudio__model__GasMixture_t,
  _swigc__p_boost__optionalT_openstudio__model__Gas_t,
  _swigc__p_boost__optionalT_openstudio__model__GenericModelObject_t,
  _swigc__p_boost__optionalT_openstudio__model__GlareSensor_t,
  _swigc__p_boost__optionalT_openstudio__model__Glazing_t,
  _swigc__p_boost__optionalT_openstudio__model__HVACComponent_t,
  _swigc__p_boost__optionalT_openstudio__model__HeatBalanceAlgorithm_t,
  _swigc__p_boost__optionalT_openstudio__model__HotWaterEquipmentDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__HotWaterEquipment_t,
  _swigc__p_boost__optionalT_openstudio__model__IlluminanceMap_t,
  _swigc__p_boost__optionalT_openstudio__model__InfraredTransparentMaterial_t,
  _swigc__p_boost__optionalT_openstudio__model__InsideSurfaceConvectionAlgorithm_t,
  _swigc__p_boost__optionalT_openstudio__model__InteriorPartitionSurfaceGroup_t,
  _swigc__p_boost__optionalT_openstudio__model__InteriorPartitionSurface_t,
  _swigc__p_boost__optionalT_openstudio__model__InternalMassDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__InternalMass_t,
  _swigc__p_boost__optionalT_openstudio__model__LayeredConstruction_t,
  _swigc__p_boost__optionalT_openstudio__model__LifeCycleCost_Parameters_t,
  _swigc__p_boost__optionalT_openstudio__model__LightingDesignDay_t,
  _swigc__p_boost__optionalT_openstudio__model__LightingSimulationControl_t,
  _swigc__p_boost__optionalT_openstudio__model__LightingSimulationZone_t,
  _swigc__p_boost__optionalT_openstudio__model__LightsDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__Lights_t,
  _swigc__p_boost__optionalT_openstudio__model__Loop_t,
  _swigc__p_boost__optionalT_openstudio__model__LuminaireDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__Luminaire_t,
  _swigc__p_boost__optionalT_openstudio__model__MasslessOpaqueMaterial_t,
  _swigc__p_boost__optionalT_openstudio__model__Material_t,
  _swigc__p_boost__optionalT_openstudio__model__Meter_t,
  _swigc__p_boost__optionalT_openstudio__model__Mixer_t,
  _swigc__p_boost__optionalT_openstudio__model__ModelObject_t,
  _swigc__p_boost__optionalT_openstudio__model__ModelPartitionMaterial_t,
  _swigc__p_boost__optionalT_openstudio__model__Model_t,
  _swigc__p_boost__optionalT_openstudio__model__Node_t,
  _swigc__p_boost__optionalT_openstudio__model__OpaqueMaterial_t,
  _swigc__p_boost__optionalT_openstudio__model__OtherEquipmentDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__OtherEquipment_t,
  _swigc__p_boost__optionalT_openstudio__model__OutputVariable_t,
  _swigc__p_boost__optionalT_openstudio__model__OutsideSurfaceConvectionAlgorithm_t,
  _swigc__p_boost__optionalT_openstudio__model__ParentObject_t,
  _swigc__p_boost__optionalT_openstudio__model__PeopleDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__People_t,
  _swigc__p_boost__optionalT_openstudio__model__PipeAdiabatic_t,
  _swigc__p_boost__optionalT_openstudio__model__PlanarSurfaceGroup_t,
  _swigc__p_boost__optionalT_openstudio__model__PlanarSurface_t,
  _swigc__p_boost__optionalT_openstudio__model__PlantLoop_t,
  _swigc__p_boost__optionalT_openstudio__model__PortList_t,
  _swigc__p_boost__optionalT_openstudio__model__PumpVariableSpeed_t,
  _swigc__p_boost__optionalT_openstudio__model__RadianceParameters_t,
  _swigc__p_boost__optionalT_openstudio__model__RefractionExtinctionGlazing_t,
  _swigc__p_boost__optionalT_openstudio__model__Relationship_t,
  _swigc__p_boost__optionalT_openstudio__model__RenderingColor_t,
  _swigc__p_boost__optionalT_openstudio__model__ResourceObject_t,
  _swigc__p_boost__optionalT_openstudio__model__RoofVegetation_t,
  _swigc__p_boost__optionalT_openstudio__model__RunPeriodControlDaylightSavingTime_t,
  _swigc__p_boost__optionalT_openstudio__model__RunPeriodControlSpecialDays_t,
  _swigc__p_boost__optionalT_openstudio__model__RunPeriod_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleBase_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleCompact_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleConstant_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleDay_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleFixedInterval_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleInterval_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleRule_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleRuleset_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleTypeLimits_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleVariableInterval_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleWeek_t,
  _swigc__p_boost__optionalT_openstudio__model__ScheduleYear_t,
  _swigc__p_boost__optionalT_openstudio__model__Schedule_t,
  _swigc__p_boost__optionalT_openstudio__model__Screen_t,
  _swigc__p_boost__optionalT_openstudio__model__SetpointManagerMixedAir_t,
  _swigc__p_boost__optionalT_openstudio__model__SetpointManagerSingleZoneReheat_t,
  _swigc__p_boost__optionalT_openstudio__model__Shade_t,
  _swigc__p_boost__optionalT_openstudio__model__ShadingMaterial_t,
  _swigc__p_boost__optionalT_openstudio__model__ShadingSurfaceGroup_t,
  _swigc__p_boost__optionalT_openstudio__model__ShadingSurface_t,
  _swigc__p_boost__optionalT_openstudio__model__ShadowCalculation_t,
  _swigc__p_boost__optionalT_openstudio__model__SimpleGlazing_t,
  _swigc__p_boost__optionalT_openstudio__model__SimulationControl_t,
  _swigc__p_boost__optionalT_openstudio__model__SiteGroundReflectance_t,
  _swigc__p_boost__optionalT_openstudio__model__SiteGroundTemperatureBuildingSurface_t,
  _swigc__p_boost__optionalT_openstudio__model__SiteWaterMainsTemperature_t,
  _swigc__p_boost__optionalT_openstudio__model__Site_t,
  _swigc__p_boost__optionalT_openstudio__model__SizingParameters_t,
  _swigc__p_boost__optionalT_openstudio__model__SizingPeriod_t,
  _swigc__p_boost__optionalT_openstudio__model__SizingPlant_t,
  _swigc__p_boost__optionalT_openstudio__model__SizingSystem_t,
  _swigc__p_boost__optionalT_openstudio__model__SizingZone_t,
  _swigc__p_boost__optionalT_openstudio__model__SkyTemperature_t,
  _swigc__p_boost__optionalT_openstudio__model__SpaceInfiltrationDesignFlowRate_t,
  _swigc__p_boost__optionalT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t,
  _swigc__p_boost__optionalT_openstudio__model__SpaceItem_t,
  _swigc__p_boost__optionalT_openstudio__model__SpaceLoadDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__SpaceLoadInstance_t,
  _swigc__p_boost__optionalT_openstudio__model__SpaceLoad_t,
  _swigc__p_boost__optionalT_openstudio__model__SpaceType_t,
  _swigc__p_boost__optionalT_openstudio__model__Space_t,
  _swigc__p_boost__optionalT_openstudio__model__Splitter_t,
  _swigc__p_boost__optionalT_openstudio__model__StandardGlazing_t,
  _swigc__p_boost__optionalT_openstudio__model__StandardOpaqueMaterial_t,
  _swigc__p_boost__optionalT_openstudio__model__SteamEquipmentDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__SteamEquipment_t,
  _swigc__p_boost__optionalT_openstudio__model__StraightComponent_t,
  _swigc__p_boost__optionalT_openstudio__model__SubSurface_t,
  _swigc__p_boost__optionalT_openstudio__model__Surface_t,
  _swigc__p_boost__optionalT_openstudio__model__ThermalZone_t,
  _swigc__p_boost__optionalT_openstudio__model__ThermochromicGlazing_t,
  _swigc__p_boost__optionalT_openstudio__model__ThermostatSetpointDualSetpoint_t,
  _swigc__p_boost__optionalT_openstudio__model__TimeDependentValuation_t,
  _swigc__p_boost__optionalT_openstudio__model__Timestep_t,
  _swigc__p_boost__optionalT_openstudio__model__Version_t,
  _swigc__p_boost__optionalT_openstudio__model__WaterHeaterMixed_t,
  _swigc__p_boost__optionalT_openstudio__model__WaterToAirComponent_t,
  _swigc__p_boost__optionalT_openstudio__model__WaterToWaterComponent_t,
  _swigc__p_boost__optionalT_openstudio__model__WaterUseConnections_t,
  _swigc__p_boost__optionalT_openstudio__model__WaterUseEquipmentDefinition_t,
  _swigc__p_boost__optionalT_openstudio__model__WaterUseEquipment_t,
  _swigc__p_boost__optionalT_openstudio__model__WeatherFileConditionType_t,
  _swigc__p_boost__optionalT_openstudio__model__WeatherFileDays_t,
  _swigc__p_boost__optionalT_openstudio__model__WeatherFile_t,
  _swigc__p_boost__optionalT_openstudio__model__WindowDataFile_t,
  _swigc__p_boost__optionalT_openstudio__model__YearDescription_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneAirContaminantBalance_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneHVACComponent_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneHVACEquipmentList_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneHVACFourPipeFanCoil_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t,
  _swigc__p_boost__optionalT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t,
  _swigc__p_boost__optionalT_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t_t,
  _swigc__p_boost__optionalT_std__string_t,
  _swigc__p_boost__optionalT_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t_t,
  _swigc__p_boost__optionalT_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t_t,
  _swigc__p_boost__optionalT_unsigned_int_t,
  _swigc__p_char,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_first_type,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_openstudio__EndUses,
  _swigc__p_openstudio__SingletonT_openstudio__ApplicationSingleton_t,
  _swigc__p_openstudio__SingletonT_openstudio__LoggerSingleton_t,
  _swigc__p_openstudio__SingletonT_openstudio__model__ScheduleTypeRegistrySingleton_t,
  _swigc__p_openstudio__UUID,
  _swigc__p_openstudio__isomodel__ForwardTranslator,
  _swigc__p_openstudio__isomodel__SimModel,
  _swigc__p_openstudio__isomodel__UserModel,
  _swigc__p_openstudio__model__Component,
  _swigc__p_openstudio__model__Model,
  _swigc__p_reference,
  _swigc__p_second_type,
  _swigc__p_size_type,
  _swigc__p_std__mapT_openstudio__UUID_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_std__pairT_openstudio__UUID_const_openstudio__UUID_t_t_t,
  _swigc__p_std__pairT_openstudio__IdfObject_openstudio__IdfObject_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_double_std__lessT_double_t_std__allocatorT_double_t_t,
  _swigc__p_std__setT_int_std__lessT_int_t_std__allocatorT_int_t_t,
  _swigc__p_std__setT_openstudio__DataError_openstudio__DataErrorLess_std__allocatorT_openstudio__DataError_t_t,
  _swigc__p_std__setT_openstudio__IddObjectType_std__lessT_openstudio__IddObjectType_t_std__allocatorT_openstudio__IddObjectType_t_t,
  _swigc__p_std__setT_openstudio__ReportingFrequency_std__lessT_openstudio__ReportingFrequency_t_std__allocatorT_openstudio__ReportingFrequency_t_t,
  _swigc__p_std__setT_openstudio__UUID_std__lessT_openstudio__UUID_t_std__allocatorT_openstudio__UUID_t_t,
  _swigc__p_std__setT_std__string_IstringCompare_std__allocatorT_std__string_t_t,
  _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  _swigc__p_std__setT_unsigned_int_std__lessT_unsigned_int_t_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_bool_std__allocatorT_bool_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_openstudio__AttributeDescription_std__allocatorT_openstudio__AttributeDescription_t_t,
  _swigc__p_std__vectorT_openstudio__Attribute_std__allocatorT_openstudio__Attribute_t_t,
  _swigc__p_std__vectorT_openstudio__BCLMeasure_std__allocatorT_openstudio__BCLMeasure_t_t,
  _swigc__p_std__vectorT_openstudio__BTUUnit_std__allocatorT_openstudio__BTUUnit_t_t,
  _swigc__p_std__vectorT_openstudio__BoundingBox_std__allocatorT_openstudio__BoundingBox_t_t,
  _swigc__p_std__vectorT_openstudio__CFMUnit_std__allocatorT_openstudio__CFMUnit_t_t,
  _swigc__p_std__vectorT_openstudio__Calendar_std__allocatorT_openstudio__Calendar_t_t,
  _swigc__p_std__vectorT_openstudio__CelciusUnit_std__allocatorT_openstudio__CelciusUnit_t_t,
  _swigc__p_std__vectorT_openstudio__DataError_std__allocatorT_openstudio__DataError_t_t,
  _swigc__p_std__vectorT_openstudio__DateTime_std__allocatorT_openstudio__DateTime_t_t,
  _swigc__p_std__vectorT_openstudio__Date_std__allocatorT_openstudio__Date_t_t,
  _swigc__p_std__vectorT_openstudio__DocumentElement_std__allocatorT_openstudio__DocumentElement_t_t,
  _swigc__p_std__vectorT_openstudio__EulerAngles_std__allocatorT_openstudio__EulerAngles_t_t,
  _swigc__p_std__vectorT_openstudio__FahrenheitUnit_std__allocatorT_openstudio__FahrenheitUnit_t_t,
  _swigc__p_std__vectorT_openstudio__FileReference_std__allocatorT_openstudio__FileReference_t_t,
  _swigc__p_std__vectorT_openstudio__FuelType_std__allocatorT_openstudio__FuelType_t_t,
  _swigc__p_std__vectorT_openstudio__GPDUnit_std__allocatorT_openstudio__GPDUnit_t_t,
  _swigc__p_std__vectorT_openstudio__IPUnit_std__allocatorT_openstudio__IPUnit_t_t,
  _swigc__p_std__vectorT_openstudio__IddField_std__allocatorT_openstudio__IddField_t_t,
  _swigc__p_std__vectorT_openstudio__IddFile_std__allocatorT_openstudio__IddFile_t_t,
  _swigc__p_std__vectorT_openstudio__IddKey_std__allocatorT_openstudio__IddKey_t_t,
  _swigc__p_std__vectorT_openstudio__IddObjectType_std__allocatorT_openstudio__IddObjectType_t_t,
  _swigc__p_std__vectorT_openstudio__IddObject_std__allocatorT_openstudio__IddObject_t_t,
  _swigc__p_std__vectorT_openstudio__IdfExtensibleGroup_std__allocatorT_openstudio__IdfExtensibleGroup_t_t,
  _swigc__p_std__vectorT_openstudio__IdfFile_std__allocatorT_openstudio__IdfFile_t_t,
  _swigc__p_std__vectorT_openstudio__IdfObject_std__allocatorT_openstudio__IdfObject_t_t,
  _swigc__p_std__vectorT_openstudio__ImfFile_std__allocatorT_openstudio__ImfFile_t_t,
  _swigc__p_std__vectorT_openstudio__MPHUnit_std__allocatorT_openstudio__MPHUnit_t_t,
  _swigc__p_std__vectorT_openstudio__Misc1Unit_std__allocatorT_openstudio__Misc1Unit_t_t,
  _swigc__p_std__vectorT_openstudio__Plane_std__allocatorT_openstudio__Plane_t_t,
  _swigc__p_std__vectorT_openstudio__Point3d_std__allocatorT_openstudio__Point3d_t_t,
  _swigc__p_std__vectorT_openstudio__Quantity_std__allocatorT_openstudio__Quantity_t_t,
  _swigc__p_std__vectorT_openstudio__ReportingFrequency_std__allocatorT_openstudio__ReportingFrequency_t_t,
  _swigc__p_std__vectorT_openstudio__SIUnit_std__allocatorT_openstudio__SIUnit_t_t,
  _swigc__p_std__vectorT_openstudio__SectionElement_std__allocatorT_openstudio__SectionElement_t_t,
  _swigc__p_std__vectorT_openstudio__Section_std__allocatorT_openstudio__Section_t_t,
  _swigc__p_std__vectorT_openstudio__SqlFileTimeSeriesQuery_std__allocatorT_openstudio__SqlFileTimeSeriesQuery_t_t,
  _swigc__p_std__vectorT_openstudio__TableElement_std__allocatorT_openstudio__TableElement_t_t,
  _swigc__p_std__vectorT_openstudio__Table_std__allocatorT_openstudio__Table_t_t,
  _swigc__p_std__vectorT_openstudio__Tag_std__allocatorT_openstudio__Tag_t_t,
  _swigc__p_std__vectorT_openstudio__TemperatureUnit_std__allocatorT_openstudio__TemperatureUnit_t_t,
  _swigc__p_std__vectorT_openstudio__Text_std__allocatorT_openstudio__Text_t_t,
  _swigc__p_std__vectorT_openstudio__ThermUnit_std__allocatorT_openstudio__ThermUnit_t_t,
  _swigc__p_std__vectorT_openstudio__TimeSeries_std__allocatorT_openstudio__TimeSeries_t_t,
  _swigc__p_std__vectorT_openstudio__Time_std__allocatorT_openstudio__Time_t_t,
  _swigc__p_std__vectorT_openstudio__Transformation_std__allocatorT_openstudio__Transformation_t_t,
  _swigc__p_std__vectorT_openstudio__UUID_std__allocatorT_openstudio__UUID_t_t,
  _swigc__p_std__vectorT_openstudio__Unit_std__allocatorT_openstudio__Unit_t_t,
  _swigc__p_std__vectorT_openstudio__Vector3d_std__allocatorT_openstudio__Vector3d_t_t,
  _swigc__p_std__vectorT_openstudio__WhUnit_std__allocatorT_openstudio__WhUnit_t_t,
  _swigc__p_std__vectorT_openstudio__WorkspaceObject_std__allocatorT_openstudio__WorkspaceObject_t_t,
  _swigc__p_std__vectorT_openstudio__Workspace_std__allocatorT_openstudio__Workspace_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirGap_std__allocatorT_openstudio__model__AirGap_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirLoopHVACOutdoorAirSystem_std__allocatorT_openstudio__model__AirLoopHVACOutdoorAirSystem_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_std__allocatorT_openstudio__model__AirLoopHVACUnitaryHeatPumpAirToAir_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirLoopHVACZoneMixer_std__allocatorT_openstudio__model__AirLoopHVACZoneMixer_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirLoopHVACZoneSplitter_std__allocatorT_openstudio__model__AirLoopHVACZoneSplitter_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirLoopHVAC_std__allocatorT_openstudio__model__AirLoopHVAC_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_std__allocatorT_openstudio__model__AirTerminalSingleDuctParallelPIUReheat_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirTerminalSingleDuctUncontrolled_std__allocatorT_openstudio__model__AirTerminalSingleDuctUncontrolled_t_t,
  _swigc__p_std__vectorT_openstudio__model__AirWallMaterial_std__allocatorT_openstudio__model__AirWallMaterial_t_t,
  _swigc__p_std__vectorT_openstudio__model__AvailabilityManagerScheduled_std__allocatorT_openstudio__model__AvailabilityManagerScheduled_t_t,
  _swigc__p_std__vectorT_openstudio__model__Blind_std__allocatorT_openstudio__model__Blind_t_t,
  _swigc__p_std__vectorT_openstudio__model__BoilerHotWater_std__allocatorT_openstudio__model__BoilerHotWater_t_t,
  _swigc__p_std__vectorT_openstudio__model__BuildingStory_std__allocatorT_openstudio__model__BuildingStory_t_t,
  _swigc__p_std__vectorT_openstudio__model__Building_std__allocatorT_openstudio__model__Building_t_t,
  _swigc__p_std__vectorT_openstudio__model__CFactorUndergroundWallConstruction_std__allocatorT_openstudio__model__CFactorUndergroundWallConstruction_t_t,
  _swigc__p_std__vectorT_openstudio__model__ChillerElectricEIR_std__allocatorT_openstudio__model__ChillerElectricEIR_t_t,
  _swigc__p_std__vectorT_openstudio__model__ClimateZone_std__allocatorT_openstudio__model__ClimateZone_t_t,
  _swigc__p_std__vectorT_openstudio__model__CoilCoolingDXSingleSpeed_std__allocatorT_openstudio__model__CoilCoolingDXSingleSpeed_t_t,
  _swigc__p_std__vectorT_openstudio__model__CoilCoolingDXTwoSpeed_std__allocatorT_openstudio__model__CoilCoolingDXTwoSpeed_t_t,
  _swigc__p_std__vectorT_openstudio__model__CoilHeatingDXSingleSpeed_std__allocatorT_openstudio__model__CoilHeatingDXSingleSpeed_t_t,
  _swigc__p_std__vectorT_openstudio__model__CoilHeatingElectric_std__allocatorT_openstudio__model__CoilHeatingElectric_t_t,
  _swigc__p_std__vectorT_openstudio__model__CoilHeatingGas_std__allocatorT_openstudio__model__CoilHeatingGas_t_t,
  _swigc__p_std__vectorT_openstudio__model__ComponentCost_LineItem_std__allocatorT_openstudio__model__ComponentCost_LineItem_t_t,
  _swigc__p_std__vectorT_openstudio__model__ComponentData_std__allocatorT_openstudio__model__ComponentData_t_t,
  _swigc__p_std__vectorT_openstudio__model__Component_std__allocatorT_openstudio__model__Component_t_t,
  _swigc__p_std__vectorT_openstudio__model__ConstructionBaseStandardsInformation_std__allocatorT_openstudio__model__ConstructionBaseStandardsInformation_t_t,
  _swigc__p_std__vectorT_openstudio__model__ConstructionBase_std__allocatorT_openstudio__model__ConstructionBase_t_t,
  _swigc__p_std__vectorT_openstudio__model__ConstructionWithInternalSource_std__allocatorT_openstudio__model__ConstructionWithInternalSource_t_t,
  _swigc__p_std__vectorT_openstudio__model__Construction_std__allocatorT_openstudio__model__Construction_t_t,
  _swigc__p_std__vectorT_openstudio__model__ControllerMechanicalVentilation_std__allocatorT_openstudio__model__ControllerMechanicalVentilation_t_t,
  _swigc__p_std__vectorT_openstudio__model__ControllerOutdoorAir_std__allocatorT_openstudio__model__ControllerOutdoorAir_t_t,
  _swigc__p_std__vectorT_openstudio__model__ControllerWaterCoil_std__allocatorT_openstudio__model__ControllerWaterCoil_t_t,
  _swigc__p_std__vectorT_openstudio__model__ConvergenceLimits_std__allocatorT_openstudio__model__ConvergenceLimits_t_t,
  _swigc__p_std__vectorT_openstudio__model__CoolingTowerSingleSpeed_std__allocatorT_openstudio__model__CoolingTowerSingleSpeed_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveBicubic_std__allocatorT_openstudio__model__CurveBicubic_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveBiquadratic_std__allocatorT_openstudio__model__CurveBiquadratic_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveCubic_std__allocatorT_openstudio__model__CurveCubic_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveDoubleExponentialDecay_std__allocatorT_openstudio__model__CurveDoubleExponentialDecay_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveExponent_std__allocatorT_openstudio__model__CurveExponent_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveExponentialDecay_std__allocatorT_openstudio__model__CurveExponentialDecay_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveExponentialSkewNormal_std__allocatorT_openstudio__model__CurveExponentialSkewNormal_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveFanPressureRise_std__allocatorT_openstudio__model__CurveFanPressureRise_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveFunctionalPressureDrop_std__allocatorT_openstudio__model__CurveFunctionalPressureDrop_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveLinear_std__allocatorT_openstudio__model__CurveLinear_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveQuadraticLinear_std__allocatorT_openstudio__model__CurveQuadraticLinear_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveQuadratic_std__allocatorT_openstudio__model__CurveQuadratic_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveQuartic_std__allocatorT_openstudio__model__CurveQuartic_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveRectangularHyperbola1_std__allocatorT_openstudio__model__CurveRectangularHyperbola1_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveRectangularHyperbola2_std__allocatorT_openstudio__model__CurveRectangularHyperbola2_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveSigmoid_std__allocatorT_openstudio__model__CurveSigmoid_t_t,
  _swigc__p_std__vectorT_openstudio__model__CurveTriquadratic_std__allocatorT_openstudio__model__CurveTriquadratic_t_t,
  _swigc__p_std__vectorT_openstudio__model__Curve_std__allocatorT_openstudio__model__Curve_t_t,
  _swigc__p_std__vectorT_openstudio__model__DaylightingControl_std__allocatorT_openstudio__model__DaylightingControl_t_t,
  _swigc__p_std__vectorT_openstudio__model__DaylightingDeviceShelf_std__allocatorT_openstudio__model__DaylightingDeviceShelf_t_t,
  _swigc__p_std__vectorT_openstudio__model__DefaultConstructionSet_std__allocatorT_openstudio__model__DefaultConstructionSet_t_t,
  _swigc__p_std__vectorT_openstudio__model__DefaultScheduleSet_std__allocatorT_openstudio__model__DefaultScheduleSet_t_t,
  _swigc__p_std__vectorT_openstudio__model__DefaultSubSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSubSurfaceConstructions_t_t,
  _swigc__p_std__vectorT_openstudio__model__DefaultSurfaceConstructions_std__allocatorT_openstudio__model__DefaultSurfaceConstructions_t_t,
  _swigc__p_std__vectorT_openstudio__model__DesignDay_std__allocatorT_openstudio__model__DesignDay_t_t,
  _swigc__p_std__vectorT_openstudio__model__DesignSpecificationOutdoorAir_std__allocatorT_openstudio__model__DesignSpecificationOutdoorAir_t_t,
  _swigc__p_std__vectorT_openstudio__model__DistrictCooling_std__allocatorT_openstudio__model__DistrictCooling_t_t,
  _swigc__p_std__vectorT_openstudio__model__DistrictHeating_std__allocatorT_openstudio__model__DistrictHeating_t_t,
  _swigc__p_std__vectorT_openstudio__model__ElectricEquipmentDefinition_std__allocatorT_openstudio__model__ElectricEquipmentDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__ElectricEquipment_std__allocatorT_openstudio__model__ElectricEquipment_t_t,
  _swigc__p_std__vectorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_std__allocatorT_openstudio__model__EvaporativeCoolerDirectResearchSpecial_t_t,
  _swigc__p_std__vectorT_openstudio__model__ExteriorLightsDefinition_std__allocatorT_openstudio__model__ExteriorLightsDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__ExteriorLights_std__allocatorT_openstudio__model__ExteriorLights_t_t,
  _swigc__p_std__vectorT_openstudio__model__FFactorGroundFloorConstruction_std__allocatorT_openstudio__model__FFactorGroundFloorConstruction_t_t,
  _swigc__p_std__vectorT_openstudio__model__FanConstantVolume_std__allocatorT_openstudio__model__FanConstantVolume_t_t,
  _swigc__p_std__vectorT_openstudio__model__FanVariableVolume_std__allocatorT_openstudio__model__FanVariableVolume_t_t,
  _swigc__p_std__vectorT_openstudio__model__FenestrationMaterial_std__allocatorT_openstudio__model__FenestrationMaterial_t_t,
  _swigc__p_std__vectorT_openstudio__model__FieldViewer_std__allocatorT_openstudio__model__FieldViewer_t_t,
  _swigc__p_std__vectorT_openstudio__model__GasEquipmentDefinition_std__allocatorT_openstudio__model__GasEquipmentDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__GasEquipment_std__allocatorT_openstudio__model__GasEquipment_t_t,
  _swigc__p_std__vectorT_openstudio__model__GasLayer_std__allocatorT_openstudio__model__GasLayer_t_t,
  _swigc__p_std__vectorT_openstudio__model__GasMixture_std__allocatorT_openstudio__model__GasMixture_t_t,
  _swigc__p_std__vectorT_openstudio__model__Gas_std__allocatorT_openstudio__model__Gas_t_t,
  _swigc__p_std__vectorT_openstudio__model__GenericModelObject_std__allocatorT_openstudio__model__GenericModelObject_t_t,
  _swigc__p_std__vectorT_openstudio__model__GlareSensor_std__allocatorT_openstudio__model__GlareSensor_t_t,
  _swigc__p_std__vectorT_openstudio__model__Glazing_std__allocatorT_openstudio__model__Glazing_t_t,
  _swigc__p_std__vectorT_openstudio__model__HeatBalanceAlgorithm_std__allocatorT_openstudio__model__HeatBalanceAlgorithm_t_t,
  _swigc__p_std__vectorT_openstudio__model__HotWaterEquipmentDefinition_std__allocatorT_openstudio__model__HotWaterEquipmentDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__HotWaterEquipment_std__allocatorT_openstudio__model__HotWaterEquipment_t_t,
  _swigc__p_std__vectorT_openstudio__model__IlluminanceMap_std__allocatorT_openstudio__model__IlluminanceMap_t_t,
  _swigc__p_std__vectorT_openstudio__model__InfraredTransparentMaterial_std__allocatorT_openstudio__model__InfraredTransparentMaterial_t_t,
  _swigc__p_std__vectorT_openstudio__model__InteriorPartitionSurfaceGroup_std__allocatorT_openstudio__model__InteriorPartitionSurfaceGroup_t_t,
  _swigc__p_std__vectorT_openstudio__model__InteriorPartitionSurface_std__allocatorT_openstudio__model__InteriorPartitionSurface_t_t,
  _swigc__p_std__vectorT_openstudio__model__InternalMassDefinition_std__allocatorT_openstudio__model__InternalMassDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__InternalMass_std__allocatorT_openstudio__model__InternalMass_t_t,
  _swigc__p_std__vectorT_openstudio__model__LayeredConstruction_std__allocatorT_openstudio__model__LayeredConstruction_t_t,
  _swigc__p_std__vectorT_openstudio__model__LifeCycleCost_Parameters_std__allocatorT_openstudio__model__LifeCycleCost_Parameters_t_t,
  _swigc__p_std__vectorT_openstudio__model__LightingDesignDay_std__allocatorT_openstudio__model__LightingDesignDay_t_t,
  _swigc__p_std__vectorT_openstudio__model__LightingSimulationControl_std__allocatorT_openstudio__model__LightingSimulationControl_t_t,
  _swigc__p_std__vectorT_openstudio__model__LightingSimulationZone_std__allocatorT_openstudio__model__LightingSimulationZone_t_t,
  _swigc__p_std__vectorT_openstudio__model__LightsDefinition_std__allocatorT_openstudio__model__LightsDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__Lights_std__allocatorT_openstudio__model__Lights_t_t,
  _swigc__p_std__vectorT_openstudio__model__LuminaireDefinition_std__allocatorT_openstudio__model__LuminaireDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__Luminaire_std__allocatorT_openstudio__model__Luminaire_t_t,
  _swigc__p_std__vectorT_openstudio__model__MasslessOpaqueMaterial_std__allocatorT_openstudio__model__MasslessOpaqueMaterial_t_t,
  _swigc__p_std__vectorT_openstudio__model__Material_std__allocatorT_openstudio__model__Material_t_t,
  _swigc__p_std__vectorT_openstudio__model__Meter_std__allocatorT_openstudio__model__Meter_t_t,
  _swigc__p_std__vectorT_openstudio__model__ModelObject_std__allocatorT_openstudio__model__ModelObject_t_t,
  _swigc__p_std__vectorT_openstudio__model__ModelPartitionMaterial_std__allocatorT_openstudio__model__ModelPartitionMaterial_t_t,
  _swigc__p_std__vectorT_openstudio__model__Model_std__allocatorT_openstudio__model__Model_t_t,
  _swigc__p_std__vectorT_openstudio__model__Node_std__allocatorT_openstudio__model__Node_t_t,
  _swigc__p_std__vectorT_openstudio__model__OpaqueMaterial_std__allocatorT_openstudio__model__OpaqueMaterial_t_t,
  _swigc__p_std__vectorT_openstudio__model__OtherEquipmentDefinition_std__allocatorT_openstudio__model__OtherEquipmentDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__OtherEquipment_std__allocatorT_openstudio__model__OtherEquipment_t_t,
  _swigc__p_std__vectorT_openstudio__model__OutputVariable_std__allocatorT_openstudio__model__OutputVariable_t_t,
  _swigc__p_std__vectorT_openstudio__model__ParentObject_std__allocatorT_openstudio__model__ParentObject_t_t,
  _swigc__p_std__vectorT_openstudio__model__PeopleDefinition_std__allocatorT_openstudio__model__PeopleDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__People_std__allocatorT_openstudio__model__People_t_t,
  _swigc__p_std__vectorT_openstudio__model__PipeAdiabatic_std__allocatorT_openstudio__model__PipeAdiabatic_t_t,
  _swigc__p_std__vectorT_openstudio__model__PlanarSurfaceGroup_std__allocatorT_openstudio__model__PlanarSurfaceGroup_t_t,
  _swigc__p_std__vectorT_openstudio__model__PlanarSurface_std__allocatorT_openstudio__model__PlanarSurface_t_t,
  _swigc__p_std__vectorT_openstudio__model__PortList_std__allocatorT_openstudio__model__PortList_t_t,
  _swigc__p_std__vectorT_openstudio__model__PumpVariableSpeed_std__allocatorT_openstudio__model__PumpVariableSpeed_t_t,
  _swigc__p_std__vectorT_openstudio__model__RadianceParameters_std__allocatorT_openstudio__model__RadianceParameters_t_t,
  _swigc__p_std__vectorT_openstudio__model__RefractionExtinctionGlazing_std__allocatorT_openstudio__model__RefractionExtinctionGlazing_t_t,
  _swigc__p_std__vectorT_openstudio__model__Relationship_std__allocatorT_openstudio__model__Relationship_t_t,
  _swigc__p_std__vectorT_openstudio__model__RenderingColor_std__allocatorT_openstudio__model__RenderingColor_t_t,
  _swigc__p_std__vectorT_openstudio__model__ResourceObject_std__allocatorT_openstudio__model__ResourceObject_t_t,
  _swigc__p_std__vectorT_openstudio__model__RoofVegetation_std__allocatorT_openstudio__model__RoofVegetation_t_t,
  _swigc__p_std__vectorT_openstudio__model__RunPeriodControlDaylightSavingTime_std__allocatorT_openstudio__model__RunPeriodControlDaylightSavingTime_t_t,
  _swigc__p_std__vectorT_openstudio__model__RunPeriodControlSpecialDays_std__allocatorT_openstudio__model__RunPeriodControlSpecialDays_t_t,
  _swigc__p_std__vectorT_openstudio__model__RunPeriod_std__allocatorT_openstudio__model__RunPeriod_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleBase_std__allocatorT_openstudio__model__ScheduleBase_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleCompact_std__allocatorT_openstudio__model__ScheduleCompact_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleConstant_std__allocatorT_openstudio__model__ScheduleConstant_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleDay_std__allocatorT_openstudio__model__ScheduleDay_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleFixedInterval_std__allocatorT_openstudio__model__ScheduleFixedInterval_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleInterval_std__allocatorT_openstudio__model__ScheduleInterval_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleRule_std__allocatorT_openstudio__model__ScheduleRule_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleRuleset_std__allocatorT_openstudio__model__ScheduleRuleset_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleTypeLimits_std__allocatorT_openstudio__model__ScheduleTypeLimits_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleType_std__allocatorT_openstudio__model__ScheduleType_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleVariableInterval_std__allocatorT_openstudio__model__ScheduleVariableInterval_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleWeek_std__allocatorT_openstudio__model__ScheduleWeek_t_t,
  _swigc__p_std__vectorT_openstudio__model__ScheduleYear_std__allocatorT_openstudio__model__ScheduleYear_t_t,
  _swigc__p_std__vectorT_openstudio__model__Schedule_std__allocatorT_openstudio__model__Schedule_t_t,
  _swigc__p_std__vectorT_openstudio__model__Screen_std__allocatorT_openstudio__model__Screen_t_t,
  _swigc__p_std__vectorT_openstudio__model__SetpointManagerMixedAir_std__allocatorT_openstudio__model__SetpointManagerMixedAir_t_t,
  _swigc__p_std__vectorT_openstudio__model__SetpointManagerSingleZoneReheat_std__allocatorT_openstudio__model__SetpointManagerSingleZoneReheat_t_t,
  _swigc__p_std__vectorT_openstudio__model__Shade_std__allocatorT_openstudio__model__Shade_t_t,
  _swigc__p_std__vectorT_openstudio__model__ShadingMaterial_std__allocatorT_openstudio__model__ShadingMaterial_t_t,
  _swigc__p_std__vectorT_openstudio__model__ShadingSurfaceGroup_std__allocatorT_openstudio__model__ShadingSurfaceGroup_t_t,
  _swigc__p_std__vectorT_openstudio__model__ShadingSurface_std__allocatorT_openstudio__model__ShadingSurface_t_t,
  _swigc__p_std__vectorT_openstudio__model__SimpleGlazing_std__allocatorT_openstudio__model__SimpleGlazing_t_t,
  _swigc__p_std__vectorT_openstudio__model__SiteGroundReflectance_std__allocatorT_openstudio__model__SiteGroundReflectance_t_t,
  _swigc__p_std__vectorT_openstudio__model__SiteGroundTemperatureBuildingSurface_std__allocatorT_openstudio__model__SiteGroundTemperatureBuildingSurface_t_t,
  _swigc__p_std__vectorT_openstudio__model__SiteWaterMainsTemperature_std__allocatorT_openstudio__model__SiteWaterMainsTemperature_t_t,
  _swigc__p_std__vectorT_openstudio__model__Site_std__allocatorT_openstudio__model__Site_t_t,
  _swigc__p_std__vectorT_openstudio__model__SizingParameters_std__allocatorT_openstudio__model__SizingParameters_t_t,
  _swigc__p_std__vectorT_openstudio__model__SizingPeriod_std__allocatorT_openstudio__model__SizingPeriod_t_t,
  _swigc__p_std__vectorT_openstudio__model__SizingPlant_std__allocatorT_openstudio__model__SizingPlant_t_t,
  _swigc__p_std__vectorT_openstudio__model__SizingSystem_std__allocatorT_openstudio__model__SizingSystem_t_t,
  _swigc__p_std__vectorT_openstudio__model__SizingZone_std__allocatorT_openstudio__model__SizingZone_t_t,
  _swigc__p_std__vectorT_openstudio__model__SkyTemperature_std__allocatorT_openstudio__model__SkyTemperature_t_t,
  _swigc__p_std__vectorT_openstudio__model__SpaceInfiltrationDesignFlowRate_std__allocatorT_openstudio__model__SpaceInfiltrationDesignFlowRate_t_t,
  _swigc__p_std__vectorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_std__allocatorT_openstudio__model__SpaceInfiltrationEffectiveLeakageArea_t_t,
  _swigc__p_std__vectorT_openstudio__model__SpaceItem_std__allocatorT_openstudio__model__SpaceItem_t_t,
  _swigc__p_std__vectorT_openstudio__model__SpaceLoadDefinition_std__allocatorT_openstudio__model__SpaceLoadDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__SpaceLoadInstance_std__allocatorT_openstudio__model__SpaceLoadInstance_t_t,
  _swigc__p_std__vectorT_openstudio__model__SpaceLoad_std__allocatorT_openstudio__model__SpaceLoad_t_t,
  _swigc__p_std__vectorT_openstudio__model__SpaceType_std__allocatorT_openstudio__model__SpaceType_t_t,
  _swigc__p_std__vectorT_openstudio__model__Space_std__allocatorT_openstudio__model__Space_t_t,
  _swigc__p_std__vectorT_openstudio__model__StandardGlazing_std__allocatorT_openstudio__model__StandardGlazing_t_t,
  _swigc__p_std__vectorT_openstudio__model__StandardOpaqueMaterial_std__allocatorT_openstudio__model__StandardOpaqueMaterial_t_t,
  _swigc__p_std__vectorT_openstudio__model__SteamEquipmentDefinition_std__allocatorT_openstudio__model__SteamEquipmentDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__SteamEquipment_std__allocatorT_openstudio__model__SteamEquipment_t_t,
  _swigc__p_std__vectorT_openstudio__model__StraightComponent_std__allocatorT_openstudio__model__StraightComponent_t_t,
  _swigc__p_std__vectorT_openstudio__model__SubSurface_std__allocatorT_openstudio__model__SubSurface_t_t,
  _swigc__p_std__vectorT_openstudio__model__Surface_std__allocatorT_openstudio__model__Surface_t_t,
  _swigc__p_std__vectorT_openstudio__model__ThermalZone_std__allocatorT_openstudio__model__ThermalZone_t_t,
  _swigc__p_std__vectorT_openstudio__model__ThermochromicGlazing_std__allocatorT_openstudio__model__ThermochromicGlazing_t_t,
  _swigc__p_std__vectorT_openstudio__model__WaterHeaterMixed_std__allocatorT_openstudio__model__WaterHeaterMixed_t_t,
  _swigc__p_std__vectorT_openstudio__model__WaterUseConnections_std__allocatorT_openstudio__model__WaterUseConnections_t_t,
  _swigc__p_std__vectorT_openstudio__model__WaterUseEquipmentDefinition_std__allocatorT_openstudio__model__WaterUseEquipmentDefinition_t_t,
  _swigc__p_std__vectorT_openstudio__model__WaterUseEquipment_std__allocatorT_openstudio__model__WaterUseEquipment_t_t,
  _swigc__p_std__vectorT_openstudio__model__WeatherFileConditionType_std__allocatorT_openstudio__model__WeatherFileConditionType_t_t,
  _swigc__p_std__vectorT_openstudio__model__WeatherFileDays_std__allocatorT_openstudio__model__WeatherFileDays_t_t,
  _swigc__p_std__vectorT_openstudio__model__WeatherFile_std__allocatorT_openstudio__model__WeatherFile_t_t,
  _swigc__p_std__vectorT_openstudio__model__WindowDataFile_std__allocatorT_openstudio__model__WindowDataFile_t_t,
  _swigc__p_std__vectorT_openstudio__model__YearDescription_std__allocatorT_openstudio__model__YearDescription_t_t,
  _swigc__p_std__vectorT_openstudio__model__ZoneAirContaminantBalance_std__allocatorT_openstudio__model__ZoneAirContaminantBalance_t_t,
  _swigc__p_std__vectorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_std__allocatorT_openstudio__model__ZoneAirHeatBalanceAlgorithm_t_t,
  _swigc__p_std__vectorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_std__allocatorT_openstudio__model__ZoneCapacitanceMultiplierResearchSpecial_t_t,
  _swigc__p_std__vectorT_openstudio__model__ZoneHVACEquipmentList_std__allocatorT_openstudio__model__ZoneHVACEquipmentList_t_t,
  _swigc__p_std__vectorT_openstudio__model__ZoneHVACFourPipeFanCoil_std__allocatorT_openstudio__model__ZoneHVACFourPipeFanCoil_t_t,
  _swigc__p_std__vectorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_std__allocatorT_openstudio__model__ZoneHVACIdealLoadsAirSystem_t_t,
  _swigc__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalAirConditioner_t_t,
  _swigc__p_std__vectorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_std__allocatorT_openstudio__model__ZoneHVACPackagedTerminalHeatPump_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__wstring,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_value_type,
  _swigc__p_void,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_openstudioisomodel(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mISOModel = rb_define_module("OpenStudio");
  mISOModel = rb_define_module_under(mISOModel, "ISOModel");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mISOModel, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::GC_VALUE::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mISOModel, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mISOModel, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  
  SwigClassSimModel.klass = rb_define_class_under(mISOModel, "SimModel", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_openstudio__isomodel__SimModel, (void *) &SwigClassSimModel);
  rb_define_alloc_func(SwigClassSimModel.klass, _wrap_SimModel_allocate);
  rb_define_method(SwigClassSimModel.klass, "initialize", VALUEFUNC(_wrap_new_SimModel), -1);
  rb_define_method(SwigClassSimModel.klass, "simulate", VALUEFUNC(_wrap_SimModel_simulate), -1);
  SwigClassSimModel.mark = 0;
  SwigClassSimModel.destroy = (void (*)(void *)) free_openstudio_isomodel_SimModel;
  SwigClassSimModel.trackObjects = 0;
  
  SwigClassUserModel.klass = rb_define_class_under(mISOModel, "UserModel", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_openstudio__isomodel__UserModel, (void *) &SwigClassUserModel);
  rb_define_alloc_func(SwigClassUserModel.klass, _wrap_UserModel_allocate);
  rb_define_method(SwigClassUserModel.klass, "initialize", VALUEFUNC(_wrap_new_UserModel), -1);
  rb_define_method(SwigClassUserModel.klass, "toSimModel", VALUEFUNC(_wrap_UserModel_toSimModel), -1);
  rb_define_method(SwigClassUserModel.klass, "terrainClass", VALUEFUNC(_wrap_UserModel_terrainClass), -1);
  rb_define_method(SwigClassUserModel.klass, "stories", VALUEFUNC(_wrap_UserModel_stories), -1);
  rb_define_method(SwigClassUserModel.klass, "floorArea", VALUEFUNC(_wrap_UserModel_floorArea), -1);
  rb_define_method(SwigClassUserModel.klass, "floorToFloorHeight", VALUEFUNC(_wrap_UserModel_floorToFloorHeight), -1);
  rb_define_method(SwigClassUserModel.klass, "buildingOccupancyFrom", VALUEFUNC(_wrap_UserModel_buildingOccupancyFrom), -1);
  rb_define_method(SwigClassUserModel.klass, "buildingOccupancyTo", VALUEFUNC(_wrap_UserModel_buildingOccupancyTo), -1);
  rb_define_method(SwigClassUserModel.klass, "equivFullLoadOccupancyFrom", VALUEFUNC(_wrap_UserModel_equivFullLoadOccupancyFrom), -1);
  rb_define_method(SwigClassUserModel.klass, "qeuivFullLoadOccupancyTo", VALUEFUNC(_wrap_UserModel_qeuivFullLoadOccupancyTo), -1);
  rb_define_method(SwigClassUserModel.klass, "peopleDensityOccupied", VALUEFUNC(_wrap_UserModel_peopleDensityOccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "peopleDensityUnoccupied", VALUEFUNC(_wrap_UserModel_peopleDensityUnoccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "heatingOccupiedSetpoint", VALUEFUNC(_wrap_UserModel_heatingOccupiedSetpoint), -1);
  rb_define_method(SwigClassUserModel.klass, "heatingUnoccupiedSetpoint", VALUEFUNC(_wrap_UserModel_heatingUnoccupiedSetpoint), -1);
  rb_define_method(SwigClassUserModel.klass, "coolingOccupiedSetpoint", VALUEFUNC(_wrap_UserModel_coolingOccupiedSetpoint), -1);
  rb_define_method(SwigClassUserModel.klass, "coolingUnoccupiedSetpoint", VALUEFUNC(_wrap_UserModel_coolingUnoccupiedSetpoint), -1);
  rb_define_method(SwigClassUserModel.klass, "elecPowerAppliancesOccupied", VALUEFUNC(_wrap_UserModel_elecPowerAppliancesOccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "elecPowerAppliancesUnoccupied", VALUEFUNC(_wrap_UserModel_elecPowerAppliancesUnoccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "gasPowerAppliancedOccupied", VALUEFUNC(_wrap_UserModel_gasPowerAppliancedOccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "gasPowerAppliancedUnoccupied", VALUEFUNC(_wrap_UserModel_gasPowerAppliancedUnoccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "lightingpowerIntensityOccupied", VALUEFUNC(_wrap_UserModel_lightingpowerIntensityOccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "lightingpowerIntensityUnoccupied", VALUEFUNC(_wrap_UserModel_lightingpowerIntensityUnoccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "exteriorLightingPower", VALUEFUNC(_wrap_UserModel_exteriorLightingPower), -1);
  rb_define_method(SwigClassUserModel.klass, "daylightSensorSystem", VALUEFUNC(_wrap_UserModel_daylightSensorSystem), -1);
  rb_define_method(SwigClassUserModel.klass, "lightingOccupancySensorSystem", VALUEFUNC(_wrap_UserModel_lightingOccupancySensorSystem), -1);
  rb_define_method(SwigClassUserModel.klass, "constantIlluminationControl", VALUEFUNC(_wrap_UserModel_constantIlluminationControl), -1);
  rb_define_method(SwigClassUserModel.klass, "coolingSystemCOP", VALUEFUNC(_wrap_UserModel_coolingSystemCOP), -1);
  rb_define_method(SwigClassUserModel.klass, "coolingSystemIPLV", VALUEFUNC(_wrap_UserModel_coolingSystemIPLV), -1);
  rb_define_method(SwigClassUserModel.klass, "heatingEnergyCarrier", VALUEFUNC(_wrap_UserModel_heatingEnergyCarrier), -1);
  rb_define_method(SwigClassUserModel.klass, "heatingSystemEfficiency", VALUEFUNC(_wrap_UserModel_heatingSystemEfficiency), -1);
  rb_define_method(SwigClassUserModel.klass, "ventilationType", VALUEFUNC(_wrap_UserModel_ventilationType), -1);
  rb_define_method(SwigClassUserModel.klass, "freshAirFlowRate", VALUEFUNC(_wrap_UserModel_freshAirFlowRate), -1);
  rb_define_method(SwigClassUserModel.klass, "supplyExhaustRate", VALUEFUNC(_wrap_UserModel_supplyExhaustRate), -1);
  rb_define_method(SwigClassUserModel.klass, "heatRecovery", VALUEFUNC(_wrap_UserModel_heatRecovery), -1);
  rb_define_method(SwigClassUserModel.klass, "exhaustAirRecirculation", VALUEFUNC(_wrap_UserModel_exhaustAirRecirculation), -1);
  rb_define_method(SwigClassUserModel.klass, "buildingAirLeakage", VALUEFUNC(_wrap_UserModel_buildingAirLeakage), -1);
  rb_define_method(SwigClassUserModel.klass, "dhwDemand", VALUEFUNC(_wrap_UserModel_dhwDemand), -1);
  rb_define_method(SwigClassUserModel.klass, "dhwEfficiency", VALUEFUNC(_wrap_UserModel_dhwEfficiency), -1);
  rb_define_method(SwigClassUserModel.klass, "dhwDistributionSystem", VALUEFUNC(_wrap_UserModel_dhwDistributionSystem), -1);
  rb_define_method(SwigClassUserModel.klass, "dhwEnergyCarrier", VALUEFUNC(_wrap_UserModel_dhwEnergyCarrier), -1);
  rb_define_method(SwigClassUserModel.klass, "bemType", VALUEFUNC(_wrap_UserModel_bemType), -1);
  rb_define_method(SwigClassUserModel.klass, "interiorHeatCapacity", VALUEFUNC(_wrap_UserModel_interiorHeatCapacity), -1);
  rb_define_method(SwigClassUserModel.klass, "specificFanPower", VALUEFUNC(_wrap_UserModel_specificFanPower), -1);
  rb_define_method(SwigClassUserModel.klass, "fanFlowControlFactor", VALUEFUNC(_wrap_UserModel_fanFlowControlFactor), -1);
  rb_define_method(SwigClassUserModel.klass, "windowUValue", VALUEFUNC(_wrap_UserModel_windowUValue), -1);
  rb_define_method(SwigClassUserModel.klass, "windowSolarAbsorbtion", VALUEFUNC(_wrap_UserModel_windowSolarAbsorbtion), -1);
  rb_define_method(SwigClassUserModel.klass, "windowThermalEmissivity", VALUEFUNC(_wrap_UserModel_windowThermalEmissivity), -1);
  rb_define_method(SwigClassUserModel.klass, "windowSHGC", VALUEFUNC(_wrap_UserModel_windowSHGC), -1);
  rb_define_method(SwigClassUserModel.klass, "windowSCF", VALUEFUNC(_wrap_UserModel_windowSCF), -1);
  rb_define_method(SwigClassUserModel.klass, "windowSD", VALUEFUNC(_wrap_UserModel_windowSD), -1);
  rb_define_method(SwigClassUserModel.klass, "wallUValue", VALUEFUNC(_wrap_UserModel_wallUValue), -1);
  rb_define_method(SwigClassUserModel.klass, "wallSolarAbsorbtion", VALUEFUNC(_wrap_UserModel_wallSolarAbsorbtion), -1);
  rb_define_method(SwigClassUserModel.klass, "wallThermalEmissivity", VALUEFUNC(_wrap_UserModel_wallThermalEmissivity), -1);
  rb_define_method(SwigClassUserModel.klass, "roofUValue", VALUEFUNC(_wrap_UserModel_roofUValue), -1);
  rb_define_method(SwigClassUserModel.klass, "roofSHGC", VALUEFUNC(_wrap_UserModel_roofSHGC), -1);
  rb_define_method(SwigClassUserModel.klass, "wallAreaS", VALUEFUNC(_wrap_UserModel_wallAreaS), -1);
  rb_define_method(SwigClassUserModel.klass, "wallAreaSE", VALUEFUNC(_wrap_UserModel_wallAreaSE), -1);
  rb_define_method(SwigClassUserModel.klass, "wallAreaE", VALUEFUNC(_wrap_UserModel_wallAreaE), -1);
  rb_define_method(SwigClassUserModel.klass, "wallAreaNE", VALUEFUNC(_wrap_UserModel_wallAreaNE), -1);
  rb_define_method(SwigClassUserModel.klass, "wallAreaN", VALUEFUNC(_wrap_UserModel_wallAreaN), -1);
  rb_define_method(SwigClassUserModel.klass, "wallAreaNW", VALUEFUNC(_wrap_UserModel_wallAreaNW), -1);
  rb_define_method(SwigClassUserModel.klass, "wallAreaW", VALUEFUNC(_wrap_UserModel_wallAreaW), -1);
  rb_define_method(SwigClassUserModel.klass, "wallAreaSW", VALUEFUNC(_wrap_UserModel_wallAreaSW), -1);
  rb_define_method(SwigClassUserModel.klass, "roofArea", VALUEFUNC(_wrap_UserModel_roofArea), -1);
  rb_define_method(SwigClassUserModel.klass, "windowAreaS", VALUEFUNC(_wrap_UserModel_windowAreaS), -1);
  rb_define_method(SwigClassUserModel.klass, "windowAreaSE", VALUEFUNC(_wrap_UserModel_windowAreaSE), -1);
  rb_define_method(SwigClassUserModel.klass, "windowAreaE", VALUEFUNC(_wrap_UserModel_windowAreaE), -1);
  rb_define_method(SwigClassUserModel.klass, "windowAreaNE", VALUEFUNC(_wrap_UserModel_windowAreaNE), -1);
  rb_define_method(SwigClassUserModel.klass, "windowAreaN", VALUEFUNC(_wrap_UserModel_windowAreaN), -1);
  rb_define_method(SwigClassUserModel.klass, "windowAreaNW", VALUEFUNC(_wrap_UserModel_windowAreaNW), -1);
  rb_define_method(SwigClassUserModel.klass, "windowAreaW", VALUEFUNC(_wrap_UserModel_windowAreaW), -1);
  rb_define_method(SwigClassUserModel.klass, "windowAreaSW", VALUEFUNC(_wrap_UserModel_windowAreaSW), -1);
  rb_define_method(SwigClassUserModel.klass, "skylightArea", VALUEFUNC(_wrap_UserModel_skylightArea), -1);
  rb_define_method(SwigClassUserModel.klass, "exteriorHeatCapacity", VALUEFUNC(_wrap_UserModel_exteriorHeatCapacity), -1);
  rb_define_method(SwigClassUserModel.klass, "infiltration", VALUEFUNC(_wrap_UserModel_infiltration), -1);
  rb_define_method(SwigClassUserModel.klass, "hvacWasteFactor", VALUEFUNC(_wrap_UserModel_hvacWasteFactor), -1);
  rb_define_method(SwigClassUserModel.klass, "hvacHeatingLossFactor", VALUEFUNC(_wrap_UserModel_hvacHeatingLossFactor), -1);
  rb_define_method(SwigClassUserModel.klass, "hvacCoolingLossFactor", VALUEFUNC(_wrap_UserModel_hvacCoolingLossFactor), -1);
  rb_define_method(SwigClassUserModel.klass, "dhwDistributionEfficiency", VALUEFUNC(_wrap_UserModel_dhwDistributionEfficiency), -1);
  rb_define_method(SwigClassUserModel.klass, "heatingPumpControl", VALUEFUNC(_wrap_UserModel_heatingPumpControl), -1);
  rb_define_method(SwigClassUserModel.klass, "coolingPumpControl", VALUEFUNC(_wrap_UserModel_coolingPumpControl), -1);
  rb_define_method(SwigClassUserModel.klass, "heatGainPerPerson", VALUEFUNC(_wrap_UserModel_heatGainPerPerson), -1);
  rb_define_method(SwigClassUserModel.klass, "setTerrainClass", VALUEFUNC(_wrap_UserModel_setTerrainClass), -1);
  rb_define_method(SwigClassUserModel.klass, "setStories", VALUEFUNC(_wrap_UserModel_setStories), -1);
  rb_define_method(SwigClassUserModel.klass, "setFloorArea", VALUEFUNC(_wrap_UserModel_setFloorArea), -1);
  rb_define_method(SwigClassUserModel.klass, "setFloorToFloorHeight", VALUEFUNC(_wrap_UserModel_setFloorToFloorHeight), -1);
  rb_define_method(SwigClassUserModel.klass, "setBuildingOccupancyFrom", VALUEFUNC(_wrap_UserModel_setBuildingOccupancyFrom), -1);
  rb_define_method(SwigClassUserModel.klass, "setBuildingOccupancyTo", VALUEFUNC(_wrap_UserModel_setBuildingOccupancyTo), -1);
  rb_define_method(SwigClassUserModel.klass, "setEquivFullLoadOccupancyFrom", VALUEFUNC(_wrap_UserModel_setEquivFullLoadOccupancyFrom), -1);
  rb_define_method(SwigClassUserModel.klass, "setQeuivFullLoadOccupancyTo", VALUEFUNC(_wrap_UserModel_setQeuivFullLoadOccupancyTo), -1);
  rb_define_method(SwigClassUserModel.klass, "setPeopleDensityOccupied", VALUEFUNC(_wrap_UserModel_setPeopleDensityOccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "setPeopleDensityUnoccupied", VALUEFUNC(_wrap_UserModel_setPeopleDensityUnoccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "setHeatingOccupiedSetpoint", VALUEFUNC(_wrap_UserModel_setHeatingOccupiedSetpoint), -1);
  rb_define_method(SwigClassUserModel.klass, "setHeatingUnoccupiedSetpoint", VALUEFUNC(_wrap_UserModel_setHeatingUnoccupiedSetpoint), -1);
  rb_define_method(SwigClassUserModel.klass, "setCoolingOccupiedSetpoint", VALUEFUNC(_wrap_UserModel_setCoolingOccupiedSetpoint), -1);
  rb_define_method(SwigClassUserModel.klass, "setCoolingUnoccupiedSetpoint", VALUEFUNC(_wrap_UserModel_setCoolingUnoccupiedSetpoint), -1);
  rb_define_method(SwigClassUserModel.klass, "setElecPowerAppliancesOccupied", VALUEFUNC(_wrap_UserModel_setElecPowerAppliancesOccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "setElecPowerAppliancesUnoccupied", VALUEFUNC(_wrap_UserModel_setElecPowerAppliancesUnoccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "setGasPowerAppliancedOccupied", VALUEFUNC(_wrap_UserModel_setGasPowerAppliancedOccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "setGasPowerAppliancedUnoccupied", VALUEFUNC(_wrap_UserModel_setGasPowerAppliancedUnoccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "setLightingpowerIntensityOccupied", VALUEFUNC(_wrap_UserModel_setLightingpowerIntensityOccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "setLightingpowerIntensityUnoccupied", VALUEFUNC(_wrap_UserModel_setLightingpowerIntensityUnoccupied), -1);
  rb_define_method(SwigClassUserModel.klass, "setExteriorLightingPower", VALUEFUNC(_wrap_UserModel_setExteriorLightingPower), -1);
  rb_define_method(SwigClassUserModel.klass, "setDaylightSensorSystem", VALUEFUNC(_wrap_UserModel_setDaylightSensorSystem), -1);
  rb_define_method(SwigClassUserModel.klass, "setLightingOccupancySensorSystem", VALUEFUNC(_wrap_UserModel_setLightingOccupancySensorSystem), -1);
  rb_define_method(SwigClassUserModel.klass, "setConstantIlluminationControl", VALUEFUNC(_wrap_UserModel_setConstantIlluminationControl), -1);
  rb_define_method(SwigClassUserModel.klass, "setCoolingSystemCOP", VALUEFUNC(_wrap_UserModel_setCoolingSystemCOP), -1);
  rb_define_method(SwigClassUserModel.klass, "setCoolingSystemIPLV", VALUEFUNC(_wrap_UserModel_setCoolingSystemIPLV), -1);
  rb_define_method(SwigClassUserModel.klass, "setHeatingEnergyCarrier", VALUEFUNC(_wrap_UserModel_setHeatingEnergyCarrier), -1);
  rb_define_method(SwigClassUserModel.klass, "setHeatingSystemEfficiency", VALUEFUNC(_wrap_UserModel_setHeatingSystemEfficiency), -1);
  rb_define_method(SwigClassUserModel.klass, "setVentilationType", VALUEFUNC(_wrap_UserModel_setVentilationType), -1);
  rb_define_method(SwigClassUserModel.klass, "setFreshAirFlowRate", VALUEFUNC(_wrap_UserModel_setFreshAirFlowRate), -1);
  rb_define_method(SwigClassUserModel.klass, "setSupplyExhaustRate", VALUEFUNC(_wrap_UserModel_setSupplyExhaustRate), -1);
  rb_define_method(SwigClassUserModel.klass, "setHeatRecovery", VALUEFUNC(_wrap_UserModel_setHeatRecovery), -1);
  rb_define_method(SwigClassUserModel.klass, "setExhaustAirRecirculation", VALUEFUNC(_wrap_UserModel_setExhaustAirRecirculation), -1);
  rb_define_method(SwigClassUserModel.klass, "setBuildingAirLeakage", VALUEFUNC(_wrap_UserModel_setBuildingAirLeakage), -1);
  rb_define_method(SwigClassUserModel.klass, "setDhwDemand", VALUEFUNC(_wrap_UserModel_setDhwDemand), -1);
  rb_define_method(SwigClassUserModel.klass, "setDhwEfficiency", VALUEFUNC(_wrap_UserModel_setDhwEfficiency), -1);
  rb_define_method(SwigClassUserModel.klass, "setDhwDistributionSystem", VALUEFUNC(_wrap_UserModel_setDhwDistributionSystem), -1);
  rb_define_method(SwigClassUserModel.klass, "setDhwEnergyCarrier", VALUEFUNC(_wrap_UserModel_setDhwEnergyCarrier), -1);
  rb_define_method(SwigClassUserModel.klass, "setBemType", VALUEFUNC(_wrap_UserModel_setBemType), -1);
  rb_define_method(SwigClassUserModel.klass, "setInteriorHeatCapacity", VALUEFUNC(_wrap_UserModel_setInteriorHeatCapacity), -1);
  rb_define_method(SwigClassUserModel.klass, "setSpecificFanPower", VALUEFUNC(_wrap_UserModel_setSpecificFanPower), -1);
  rb_define_method(SwigClassUserModel.klass, "setFanFlowControlFactor", VALUEFUNC(_wrap_UserModel_setFanFlowControlFactor), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowUValue", VALUEFUNC(_wrap_UserModel_setWindowUValue), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowSolarAbsorbtion", VALUEFUNC(_wrap_UserModel_setWindowSolarAbsorbtion), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowThermalEmissivity", VALUEFUNC(_wrap_UserModel_setWindowThermalEmissivity), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowSHGC", VALUEFUNC(_wrap_UserModel_setWindowSHGC), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowSCF", VALUEFUNC(_wrap_UserModel_setWindowSCF), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowSD", VALUEFUNC(_wrap_UserModel_setWindowSD), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallUValue", VALUEFUNC(_wrap_UserModel_setWallUValue), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallSolarAbsorbtion", VALUEFUNC(_wrap_UserModel_setWallSolarAbsorbtion), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallThermalEmissivity", VALUEFUNC(_wrap_UserModel_setWallThermalEmissivity), -1);
  rb_define_method(SwigClassUserModel.klass, "setRoofUValue", VALUEFUNC(_wrap_UserModel_setRoofUValue), -1);
  rb_define_method(SwigClassUserModel.klass, "setRoofSHGC", VALUEFUNC(_wrap_UserModel_setRoofSHGC), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallAreaS", VALUEFUNC(_wrap_UserModel_setWallAreaS), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallAreaSE", VALUEFUNC(_wrap_UserModel_setWallAreaSE), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallAreaE", VALUEFUNC(_wrap_UserModel_setWallAreaE), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallAreaNE", VALUEFUNC(_wrap_UserModel_setWallAreaNE), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallAreaN", VALUEFUNC(_wrap_UserModel_setWallAreaN), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallAreaNW", VALUEFUNC(_wrap_UserModel_setWallAreaNW), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallAreaW", VALUEFUNC(_wrap_UserModel_setWallAreaW), -1);
  rb_define_method(SwigClassUserModel.klass, "setWallAreaSW", VALUEFUNC(_wrap_UserModel_setWallAreaSW), -1);
  rb_define_method(SwigClassUserModel.klass, "setRoofArea", VALUEFUNC(_wrap_UserModel_setRoofArea), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowAreaS", VALUEFUNC(_wrap_UserModel_setWindowAreaS), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowAreaSE", VALUEFUNC(_wrap_UserModel_setWindowAreaSE), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowAreaE", VALUEFUNC(_wrap_UserModel_setWindowAreaE), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowAreaNE", VALUEFUNC(_wrap_UserModel_setWindowAreaNE), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowAreaN", VALUEFUNC(_wrap_UserModel_setWindowAreaN), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowAreaNW", VALUEFUNC(_wrap_UserModel_setWindowAreaNW), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowAreaW", VALUEFUNC(_wrap_UserModel_setWindowAreaW), -1);
  rb_define_method(SwigClassUserModel.klass, "setWindowAreaSW", VALUEFUNC(_wrap_UserModel_setWindowAreaSW), -1);
  rb_define_method(SwigClassUserModel.klass, "setSkylightArea", VALUEFUNC(_wrap_UserModel_setSkylightArea), -1);
  rb_define_method(SwigClassUserModel.klass, "setExteriorHeatCapacity", VALUEFUNC(_wrap_UserModel_setExteriorHeatCapacity), -1);
  rb_define_method(SwigClassUserModel.klass, "setInfiltration", VALUEFUNC(_wrap_UserModel_setInfiltration), -1);
  rb_define_method(SwigClassUserModel.klass, "setHvacWasteFactor", VALUEFUNC(_wrap_UserModel_setHvacWasteFactor), -1);
  rb_define_method(SwigClassUserModel.klass, "setHvacHeatingLossFactor", VALUEFUNC(_wrap_UserModel_setHvacHeatingLossFactor), -1);
  rb_define_method(SwigClassUserModel.klass, "setHvacCoolingLossFactor", VALUEFUNC(_wrap_UserModel_setHvacCoolingLossFactor), -1);
  rb_define_method(SwigClassUserModel.klass, "setDhwDistributionEfficiency", VALUEFUNC(_wrap_UserModel_setDhwDistributionEfficiency), -1);
  rb_define_method(SwigClassUserModel.klass, "setHeatingPumpControl", VALUEFUNC(_wrap_UserModel_setHeatingPumpControl), -1);
  rb_define_method(SwigClassUserModel.klass, "setCoolingPumpControl", VALUEFUNC(_wrap_UserModel_setCoolingPumpControl), -1);
  rb_define_method(SwigClassUserModel.klass, "setHeatGainPerPerson", VALUEFUNC(_wrap_UserModel_setHeatGainPerPerson), -1);
  SwigClassUserModel.mark = 0;
  SwigClassUserModel.destroy = (void (*)(void *)) free_openstudio_isomodel_UserModel;
  SwigClassUserModel.trackObjects = 0;
  
  SwigClassISOModelForwardTranslator.klass = rb_define_class_under(mISOModel, "ISOModelForwardTranslator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_openstudio__isomodel__ForwardTranslator, (void *) &SwigClassISOModelForwardTranslator);
  rb_define_alloc_func(SwigClassISOModelForwardTranslator.klass, _wrap_ISOModelForwardTranslator_allocate);
  rb_define_method(SwigClassISOModelForwardTranslator.klass, "initialize", VALUEFUNC(_wrap_new_ISOModelForwardTranslator), -1);
  rb_define_method(SwigClassISOModelForwardTranslator.klass, "translateModel", VALUEFUNC(_wrap_ISOModelForwardTranslator_translateModel), -1);
  rb_define_method(SwigClassISOModelForwardTranslator.klass, "warnings", VALUEFUNC(_wrap_ISOModelForwardTranslator_warnings), -1);
  rb_define_method(SwigClassISOModelForwardTranslator.klass, "errors", VALUEFUNC(_wrap_ISOModelForwardTranslator_errors), -1);
  SwigClassISOModelForwardTranslator.mark = 0;
  SwigClassISOModelForwardTranslator.destroy = (void (*)(void *)) free_openstudio_isomodel_ForwardTranslator;
  SwigClassISOModelForwardTranslator.trackObjects = 0;
}

