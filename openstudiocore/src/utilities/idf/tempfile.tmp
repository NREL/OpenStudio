/***********************************************************************************************************************
 *  OpenStudio(R), Copyright (c) 2008-2018, Alliance for Sustainable Energy, LLC. All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *  following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote
 *  products derived from this software without specific prior written permission from the respective party.
 *
 *  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative
 *  works may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without
 *  specific prior written permission from Alliance for Sustainable Energy, LLC.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR
 *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **********************************************************************************************************************/

#ifndef UTILITIES_IDF_WORKSPACE_HPP
#define UTILITIES_IDF_WORKSPACE_HPP

#include <utilities/UtilitiesAPI.hpp>
#include <utilities/idf/IdfObject.hpp>
#include <utilities/idf/Validity.hpp>
#include <utilities/core/Logger.hpp>

#include <boost/smart_ptr.hpp>

#include <string>
#include <iostream>
#include <vector>
#include <set>
#include <map>

namespace openstudio {

  // forward declarations
  class IddFile;
  class IdfFile;
  class WorkspaceObject;
  class WorkspaceObjectOrder;
  class ProgressBar;

  namespace detail{
    class Workspace_Impl;
    class WorkspaceObject_Impl;
  }

  /** Workspace holds a collection of interconnected \link WorkspaceObject WorkspaceObjectss\endlink.
   *  Workspace is shared so that changes to a copy of a Workspace changes the original as well.
   *
   *  Workspace contains the following types of \link WorkspaceObject WorkspaceObjects\endlink:
   *    - unique objects, indexed by type, should be present 0-1 times
   *    - objects with no associated referenced groups, indexed by type, present 0-inf times
   *    - objects with one or more associated referenced groups, indexed by type, name, and
   *      reference group name, present 0-inf times 
   *
   *  Although Workspace and IdfFile share many important characteristics, there is no direct
   *  inheritance relationship between the two since their implementations are fundamentally 
   *  different. */
  class UTILITIES_API Workspace
  {
  public:

    /** @name Constructors */
    //@{

    /** Default constructor. User can specify IddFileType and Strictness level to use. Does not add 
     *  any \link WorkspaceObject WorkspaceObjects\endlink. If Strictness level is set to Final, 
     *  Workspace can be invalid post-construction. */
    //DLM@20101010: should we keep strictness or remove it?
    Workspace(enums::Strictness level=enums::Strictness::None,
              IddFileType iddFileType=IddFileType::OpenStudio);

    /** Construct from an IdfFile. The new Workspace inherits idfFile's IddFile. Each IdfObject in 
     *  idfFile is used to construct a WorkspaceObject that is held by the new Workspace, and is 
     *  equivalent to, but completely separate from, the IdfObject. (All object data is cloned.)
     *
     *  If the Workspace so constructed is not valid at the specified Strictness level, all of the
     *  newly created objects are removed, and the constructor returns an empty Workspace with 
     *  Strictness level None. Problems may be diagnosed by calling idfFile.validityReport(level). */
    Workspace(const IdfFile& idfFile, 
              enums::Strictness level=enums::Strictness::None);

    /** Copy constructor, shares data with other Workspace. */
    Workspace(const Workspace& other);

    /** Makes a new Workspace with totally unconnected objects. */
    Workspace clone(bool keepHandles=false) const;

    /** Makes a new Workspace that just includes the specified handles. If the result does not meet
     *  the strictness level, returns an empty workspace. */
    //DLM@20101010: makes sense except for strictness
    Workspace cloneSubset(const std::vector<Handle>& handles, bool keepHandles=false, enums::Strictness level=enums::Strictness::None) const;

    virtual ~Workspace() {}

    //@}
    /** @name Getters */
    //@{

    /// Get the strictness level this Workspace is currently operating under.
    enums::Strictness strictness() const;

    /// Get iddFile of this Workspace.
    IddFile iddFile() const;

    /** Get the IddFile's IddFileType. */
    IddFileType iddFileType() const;

    /** Get object name from handle. */
    //DLM@20101010: remove
    OptionalString name(const Handle& handle) const;

    /// get object from its handle
    boost::optional<WorkspaceObject> getObject(Handle handle) const;

    /** Looks for an equivalent object in the workspace, as determined by == and special handling
     *  of pointersIntoWorkspace. */
    //DLM@20101010: is this tested? 
    boost::optional<WorkspaceObject> findObject(const IdfObject& idfObject) const;

    /** Get all idf objects. The returned objects' data is shared with the workspace, and some
     *  fields may be locked. If sorted, then the objects are returned in the preferred order. */
    std::vector<WorkspaceObject> objects(bool sorted=false) const;

    /** Get all handles. If sorted, then the handles are returned in the preferred order. */
    std::vector<Handle> handles(bool sorted=false) const;

    /** Get the indicated objects. If sorted, then the objects are returned in the preferred
     *  order. */
    //DLM@20101010: should be getObjects, do we even need this?
    std::vector<WorkspaceObject> objects(const std::vector<Handle>& handles, bool sorted=false) const;

    /** Get the indicated objects' handles. */
    //DLM@20101010: should be getHandles, do we even need this?
    std::vector<Handle> handles(const std::vector<WorkspaceObject>& objects, bool sorted=false) const;

    /// get all idf objects that have a name
    //DLM@20101010: remove
    std::vector<WorkspaceObject> namedObjects(bool sorted=false) const;

    /// get all idf objects that are in a reference list
    //DLM@20101010: which reference list?  only useful if pass in reference list, otherwise remove or make private
    std::vector<WorkspaceObject> objectsInReferenceList(bool sorted=false) const;

    /** get handles of idf objects that can be targets--that is, they have names and are in a
     *  reference list */
    //DLM@20101010: remove or make private
    std::vector<WorkspaceObject> potentialTargets (bool sorted=false) const;

    /// get all idf objects that are pointed to by other objects
    //DLM@20101010: remove or make private
    std::vector<WorkspaceObject> targetObjects(bool sorted=false) const;

    /// get all idf objects that point to other objects
    //DLM@20101010: remove or make private
    std::vector<WorkspaceObject> sourceObjects(bool sorted=false) const;

    /// get all idf objects that should be able to point to other objects
    //DLM@20101010: remove or make private
    std::vector<WorkspaceObject> objectsWithObjectListFields(bool sorted=false) const;

    /// get all idf objects by name (e.g. "Zone1")
    std::vector<WorkspaceObject> objectsByName(const std::string& name, bool sorted=false) const;

    /// get all idf objects by type (e.g. Zone)
    std::vector<WorkspaceObject> objectsByType(IddObjectType objectType, bool sorted=false) const;

    /// get first idf object by type (e.g. Zone) and name (e.g. "Zone1")
    boost::optional<WorkspaceObject> objectByTypeAndName(IddObjectType objectType, 
                                                         const std::string& name, 
                                                         bool sorted=false) const;

    /// get all idf objects by reference name (e.g. ZoneNames)
    std::vector<WorkspaceObject> objectsByReferenceName(const std::string& referenceName, 
                                                        bool sorted=false) const;

    /** Get an object by name and reference. Returns first object that matches. Does not look for
     *  conflicts. */
    boost::optional<WorkspaceObject> objectByNameAndReference(
                                                              const std::string& name,
                                                              const std::vector<std::string>& referenceNames) const;

    /** Get all objects in reference lists that recursively overlap with IddObjectType type's 
     *  reference lists. In particular, if IddObjects of type have reference lists associated 
     *  with their name field, then all objects of type will be returned. In addition, objects 
     *  of any other IddObjectType whose reference lists memberships have a non-empty intersection
     *  with type's will be returned, and the operation is continued recursively until no new 
     *  objects are found. */
    std::vector<WorkspaceObject> objectsWithOverlappingReference(const IddObjectType& type) const;

    //@}
    /** @name Setters */
    //@{

    /** Set the strictness level. If moving to a more strict environment, may return false
     *  to indicate that the collection does not satisfy those requirements. */
    bool setStrictness(enums::Strictness level);

    /** Set iddFile to correspond to iddFileType, which is a sub-file of the full file available
     *  through IddFactory. */
    //DLM@20101010: i think we use this but don't like it, what happens if set gets smaller and objects kicked out?
    bool setIddFile(IddFileType iddFileType);

    /** Add object to Workspace. Optionally, pointers between workspace objects and this new
     *  object can be pre-defined. This may be necessary if the strictness level is at Final. */
    //DLM@20101010: clean up difference between add and insert
    boost::optional<WorkspaceObject> addObject(const IdfObject& idfObject);

    /** Looks for an equivalent object in the workspace, as determined by a combination of == and
     *  special handling for pointersIntoWorkspace. If found, returns that handle. Otherwise, 
     *  calls addObject. */
    //DLM@20101010: clean up difference between add and insert
    boost::optional<WorkspaceObject> insert(const IdfObject& idfObject);   

    /** Add objects to Workspace, if possible. Use this function to add multiple objects at once
     *  since the workspace is more likely to be valid after the entire group is added, rather than
     *  after each individual object. */
    //DLM@20101010: clean up difference between add and insert
    std::vector <WorkspaceObject> addObjects(const IdfObjectVector& idfObjects);

    /** Insert idfFile objects into this workspace. Clones objects. Avoids duplicating objects 
     *  already in this workspace when possible. */
    //DLM@20101010: clean up difference between add and insert
    std::vector<WorkspaceObject> insert(const IdfObjectVector& idfObjects);

    /** Add objects to workspace, if possible. Use this function to add multiple objects at once
     *  since the workspace is more likely to be valid after the entire group is added, rather than
     *  after each individual object. */
    //DLM@20101010: clean up difference between add and insert
    std::vector<WorkspaceObject> addObjects(const IdfFile& idfFile);

    /** Insert idfFile objects into this workspace. Clones objects. Avoids duplicating objects 
     *  already in this workspace when possible. */
    //DLM@20101010: clean up difference between add and insert
    std::vector<WorkspaceObject> insert(const IdfFile& idfFile);

    /** Add objects to workspace, if possible. Use this function to add multiple objects at once
     *  since the workspace is more likely to be valid after the entire group is added, rather than
     *  after each individual object. */
    //DLM@20101010: remove
    std::vector<WorkspaceObject> addObjects(const Workspace& other);

    /** Insert objects in other workspace into this one. Creates object clones so there is no
     *  coordination of relationships going forward. Avoids duplicating objects already in this
     *  workspace when possible. */
    //DLM@20101010: remove
    std::vector<WorkspaceObject> insert(const Workspace& other);

    /** Swap currentObject and newObject. To proceed, the objects must be compatible, that is, 
     *  all source fields pointing to currentObject must be reset-able to newObject, and 
     *  (if keepTargets), newObject must be able to point to the same target objects as 
     *  currentObject. If successful, the return value is true, and the data in currentObject and 
     *  newObject will have been swapped. Otherwise, the return value evaluates to false. */
    bool swap(WorkspaceObject& currentObject, IdfObject& newObject, bool keepTargets = true);

    /** Remove object from Workspace with the expectation that it will be destructed. */
    bool removeObject(const WorkspaceObject& object);

    /** Remove object from Workspace with the expectation that it will be destructed. */
    bool removeObject(const Handle& handle);

    /** Remove objects from Workspace with the expectation that they will be destructed. */
    bool removeObjects(const std::vector<WorkspaceObject>& objects);

    /** Remove objects from Workspace with the expectation that they will be destructed. */
    bool removeObjects(const std::vector<Handle>& handles);

    //@}
    /** @name Object Order */
    //@{

    /** Access the WorkspaceOrderObject used by the workspace to provide arbitrary order of objects. */
    //DLM@20101010: why is orderer a state variable, could just be passed in to sort
    WorkspaceObjectOrder order();

    const WorkspaceObjectOrder order() const;

    /** Sort the objects. */
    std::vector<WorkspaceObject> sort(const std::vector<WorkspaceObject>& objects) const;

    /** Sort the handles. */
    std::vector<Handle> sort(const std::vector<Handle>& handles) const;

    //@}
    /** @name Queries */
    //@{

    /** Return the total number of objects in the workspace. */
    unsigned numObjects() const; 

    /** Return the number of objects of IddObjectType type in the workspace. */
    unsigned numObjectsOfType(IddObjectType type) const;

    /** True if handle corresponds to an object in this workspace. */
    bool isHandle(const Handle& handle) const;

    /** True if handle is in a reference list. Not an exhaustive search--uses Idd.  */
    bool isReference(const Handle& handle) const;

    /** Returns true if handle corresponds to an object in the indicated reference list. */
    bool isReference(const Handle& handle,const std::string& referenceListName) const;

    /** Returns true if handle corresponds to an object in any of the indicated reference lists. */
    bool isReference(const Handle& handle, const StringSet& referenceListNames) const;

    /** True if an \\object-list field referencing the given names can point to this object. */
    bool canBeTarget(const Handle& handle, const StringSet& referenceListNames) const;

    /** Returns true if the iddObject of handle's object is in this Workspace's IddFile. */
    //DLM@20101010: how is this false, remove
    bool objectIddIsInFile(const Handle& handle) const;

    /** Returns true if object's iddObject is in this Workspace's IddFile. */
    //DLM@20101010: how is this false, remove
    bool objectIddIsInFile(const WorkspaceObject& object) const;

    /** Returns all objects whose iddObjects are not in this Workspace's IddFile. */
    //DLM@20101010: remove
    std::vector<WorkspaceObject> objectsWithIddNotInFile(bool sorted) const;

    /** Finds and reports all name conflicts. For a given WorkspaceObject, the name should be 
     *  case-insensitive unique as compared to all other objects with a possible reference list 
     *  overlap, as determined by Workspace::objectsWithOverlappingReference. If any name conflicts
     *  are found, the objects participating in each individual conflict are returned in their own 
     *  vector. */
    //DLM@20101010: this seems to be most useful at WorkspaceObject level, not entire Workspace
    std::vector< std::vector<WorkspaceObject> > nameConflicts() const;

    /** Finds and reports name conflicts occuring between objectsWithOverlappingReference(type). 
     *  All such objects' names should be case-insensitive unique. If any name conflicts
     *  are found, the objects participating in each individual conflict are returned in their own 
     *  vector. */
    //DLM@20101010: this seems to be most useful at WorkspaceObject level, not entire Workspace
    std::vector< std::vector<WorkspaceObject> > nameConflicts(const IddObjectType& type) const;

    /** If the workspace is enums::MissingObject, this function will return the offending
     *  IddObjectType(s). */
    //DLM@20101010: how/where would you use this?
    std::vector<IddObjectType> missingObjectTypes(bool fullReport=true) const;

    /** If the workspace has a enums::DuplicateObject (multiple instances of a unique IddObject), this
     *  function will return the offending IddObjectType(s). */
    //DLM@20101010: how/where would you use this?
    std::vector<IddObjectType> duplicateObjectTypes(bool fullReport=true) const;

    /** See enums::InvalidWorkspace for what is checked at what strictness level. */
    //DLM@20101010: this seems to be most useful at WorkspaceObject level, not entire Workspace
    InvalidWorkspace::object_vector invalidObjects(enums::Strictness level,
                                                   bool fullReport=true) const;

    /** Report (full or first reason) of why the IdfFile is invalid at the given level.
     *  See the documentation for IdfFileInvalidityReport. */
    boost::optional<InvalidWorkspace> validityReport(enums::Strictness level,bool fullReport=true) const;

    bool isValid() const;

    bool isValid(enums::Strictness level) const;

    bool operator==(const Workspace& other) const;

    //@}
    /** @name Serialization */
    //@{

    /** Creates an IdfFile from the collection. Utilizes clonedTextObject, and therefore names
     *  objects if necessary.
     *
     *  To print out IDF text, use this method, then IdfFile.print(ostream). */
    IdfFile toIdfFile() const;

    //@}

    // connect a progress bar
    bool connectProgressBar(const openstudio::ProgressBar& progressBar) const;

    // get the impl
    template<typename T>
      std::shared_ptr<T> getImpl() const
    {  return std::dynamic_pointer_cast<T>(m_impl); }

  protected:

    friend class WorkspaceObject;
    friend class detail::WorkspaceObject_Impl;

    /** Protected constructor from impl. */
    Workspace(std::shared_ptr<detail::Workspace_Impl> impl);

  private:

    // configure logging
    REGISTER_LOGGER("utilities.idf.Workspace");

    // pointer to implementation
    std::shared_ptr<detail::Workspace_Impl> m_impl;

    // convert _ImplPtr to optional object
    boost::optional<WorkspaceObject> objectFromImpl(
                                                    const std::shared_ptr<detail::WorkspaceObject_Impl>& objectImplPtr) const;

    // convert _ImplPtrs to vector
    std::vector<WorkspaceObject> objectsFromImpls(
                                                  const std::vector<std::shared_ptr<detail::WorkspaceObject_Impl> >& objectImplPtrs) const;

    // convert object to _ImplPtr
    std::shared_ptr<detail::WorkspaceObject_Impl> 
      objectImplPtr(const WorkspaceObject& object) const;

    // convert objects to _ImplPtrs
    std::vector<std::shared_ptr<detail::WorkspaceObject_Impl> > 
      objectImplPtrs(const std::vector<WorkspaceObject>& objects) const;

    // link up WorkspaceObjectOrder and Workspace on deserialization
    void linkOrderer();

    /// get all idf objects that are pointed to by other objects, but are not in a reference list.
    /// only possible at level NONE.
    std::vector<WorkspaceObject> targetObjectsNotInReferenceList(bool sorted=false) const;
  };

  typedef boost::optional<Workspace> OptionalWorkspace;

  typedef std::vector<Workspace> WorkspaceVector;

  UTILITIES_API std::ostream& operator<<(std::ostream& os, const Workspace& workspace);

} // openstudio

#endif //UTILITIES_IDF_WORKSPACE_HPP
