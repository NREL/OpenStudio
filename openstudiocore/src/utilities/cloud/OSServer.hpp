/**********************************************************************
* Copyright (c) 2008-2013, Alliance for Sustainable Energy.  
*  All rights reserved.
*  
*  This library is free software; you can redistribute it and/or
*  modify it under the terms of the GNU Lesser General Public
*  License as published by the Free Software Foundation; either
*  version 2.1 of the License, or (at your option) any later version.
*  
*  This library is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*  Lesser General Public License for more details.
*  
*  You should have received a copy of the GNU Lesser General Public
*  License along with this library; if not, write to the Free Software
*  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
**********************************************************************/

#ifndef UTILITIES_CLOUD_OSSERVER_HPP
#define UTILITIES_CLOUD_OSSERVER_HPP

#include <utilities/UtilitiesAPI.hpp>
#include <utilities/core/UUID.hpp>
#include <utilities/core/Path.hpp>
#include <utilities/core/Url.hpp>
#include <utilities/core/Logger.hpp>

#include <string>

namespace openstudio{
  namespace detail{
    class OSServer_Impl;
  }

  /// OSServer is a class for accessing the rails server started on machines provided by a CloudProvider.
  class UTILITIES_API OSServer {
  public:

    /** @name Constructor */
    //@{

    // constructor
    OSServer(const Url& url);

    //@}
    /** @name Destructors */
    //@{

    /// virtual destructor
    virtual ~OSServer();

    //@}
    /** @name Class members */
    //@{

    /// Returns true if the server can be reached
    /// blocking call, clears errors and warnings
    bool available() const;

    /// Get a list of all project UUIDs
    /// blocking call, clears errors and warnings
    std::vector<UUID> projectUUIDs() const; 

    /// Get a list of all analysis UUIDs
    /// blocking call, clears errors and warnings
    std::vector<UUID> analysisUUIDs() const; 

    /// Send an analysis server view JSON file for analsysis, adds the analyis to project
    /// projectUUID can be an existing project or a new one
    /// analysisJSON includes analysis UUID 
    /// blocking call, clears errors and warnings
    bool postAnalysisJSON(const UUID& projectUUID, const std::string& analysisJSON) const;

    /// Send a datapoint server view JSON file for analysis, adds the dataPoint to analysis
    /// analysisUUID must be an existing analysis
    /// dataPointJSON includes data point UUID 
    /// blocking call, clears errors and warnings
    bool postDataPointJSON(const UUID& analysisUUID, const std::string& dataPointJSON) const;

    /// Upload a zip file of all the files needed for analysis
    /// blocking call, clears errors and warnings
    // DLM: is the structure of this defined somewhere? 
    bool uploadAnalysisFiles(const UUID& analysisUUID, const openstudio::path& analysisZipFile);

    /// Send the server a request to start the analysis
    /// blocking call, clears errors and warnings
    bool start(const UUID& analysisUUID) const;

    /// Returns true if the analysis is running
    /// blocking call, clears errors and warnings
    bool isAnalysisRunning(const UUID& analysisUUID) const;

    /// Send the server a request to stop the analysis
    /// blocking call, clears errors and warnings
    bool stop(const UUID& analysisUUID) const;

    /// Get a list of all dataPoint UUIDs in the analysis
    /// blocking call, clears errors and warnings
    std::vector<UUID> dataPointsJSON(const UUID& analysisUUID) const;

    /// Get a list of all running dataPoint UUIDs in the analysis
    /// blocking call, clears errors and warnings
    std::vector<UUID> runningDataPointsJSON(const UUID& analysisUUID) const;

    /// Get a list of all queued dataPoint UUIDs in the analysis
    /// blocking call, clears errors and warnings
    std::vector<UUID> queuedDataPointsJSON(const UUID& analysisUUID) const;

    /// Get a list of all complete dataPoint UUIDs in the analysis
    /// blocking call, clears errors and warnings 
    std::vector<UUID> completeDataPointsJSON(const UUID& analysisUUID) const;

    /// Get a full deserializable JSON of dataPoint
    /// blocking call, clears errors and warnings 
    std::string getDataPointJSON(const UUID& analysisUUID, const UUID& dataPointUUID) const;

    /// Get a detailed results for dataPoint, will be a zip file of the dataPoint directory
    /// blocking call, clears errors and warnings 
    bool downloadDataPoint(const UUID& analysisUUID, const UUID& dataPointUUID, const openstudio::path& downloadPath) const;

    /// returns errors generated by the last operation
    std::vector<std::string> errors() const;
    
    /// returns warnings generated by the last operation
    std::vector<std::string> warnings() const;

    //@}
    /** @name Type Casting */
    //@{

      template<typename T>
        boost::shared_ptr<T> getImpl() const
      {  return boost::dynamic_pointer_cast<T>(m_impl); }

      /// cast to type T, can throw std::bad_cast
      template<typename T>
      T cast() const{
        boost::shared_ptr<typename T::ImplType> impl = this->getImpl<typename T::ImplType>();
        if (!impl){
          throw(std::bad_cast());
        }
        return T(impl);
      }

      /// cast to optional of type T
      template<typename T>
      boost::optional<T> optionalCast() const{
        boost::optional<T> result;
        boost::shared_ptr<typename T::ImplType> impl = this->getImpl<typename T::ImplType>();
        if (impl){
          result = T(impl);
        }
        return result;
      }

    //@}

  protected:

    OSServer(const boost::shared_ptr<detail::OSServer_Impl>& impl);

  private:

    boost::shared_ptr<detail::OSServer_Impl> m_impl;
    
    // configure logging
    REGISTER_LOGGER("utilities.cloud.OSServer");

  };

} // openstudio

#endif // UTILITIES_CLOUD_OSSERVER_HPP
