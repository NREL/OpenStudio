/**********************************************************************
 *  Copyright (c) 2008-2013, Alliance for Sustainable Energy.
 *  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **********************************************************************/

#ifndef ANALYSISDRIVER_CURRENTANALYSIS_IMPL_HPP
#define ANALYSISDRIVER_CURRENTANALYSIS_IMPL_HPP

#include <analysisdriver/AnalysisDriverAPI.hpp>
#include <analysisdriver/AnalysisRunOptions.hpp>
#include <analysisdriver/AnalysisDriver_Impl.hpp>

#include <analysis/Analysis.hpp>
#include <analysis/DataPoint.hpp>

#include <QObject>

#include <boost/shared_ptr.hpp>
#include <boost/enable_shared_from_this.hpp>

namespace openstudio {

namespace runmanager {
  class RunManager;
}

namespace analysisdriver {

class CurrentAnalysis;

namespace detail {

  bool jobUUIDsEqual(const analysis::DataPoint& dataPoint, const openstudio::UUID& job);

  bool dataPointsEqual(const analysis::DataPoint& dataPoint1, const analysis::DataPoint& dataPoint2);

  /** CurrentAnalysis_Impl is the implementation class for CurrentAnalysis.*/
  class ANALYSISDRIVER_API CurrentAnalysis_Impl : public QObject, public boost::enable_shared_from_this<CurrentAnalysis_Impl> {
    Q_OBJECT;
   public:
    /** @name Constructors and Destructors */
    //@{

    CurrentAnalysis_Impl(const analysis::Analysis& analysis,
                         const AnalysisRunOptions& runOptions);

    virtual ~CurrentAnalysis_Impl() {}

    //@}
    /** @name Getters */
    //@{

    analysis::Analysis analysis() const;

    AnalysisRunOptions runOptions() const;

    /** Get a public object that wraps this impl.*/
    CurrentAnalysis currentAnalysis() const;

    //@}
    /** @name Queries */
    //@{

    /** Returns the number of runmanager::Jobs currently being monitored for this analysis by
     *  AnalysisDriver */
    int numQueuedJobs() const;

    int numQueuedOSJobs() const;

    int numQueuedDakotaJobs() const;

    int numCompletedJobsInOSIteration() const;

    int totalNumJobsInOSIteration() const;

    /** Returns the JobErrors generated by the DAKOTA job, if applicable and the DAKOTA job has
     *  finished. */
    boost::optional<runmanager::JobErrors> dakotaJobErrors() const;

    //@}
    /** @name Run Management */
    //@{

    /// Connect signal from this CurrentAnalysis implementation object to slot on qObject.
    bool connect(const std::string& signal,
                 const QObject* qObject,
                 const std::string& slot,
                 Qt::ConnectionType type = Qt::AutoConnection) const;

    //@}
   signals:

    void iterationProgress(int numCompletedJobs,int numJobsInIteration);

   protected:

    /** @name Run Management */
    //@{

    friend class detail::AnalysisDriver_Impl;

    // OS ITERATION

    void setNumOSJobsInIteration(int numJobs);

    // DAKOTA

    bool dakotaStarted() const;

    boost::optional<openstudio::UUID> dakotaJob() const;

    void setDakotaJob(const openstudio::UUID& dakotaJob);

    void clearDakotaJob(const runmanager::JobErrors& dakotaJobErrors);

    // DATA POINTS

    bool isQueuedDataPoint(const openstudio::UUID& job) const;

    bool isQueuedOSDataPoint(const openstudio::UUID& job) const;

    bool isQueuedDakotaDataPoint(const openstudio::UUID& job) const;

    boost::optional<analysis::DataPoint> isQueuedDataPoint(const analysis::DataPoint& dataPoint) const;

    boost::optional<analysis::DataPoint> isQueuedOSDataPoint(const analysis::DataPoint& dataPoint) const;

    boost::optional<analysis::DataPoint> isQueuedDakotaDataPoint(const analysis::DataPoint& dataPoint) const;

    void addNextBatchOSDataPoints(const std::vector<analysis::DataPoint>& nextBatchJobs);

    void addDakotaDataPoint(const analysis::DataPoint& newJob);

    void augmentQueuedDakotaDataPoint(const analysis::DataPoint& dataPoint,
                                      const openstudio::path& dakotaParametersFile);

    /** Returns the OpenStudio DataPoint that corresponds to completedJob, and erases it
     *  from the list of jobs to watch. */
    analysis::DataPoint removeCompletedOSDataPoint(const openstudio::UUID& completedJob);

    /** Returns the Dakota DataPoint that corresponds to completedJob, and erases it
     *  from the list of jobs to watch. */
    analysis::DataPoint removeCompletedDakotaDataPoint(const openstudio::UUID& completedJob);

    // START!

    void start(runmanager::RunManager& runManager);

    // STOP!

    void stop(runmanager::RunManager& runManager);

    void stopQueuedDakotaJobs(runmanager::RunManager& runManager);

    void stop(analysis::DataPoint& dataPoint,runmanager::RunManager& runManager);

    //@}
   private:
    REGISTER_LOGGER("openstudio.analysisdriver.CurrentAnalysis");

    analysis::Analysis m_analysis;
    AnalysisRunOptions m_runOptions;

    int m_numOSJobsInIteration;
    int m_numOSJobsComplete;
    std::vector<analysis::DataPoint> m_queuedOSDataPoints;

    bool m_dakotaStarted;
    boost::optional<openstudio::UUID> m_dakotaJob;
    boost::optional<runmanager::JobErrors> m_dakotaJobErrors;
    std::vector<analysis::DataPoint> m_queuedDakotaDataPoints;
  };

} // detail

} // analysisdriver
} // openstudio

#endif // ANALYSISDRIVER_CURRENTANALYSIS_IMPL_HPP

