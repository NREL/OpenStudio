/***********************************************************************************************************************
*  OpenStudio(R), Copyright (c) 2008-2019, Alliance for Sustainable Energy, LLC, and other contributors. All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
*  following conditions are met:
*
*  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
*  disclaimer.
*
*  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
*  disclaimer in the documentation and/or other materials provided with the distribution.
*
*  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
*  derived from this software without specific prior written permission from the respective party.
*
*  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
*  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
*  written permission from Alliance for Sustainable Energy, LLC.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
*  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
*  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
*  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
*  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
*  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
***********************************************************************************************************************/

#ifndef MODEL_THREEJSREVERSETRANSLATOR_HPP
#define MODEL_THREEJSREVERSETRANSLATOR_HPP

#include "ModelAPI.hpp"

#include "Model.hpp"

#include "../utilities/geometry/ThreeJS.hpp"
#include "../utilities/core/StringStreamLogSink.hpp"

#include <map>

namespace openstudio
{
  namespace model
  {

    class Construction;

    /** ThreeJSReverseTranslator converts a ThreeJS JSON to OpenStudio Model. There are two variations of the ThreeJS format,
    *   this translator requires that the ThreeJS JSON be in OpenStudio Model format rather than optimized for display.
    *
    *   After conversion a map of handles from the ThreeJS JSON to new handles in the returned OpenStudio Model can be retreived.
    *   This map is useful if merging the translated OpenStudio Model with an existing OpenStudio Model.
    */
    MODEL_API class ThreeJSReverseTranslator
    {
    public:

      ThreeJSReverseTranslator();

      /// Convert a ThreeJs Scene to OpenStudio Model format, scene must be in OpenStudio format
      boost::optional<Model> modelFromThreeJS(const ThreeScene& scene);

      /// Mapping between handles referenced in ThreeScene (keys) and handles of objects in returned model (values) for last translation
      /// This handle mapping can be used by the ModelMerger when merging returned model (new handles) with an existing model (existing handles)
      std::map<UUID, UUID> handleMapping() const;

      /// Get warning messages generated by the last translation.
      std::vector<LogMessage> warnings() const;

      /// Get error messages generated by the last translation.
      std::vector<LogMessage> errors() const;

    private:
      REGISTER_LOGGER("openstudio.model.ThreeJSReverseTranslator");

      Point3dVectorVector getFaces(const ThreeGeometryData& data) const;

      Construction getAirWallConstruction(Model& model);

      std::map<UUID, UUID> m_handleMapping;

      StringStreamLogSink m_logSink;

    };

  }
}
#endif //MODEL_THREEJSREVERSETRANSLATOR_HPP
