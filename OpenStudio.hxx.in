/***********************************************************************************************************************
*  OpenStudio(R), Copyright (c) Alliance for Sustainable Energy, LLC.
*  See also https://openstudio.net/license
***********************************************************************************************************************/

#ifndef OPENSTUDIO_HXX
#define OPENSTUDIO_HXX

#include <string>
#include <string_view>

// Support for Ninja on Windows (Ninja isn't multi-configuration while MSVC is)
#cmakedefine NINJA

// Return the version in MAJOR.MINOR.PATCH format (eg '3.0.0')
inline std::string openStudioVersion() {
  return "${OPENSTUDIO_VERSION}";
}

// Includes prerelease tag if any, and build sha, eg: '3.0.0-rc1+baflkdhsia'
inline std::string openStudioLongVersion() {
  return "${OPENSTUDIO_LONG_VERSION}";
}

inline std::string openStudioVersionMajor() {
  return "${PROJECT_VERSION_MAJOR}";
}

inline std::string openStudioVersionMinor() {
  return "${PROJECT_VERSION_MINOR}";
}

inline std::string openStudioVersionPatch() {
  return "${PROJECT_VERSION_PATCH}";
}

inline std::string openStudioVersionPrerelease() {
  return "${PROJECT_VERSION_PRERELEASE}";
}

inline std::string openStudioVersionBuildSHA() {
  return "${PROJECT_VERSION_BUILD}";
}

inline int energyPlusVersionMajor() {
  return ${ENERGYPLUS_VERSION_MAJOR};
}

inline int energyPlusVersionMinor() {
  return ${ENERGYPLUS_VERSION_MINOR};
}

inline int energyPlusVersionPatch() {
  return ${ENERGYPLUS_VERSION_PATCH};
}

inline std::string energyPlusVersion() {
  return "${ENERGYPLUS_VERSION}";
}

inline std::string energyPlusBuildSHA() {
  return "${ENERGYPLUS_BUILD_SHA}";
}

inline std::string rubyLibDir() {
  return "${PROJECT_SOURCE_DIR}/ruby/";
}

inline std::string rubyOpenStudioDir() {
#ifdef WIN32
#  ifdef NINJA
  return "${PROJECT_BINARY_DIR}/ruby/";
#  else
  return "${PROJECT_BINARY_DIR}/ruby/" + std::string(CMAKE_INTDIR) + "/";
#  endif
#else
  return "${PROJECT_BINARY_DIR}/ruby/";
#endif
}

namespace openstudio {
namespace detail {

inline constexpr int cx_openStudioVersionMajor() {
  return ${PROJECT_VERSION_MAJOR};
}
inline constexpr int cx_openStudioVersionMinor() {
  return ${PROJECT_VERSION_MINOR};
}
inline constexpr int cx_openStudioVersionPatch() {
  return ${PROJECT_VERSION_PATCH};
}
inline constexpr std::string_view cx_openStudioVersion() {
  return "${OPENSTUDIO_VERSION}";
}

}  // namespace detail
}  // namespace openstudio

#endif  // OPENSTUDIO_HXX
